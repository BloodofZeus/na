{"file_contents":{"DEPLOYMENT.md":{"content":"# Shawarma Boss POS - Vercel Deployment Guide\n\n## Project Structure\n\nThis project is optimized for Vercel deployment with the following structure:\n\n```\n‚îú‚îÄ‚îÄ api/                    # Serverless API functions\n‚îÇ   ‚îú‚îÄ‚îÄ health.js          # Health check endpoint\n‚îÇ   ‚îú‚îÄ‚îÄ login.js           # Authentication\n‚îÇ   ‚îú‚îÄ‚îÄ menu.js            # Menu management\n‚îÇ   ‚îú‚îÄ‚îÄ orders.js          # Order processing\n‚îÇ   ‚îú‚îÄ‚îÄ staff.js           # Staff management\n‚îÇ   ‚îú‚îÄ‚îÄ init-db.js         # Database initialization\n‚îÇ   ‚îî‚îÄ‚îÄ _utils.js          # Shared utilities\n‚îú‚îÄ‚îÄ src/                   # React frontend\n‚îú‚îÄ‚îÄ dist/                  # Built frontend (generated)\n‚îú‚îÄ‚îÄ public/                # Static assets\n‚îú‚îÄ‚îÄ package.json           # Dependencies and scripts\n‚îú‚îÄ‚îÄ vercel.json            # Vercel configuration\n‚îî‚îÄ‚îÄ webpack.config.js      # Build configuration\n```\n\n## Environment Variables\n\nSet these environment variables in your Vercel dashboard:\n\n### Required Variables for Neon Database:\n- `DATABASE_URL` - Neon PostgreSQL connection string (primary)\n- `NODE_ENV` - Set to \"production\" for production deployment\n\n### Neon Database Variables (Optional):\n- `DATABASE_URL_UNPOOLED` - Neon unpooled connection string\n- `POSTGRES_URL` - Alternative Neon connection string\n- `POSTGRES_URL_NON_POOLING` - Neon non-pooling connection\n- `POSTGRES_USER` - Neon database username\n- `POSTGRES_PASSWORD` - Neon database password\n- `POSTGRES_HOST` - Neon database host\n- `POSTGRES_DATABASE` - Neon database name\n\n### Neon Auth Variables (if using Neon Auth):\n- `NEXT_PUBLIC_STACK_PROJECT_ID` - Neon project ID\n- `NEXT_PUBLIC_STACK_PUBLISHABLE_CLIENT_KEY` - Neon publishable key\n- `STACK_SECRET_SERVER_KEY` - Neon secret server key\n\n## Deployment Steps\n\n### 1. Database Setup\n1. **Neon Database** (Recommended):\n   - Create a Neon database at [neon.tech](https://neon.tech)\n   - Copy your connection string from the Neon dashboard\n   - Add it to Vercel environment variables as `DATABASE_URL`\n   - The connection string should look like: `postgresql://username:password@host/database?sslmode=require`\n\n### 2. Deploy to Vercel\n1. Connect your GitHub repository to Vercel\n2. Set environment variables in Vercel dashboard\n3. Deploy automatically on push to main branch\n\n### 3. Initialize Database\nAfter deployment, make a POST request to `/api/init-db` to set up tables and default data.\n\n## API Endpoints\n\n- `GET /api/health` - Health check\n- `POST /api/login` - User authentication\n- `GET /api/menu` - Get menu items\n- `POST /api/menu` - Add menu item\n- `GET /api/orders` - Get orders\n- `POST /api/orders` - Create order\n- `GET /api/staff` - Get staff members\n- `POST /api/staff` - Add staff member\n- `POST /api/init-db` - Initialize database\n\n## Development\n\n### Local Development\n```bash\nnpm install\nnpm run dev\n```\n\n### Production Build\n```bash\nnpm run build\n```\n\n### Preview Build\n```bash\nnpm run preview\n```\n\n## Performance Optimizations\n\n1. **Code Splitting**: Vendor and app code are split for better caching\n2. **Asset Optimization**: Images and fonts are optimized with content hashing\n3. **Serverless Functions**: Each API endpoint is a separate serverless function\n4. **Database Connection Pooling**: Optimized for serverless environment\n5. **Caching Headers**: Proper cache headers for static assets\n\n## Security Features\n\n1. **CORS Configuration**: Proper CORS headers for API endpoints\n2. **Security Headers**: XSS protection, content type options, frame options\n3. **Password Hashing**: bcrypt for secure password storage\n4. **SQL Injection Protection**: Parameterized queries\n\n## Troubleshooting\n\n### Common Issues:\n\n1. **Database Connection**: Ensure `DATABASE_URL` is set correctly\n2. **Build Failures**: Check that all dependencies are in `package.json`\n3. **API Errors**: Check Vercel function logs in dashboard\n4. **CORS Issues**: API endpoints have proper CORS headers\n\n### Debug Commands:\n```bash\n# Check build locally\nnpm run build\n\n# Test API endpoints\ncurl https://your-app.vercel.app/api/health\n\n# Check database initialization\ncurl -X POST https://your-app.vercel.app/api/init-db\n```\n","size_bytes":4172},"README.md":{"content":"# Shawarma Boss POS - PERN Stack\n\nA modern, full-stack Point of Sale (POS) system built with the PERN stack (PostgreSQL, Express.js, React, Node.js). Originally a vanilla JavaScript PWA, now transformed into a powerful, scalable web application optimized for cloud deployment on Replit.\n\n## üöÄ Features\n\n### Core POS Functionality\n- **User Authentication**: Secure login system with role-based access (Admin/Staff)\n- **Menu Management**: Dynamic menu with real-time stock tracking\n- **Order Processing**: Complete order workflow with cart management\n- **Receipt Generation**: Print and PDF receipt capabilities\n- **Sales Tracking**: Comprehensive sales reporting and analytics\n- **Stock Management**: Real-time inventory tracking with low-stock alerts\n\n### Modern Architecture\n- **React Frontend**: Component-based UI with modern hooks and context\n- **Express.js Backend**: RESTful API with proper error handling\n- **PostgreSQL Database**: Robust relational database with ACID compliance\n- **PWA-Ready Design**: Progressive Web App with modern navbar and mobile optimization\n- **Real-Time Notifications**: Built-in notification system for orders, system updates, and alerts\n- **Mobile-First Responsive**: Touch-friendly interface with hamburger navigation for mobile devices\n- **Hot Reloading**: Development server with automatic rebuilds\n\n### Enhanced Admin Features\n- **Advanced Staff Management**: Add/view staff with role assignment and sales performance tracking\n- **Real-time Menu Management**: Create menu items and update stock levels instantly with visual status indicators\n- **Comprehensive Sales Analytics**: Dashboard with total/daily sales, order counts, and staff performance metrics\n- **Enhanced Stock Management**: Inline stock updates with immediate feedback and low-stock alerts\n- **Professional UI/UX**: Bootstrap 5 integration with success/error notifications and responsive design\n- **Data Export & Reports**: JSON/CSV export functionality with comprehensive order history\n- **Visual Stock Alerts**: Real-time notifications for low inventory with status badges (OK/Low/Out)\n\n### Modern PWA Navigation & Mobile Experience\n- **Professional PWA Navbar**: Clean, light-themed navigation with tabbed interface and brand integration\n- **Mobile Hamburger Menu**: Touch-friendly slide-out navigation with user profile and role display\n- **Notification UI Center**: Mock notification system with badge counts and categorized alerts (ready for real-time integration)\n- **Responsive User Interface**: Adaptive layout that works seamlessly on desktop, tablet, and mobile devices\n- **Touch-Optimized Controls**: Minimum 44px touch targets for optimal mobile usability\n- **Accessibility Support**: Screen reader compatible with ARIA attributes and keyboard navigation\n- **Modern CSS Framework**: Responsive design with CSS Grid, Flexbox, and modern styling patterns\n- **Cross-Device Compatibility**: Optimized for various screen sizes and input methods\n\n## üõ†Ô∏è Technology Stack\n\n### Frontend\n- **React 18** - Component-based UI library\n- **React Router** - Client-side routing\n- **Axios** - HTTP client for API calls\n- **CSS3** - Modern styling with Flexbox/Grid\n- **Bootstrap 5** - Responsive component library\n\n### Backend\n- **Node.js** - JavaScript runtime\n- **Express.js** - Web application framework\n- **PostgreSQL** - Relational database\n- **CORS** - Cross-origin resource sharing\n- **dotenv** - Environment variable management\n\n### Build Tools\n- **Webpack** - Module bundler\n- **Babel** - JavaScript transpiler\n- **npm** - Package manager\n\n## üìã Prerequisites\n\n### For Local Development\n- Node.js 18+ \n- PostgreSQL 12+\n- npm or yarn\n\n### For Replit (Recommended)\n- No local installations required - add a PostgreSQL database via the Database tab\n\n## üöÄ Quick Start\n\n### Option A: Replit (Recommended)\n\n1. **Fork this repository** on Replit or import from GitHub\n2. **Add PostgreSQL Database**: Use the \"Database\" tab in Replit to add a PostgreSQL database (automatically sets DATABASE_URL)\n3. **Install dependencies**: Dependencies will be automatically installed on first run\n4. **Click Run** - The application will build and start automatically\n5. **Access the app** via the Replit webview\n\n**Note**: The PostgreSQL database and tables will be automatically created and seeded with default data on first run.\n\n### Option B: Local Development\n\n#### 1. Clone and Install Dependencies\n\n```bash\n# Clone the repository\ngit clone <repository-url>\ncd shawarma-boss-mern\n\n# Install dependencies\nnpm install\n```\n\n#### 2. Database Setup\n\n```bash\n# Create database\ncreatedb shawarma_boss\n\n# Copy environment file (create .env file)\necho \"PGHOST=localhost\nPGPORT=5432\nPGUSER=postgres\nPGPASSWORD=your_password\nPGDATABASE=shawarma_boss\" > .env\n```\n\n#### 3. Start the Application\n\n```bash\n# Production mode (builds React app and starts server)\nnpm start\n\n# Development mode (for development only)\nnpm run dev\n\n# Build production assets only\nnpm run build\n```\n\nThe application will be available at `http://localhost:5000`\n\n## üìÅ Project Structure\n\n```\nshawarma-boss-mern/\n‚îú‚îÄ‚îÄ src/                    # React frontend source\n‚îÇ   ‚îú‚îÄ‚îÄ components/         # React components\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Login.js       # Authentication component\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ POS.js         # Main POS interface\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Admin.js       # Admin dashboard\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Header.js      # Navigation header\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Cart.js        # Shopping cart\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ MenuGrid.js    # Menu display\n‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ OrderModal.js  # Order receipt modal\n‚îÇ   ‚îú‚îÄ‚îÄ services/          # API and state management\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ api.js         # API client\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ AuthContext.js # Authentication context\n‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ CartContext.js # Cart state management\n‚îÇ   ‚îú‚îÄ‚îÄ App.js             # Main React component\n‚îÇ   ‚îú‚îÄ‚îÄ App.css            # Application styles\n‚îÇ   ‚îú‚îÄ‚îÄ index.js           # React entry point\n‚îÇ   ‚îî‚îÄ‚îÄ index.css          # Global styles and utilities\n‚îú‚îÄ‚îÄ public/                # Static assets\n‚îÇ   ‚îî‚îÄ‚îÄ index.html         # HTML template\n‚îú‚îÄ‚îÄ dist/                  # Built React application (auto-generated)\n‚îú‚îÄ‚îÄ icons/                 # Application icons and logo\n‚îú‚îÄ‚îÄ server.js              # Unified Express.js server (frontend + API)\n‚îú‚îÄ‚îÄ webpack.config.js      # Webpack configuration\n‚îú‚îÄ‚îÄ package.json           # Dependencies and scripts\n‚îú‚îÄ‚îÄ replit.md             # Project documentation and architecture\n‚îî‚îÄ‚îÄ README.md             # This file\n```\n\n## üîå API Endpoints\n\n### Authentication\n- `POST /api/login` - User authentication\n- `GET /api/health` - Server health check\n\n### User Management\n- `GET /api/staff` - Get all staff members\n- `POST /api/staff` - Add new staff member\n\n### Menu Management\n- `GET /api/menu` - Get menu items\n- `POST /api/menu` - Add menu item\n- `PUT /api/menu/:id/stock` - Update item stock\n\n### Orders\n- `GET /api/orders` - Get order history\n- `POST /api/orders` - Create new order\n\n## üë• Default Users\n\nThe application comes with default users for testing:\n\n| Username | Password | Role |\n|----------|----------|------|\n| admin | admin123 | admin |\n| staff1 | staff123 | staff |\n\n## üóÉÔ∏è Database Schema\n\n### Users Table\n```sql\nCREATE TABLE users (\n    username VARCHAR(50) PRIMARY KEY,\n    password VARCHAR(255) NOT NULL,\n    role VARCHAR(20) DEFAULT 'staff',\n    meta JSONB,\n    created_at TIMESTAMP DEFAULT NOW(),\n    updated_at TIMESTAMP DEFAULT NOW()\n);\n```\n\n### Menu Table\n```sql\nCREATE TABLE menu (\n    id VARCHAR(50) PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    price DECIMAL(10,2) NOT NULL DEFAULT 0,\n    stock INTEGER NOT NULL DEFAULT 0,\n    meta JSONB,\n    created_at TIMESTAMP DEFAULT NOW(),\n    updated_at TIMESTAMP DEFAULT NOW()\n);\n```\n\n### Orders Table\n```sql\nCREATE TABLE orders (\n    id VARCHAR(50) PRIMARY KEY,\n    staff VARCHAR(50),\n    timestamp TIMESTAMP DEFAULT NOW(),\n    total DECIMAL(10,2) NOT NULL DEFAULT 0,\n    payload JSONB,\n    server_received_at TIMESTAMP DEFAULT NOW(),\n    FOREIGN KEY (staff) REFERENCES users(username)\n);\n```\n\n## üöÄ Deployment\n\n### Replit Deployment (Recommended)\nThis application is fully optimized for Replit deployment:\n\n1. **Database Setup**: Add PostgreSQL database via Replit's Database tab (sets DATABASE_URL automatically)\n2. **One-Click Deploy**: Use the \"Deploy\" button in Replit for instant production deployment\n3. **Autoscale Configuration**: Configure autoscale target in Replit's Deploy settings for automatic scaling\n4. **Build Process**: `npm run build` ‚Üí `node server.js`\n5. **CORS Enabled**: Properly configured for Replit's proxy environment\n\n### Manual Deployment\nFor other platforms, ensure the following environment variables are set:\n\n```bash\nNODE_ENV=production\nDATABASE_URL=your_postgresql_connection_string\nPORT=5000\nPGHOST=your_host\nPGPORT=5432\nPGUSER=your_user\nPGPASSWORD=your_password\nPGDATABASE=your_database\n```\n\n## üîß Development\n\n### Available Scripts\n\n- `npm start` - Build and start production server (used by Replit)\n- `npm run dev` - Start development server (development only)\n- `npm run build` - Build React app for production\n- `npm run build:dev` - Build React app for development\n\n### Development Workflow\n\n#### On Replit (Recommended)\n1. Make changes to React components in `src/` or backend in `server.js`\n2. The app automatically rebuilds and restarts\n3. View changes instantly in the Replit webview\n\n#### Local Development\n1. Start the development server: `npm run dev`\n2. Make changes to React components in `src/`\n3. The build process automatically rebuilds the app\n4. Server restarts automatically on backend changes\n\n### Important Notes\n- **Price Handling**: All price values from PostgreSQL are strings and must be converted with `parseFloat()` before using `.toFixed()`\n- **CORS**: Application is configured to work with Replit's proxy environment\n- **Database**: Automatic table creation and seeding on first run\n\n## üìä Features in Detail\n\n### Role-Based Access Control\n- **Staff**: Can only view their own sales and process orders\n- **Admin**: Full access to all features including user management and analytics\n\n### Advanced Real-Time Stock Management\n- **Inline Stock Updates**: Administrators can update stock levels directly from the menu management panel\n- **Visual Stock Indicators**: Color-coded badges showing stock status (Green=OK, Yellow=Low, Red=Out)\n- **Automatic Stock Deduction**: Stock levels automatically decrease when orders are processed\n- **Low Stock Alerts**: Immediate notifications when items reach ‚â§5 units with dedicated alerts section\n- **Real-time Feedback**: Success/error notifications for all stock operations with auto-dismissing alerts\n- **Stock Status Prevention**: System prevents orders when items are out of stock\n\n### Sales Analytics\n- Real-time sales dashboard\n- Sales by staff member\n- Daily/total sales tracking\n- Order history with detailed breakdown\n\n### Data Export\n- JSON export of all data (users, menu, orders)\n- CSV export of orders for external analysis\n- Data backup capabilities for external storage\n\n## üîí Security Features\n\n- Password-based authentication\n- Role-based route protection\n- SQL injection prevention with parameterized queries\n- CORS configuration for secure cross-origin requests\n- Input validation and sanitization\n\n## ü§ù Contributing\n\n1. Fork the repository\n2. Create a feature branch: `git checkout -b feature/amazing-feature`\n3. Commit your changes: `git commit -m 'Add amazing feature'`\n4. Push to the branch: `git push origin feature/amazing-feature`\n5. Open a Pull Request\n\n## üìù License\n\nThis project is licensed under the ISC License.\n\n## üìû Support\n\nFor support, please open an issue in the GitHub repository or contact the development team.\n\n## ‚úÖ Recent Enhancements (Latest Update)\n\n### v2.2.0 - Modern PWA Navbar & Mobile Experience\n- [x] **Modern PWA-Style Navigation**: Clean light theme with professional tab-based navigation\n- [x] **Mobile-First Responsive Design**: Touch-friendly hamburger menu with slide-out navigation\n- [x] **Notification UI System**: Mock notification center with badge counts and categorized alerts (demo ready)\n- [x] **Enhanced User Experience**: User avatars, role badges, and improved dropdown menus\n- [x] **Mobile Optimization**: Touch targets and mobile-optimized layouts\n- [x] **Accessibility Features**: Screen reader support, keyboard navigation, and ARIA attributes\n- [x] **Responsive Design**: Automatic layout adaptation based on screen size\n- [x] **Modern CSS Framework**: Enhanced styling with modern CSS patterns and animations\n\n### v2.1.0 - Replit Optimization & Bug Fixes\n- [x] **Replit Environment Optimization**: Fully configured for seamless deployment on Replit\n- [x] **Critical Bug Fixes**: Resolved PostgreSQL DECIMAL string handling causing blank pages\n- [x] **Price Formatting**: Fixed all `.toFixed()` errors with proper `parseFloat()` handling\n- [x] **Logo Optimization**: Improved login page logo sizing and layout\n- [x] **Database Integration**: Automatic PostgreSQL setup with proper environment configuration\n- [x] **CORS Configuration**: Optimized for Replit's proxy environment\n- [x] **Error Handling**: Comprehensive error handling for all price calculations\n\n### v2.0.0 - Enhanced Admin Dashboard\n- [x] **Enhanced Admin Dashboard**: Complete redesign with Bootstrap 5 integration\n- [x] **Real-time Stock Updates**: Inline stock modification with immediate visual feedback\n- [x] **Advanced Notification System**: Success/error alerts with auto-dismiss functionality\n- [x] **Improved Stock Management**: Visual status indicators and comprehensive alerts\n- [x] **Professional UI/UX**: Modern responsive design with Font Awesome icons\n- [x] **Enhanced Sales Analytics**: Comprehensive dashboard with staff performance tracking\n\n## üêõ Known Issues & Solutions\n\n### Troubleshooting\n- **Blank Page Issues**: If you encounter blank pages, ensure all price values are properly handled with `parseFloat()` before `.toFixed()`\n- **Database Connection**: PostgreSQL connection is automatic on Replit; for local development, ensure PostgreSQL is running\n- **Build Errors**: Run `npm install` to ensure all dependencies are installed\n- **CORS Issues**: The app is pre-configured for Replit's proxy environment\n\n## üéØ Future Roadmap\n\n- [ ] JWT-based authentication with refresh tokens\n- [ ] Password hashing with bcrypt\n- [ ] Real-time WebSocket notifications\n- [ ] Multi-location support\n- [ ] Advanced reporting with charts and graphs\n- [ ] Mobile app (React Native)\n- [ ] Integration with payment processors (Stripe, PayPal)\n- [ ] Barcode scanning support\n- [ ] Inventory forecasting and automated reordering\n- [ ] Multi-currency support\n- [ ] Dark mode theme\n\n---\n\n**Built with ‚ù§Ô∏è using the PERN Stack**","size_bytes":14879},"VERCEL_DEPLOYMENT.md":{"content":"# Vercel Deployment Guide\n\n## Project Structure\nThis project has been restructured for Vercel deployment with the following structure:\n- **Frontend**: React app in root directory (built with Webpack)\n- **Backend**: Express API in `/api` folder (serverless functions)\n- **Database**: PostgreSQL (recommended: Neon, Supabase, or other serverless-friendly providers)\n\n## Deployment Steps\n\n### 1. Prerequisites\n- GitHub repository with this code\n- Vercel account\n- PostgreSQL database (recommended providers: Neon, Supabase)\n\n### 2. Deploy to Vercel\n1. Go to [Vercel Dashboard](https://vercel.com/dashboard)\n2. Click \"Add New...\" ‚Üí \"Project\"\n3. Import your GitHub repository\n4. Configure project settings:\n   - The `vercel.json` file already contains the build configuration\n   - **Build Command**: `npm run build` (pre-configured)\n   - **Output Directory**: `dist` (pre-configured)\n   - **Install Command**: `npm install` (default)\n\n### 3. Environment Variables\nAdd these environment variables in Vercel project settings:\n- `DATABASE_URL`: Your Neon PostgreSQL connection string (postgresql://neondb_owner:...)\n- `NODE_ENV`: `production`\n- `PGHOST`: Your Neon database host\n- `PGUSER`: Your Neon database user\n- `PGDATABASE`: Your Neon database name\n- `PGPASSWORD`: Your Neon database password\n\n**Important**: Use the pooled connection URL from Neon for better performance in serverless environments.\n\n### 4. Database Setup\n- Use a serverless-friendly PostgreSQL provider (Neon, Supabase recommended)\n- Ensure SSL is enabled for production connections\n- The app will automatically create tables on first run\n\n### 5. Security Features\n- ‚úÖ Password hashing with bcrypt\n- ‚úÖ No default credentials in production\n- ‚úÖ Secure database connections with SSL\n- ‚úÖ Input validation and error handling\n\n## Development Mode\nFor local development:\n```bash\n# Frontend (runs on port 5000)\nnpm start\n\n# API (if testing separately)\ncd api && npm run dev\n```\n\n## Production Features\n- SPA routing with proper fallback for React Router\n- Serverless API functions\n- Secure password authentication\n- Environment-based configuration\n- PostgreSQL with connection pooling\n\n## Notes\n- Default demo users (admin/staff1) are only created in development mode\n- Production deployment requires manual user creation through the admin interface\n- All API routes are prefixed with `/api/`\n- Frontend automatically proxies API requests to the serverless functions","size_bytes":2434},"replit.md":{"content":"# Overview\n\nShawarma Boss POS is a modern Point of Sale system built with the MERN stack (MongoDB/PostgreSQL, Express.js, React, Node.js). Originally developed as a vanilla JavaScript PWA stored in localStorage, it has been transformed into a full-stack application with a React frontend, Express.js backend, and PostgreSQL database. The system provides comprehensive POS functionality including user authentication, menu management, order processing, receipt generation, sales tracking, and real-time inventory management with role-based access control for admin and staff users.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **React 18** with functional components and hooks for the user interface\n- **React Router** for client-side navigation between POS and admin views\n- **Context API** for state management (AuthContext for user sessions, CartContext for shopping cart)\n- **Axios** for HTTP client communication with the backend API\n- **Component-based architecture** with reusable components (Header, Login, POS, Admin, Cart, MenuGrid, OrderModal)\n- **Responsive design** using Bootstrap 5 and custom CSS with mobile-first approach\n- **Webpack** for module bundling and build process with hot reloading in development\n\n## Backend Architecture\n- **Express.js** web server providing RESTful API endpoints\n- **PostgreSQL** as the primary database with ACID compliance\n- **Database initialization** with automatic table creation and default data seeding\n- **Role-based authentication** with admin and staff user roles\n- **CORS enabled** for cross-origin requests (required for Replit proxy)\n- **Environment variable configuration** for database connection and deployment flexibility\n- **Static file serving** for both React build artifacts and legacy PWA assets\n\n## Data Storage Architecture\n- **PostgreSQL tables**: users, menu, orders with proper relational structure\n- **Backward compatibility** with localStorage data migration for existing installations\n- **JSON metadata storage** in JSONB fields for flexible data extension\n- **Automatic timestamp tracking** for created_at and updated_at fields\n\n## Authentication & Authorization\n- **Session-based authentication** with localStorage persistence\n- **Role-based access control** (admin can access all features, staff limited to POS functionality)\n- **Token-based API authentication** for external server sync (optional)\n- **Password validation** with secure credential handling\n\n## Legacy PWA Support\n- **Service worker** for offline functionality and caching\n- **Web app manifest** for PWA installation capabilities\n- **Progressive enhancement** approach maintaining offline-first functionality\n- **Dual architecture** supporting both modern React app and legacy vanilla JavaScript\n\n# External Dependencies\n\n## Frontend Libraries\n- **Bootstrap 5** - CSS framework for responsive UI components\n- **Font Awesome** - Icon library for UI elements\n- **Chart.js** - Data visualization for sales analytics and reporting\n- **jsPDF** - PDF generation for receipts and reports\n- **QRious** - QR code generation for receipts\n\n## Backend Dependencies\n- **PostgreSQL (pg)** - Primary database driver and connection pooling\n- **CORS** - Cross-origin resource sharing middleware\n- **body-parser** - HTTP request body parsing middleware\n- **dotenv** - Environment variable configuration management\n\n## Build Tools & Development\n- **Webpack** - Module bundler with Babel transpilation\n- **Babel** - JavaScript transpiler for React JSX and modern JavaScript features\n- **React Scripts** - Create React App tooling for development workflow\n\n## Database Configuration\n- **PostgreSQL connection** with environment variable configuration\n- **SSL support** for production deployments\n- **Connection pooling** for efficient database resource management\n- **Automatic failover** to localhost development database\n\n## Deployment Support\n- **Environment-based configuration** for development and production\n- **Static file serving** for single-server deployment\n- **Port configuration** with fallback to port 5000\n- **Database URL parsing** for various hosting providers (Railway, Render, Fly.io)\n\n# Recent Enhancements (October 2025)\n\n## Enhanced Admin Panel Features\n\n### Staff Management\n- **View/Edit Staff Details** - Modal interface for viewing and editing staff information\n- **Reset Password** - Direct password reset functionality for staff members\n- **Delete Staff** - Remove staff members with confirmation dialog\n- **Assign Roles** - Ability to change staff roles (admin/staff) via StaffDetailsModal\n- **Activate/Deactivate** - Toggle staff member active status\n\n### Menu Items Management\n- **View/Edit Details** - Comprehensive modal (MenuDetailsModal) for viewing and editing menu items\n- **Update Price** - Direct price modification for menu items\n- **Change Category** - Categorize items (General, Shawarma, Wraps, Sides, Drinks, Desserts)\n- **Toggle Availability** - Mark items as available/unavailable (out of stock) independently of inventory\n- **Duplicate Item** - Quick duplication of menu items with \"(Copy)\" suffix\n- **Delete Item** - Remove menu items with confirmation dialog\n- **Category Display** - Visual category badges in menu table\n- **Stock Management** - In-line stock quantity updates with immediate database sync\n\n### Backend API Enhancements\n- **PATCH /api/menu** - Update menu item details (name, price, category, availability)\n- **DELETE /api/menu** - Remove menu items from database\n- **POST /api/menu** (duplicate) - Clone existing menu items\n- **Enhanced GET /api/menu** - Returns category and availability status\n- **Full CRUD operations** - Complete Create, Read, Update, Delete for both staff and menu items","size_bytes":5768},"server.js":{"content":"const express = require('express');\nconst cors = require('cors');\nconst path = require('path');\nrequire('dotenv').config();\n\nconst app = express();\nconst PORT = process.env.PORT || 3001; // Use different port from frontend\n\n// Middleware\napp.use(cors());\napp.use(express.json());\n\n// Import API route handlers\nconst healthHandler = require('./api/health');\nconst loginHandler = require('./api/login');\nconst menuHandler = require('./api/menu');\nconst ordersHandler = require('./api/orders');\nconst staffHandler = require('./api/staff');\nconst initDbHandler = require('./api/init-db');\n// Remove the problematic stock handler import for now\n\n// API Routes - Convert Vercel serverless functions to Express routes\napp.get('/api/health', (req, res) => healthHandler(req, res));\napp.post('/api/login', (req, res) => loginHandler(req, res));\n\n// Menu routes\napp.get('/api/menu', (req, res) => menuHandler(req, res));\napp.post('/api/menu', (req, res) => menuHandler(req, res));\napp.put('/api/menu', (req, res) => menuHandler(req, res));\napp.patch('/api/menu', (req, res) => menuHandler(req, res));\napp.delete('/api/menu', (req, res) => menuHandler(req, res));\n\n// Stock route - handle within menu handler\napp.put('/api/menu/:id/stock', (req, res) => {\n  // Set the URL for the handler to parse and add stock to body\n  req.url = `/api/menu/${req.params.id}/stock`;\n  req.body = { id: req.params.id, ...req.body };\n  menuHandler(req, res);\n});\n\n// Orders routes\napp.get('/api/orders', (req, res) => ordersHandler(req, res));\napp.post('/api/orders', (req, res) => ordersHandler(req, res));\n\n// Staff routes\napp.get('/api/staff', (req, res) => staffHandler(req, res));\napp.post('/api/staff', (req, res) => staffHandler(req, res));\napp.put('/api/staff', (req, res) => staffHandler(req, res));\napp.patch('/api/staff', (req, res) => staffHandler(req, res));\napp.delete('/api/staff', (req, res) => staffHandler(req, res));\n\n// Database initialization route\napp.post('/api/init-db', (req, res) => initDbHandler(req, res));\n\n// CORS is already handled by the cors() middleware above\n\n// Serve static files in production\nif (process.env.NODE_ENV === 'production') {\n  app.use(express.static(path.join(__dirname, 'dist')));\n  \n  // Handle client-side routing\n  app.get('*', (req, res) => {\n    if (!req.path.startsWith('/api')) {\n      res.sendFile(path.join(__dirname, 'dist', 'index.html'));\n    }\n  });\n}\n\n// Error handling middleware\napp.use((err, req, res, next) => {\n  console.error('Server error:', err);\n  res.status(500).json({ \n    error: 'Internal server error',\n    message: err.message \n  });\n});\n\n// Start server\napp.listen(PORT, 'localhost', () => {\n  console.log(`üöÄ API Server running on http://localhost:${PORT}`);\n  console.log(`üìä Health check available at http://localhost:${PORT}/api/health`);\n});\n\nmodule.exports = app;","size_bytes":2827},"webpack.config.js":{"content":"const path = require('path');\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\nconst ReactRefreshWebpackPlugin = require('@pmmmwh/react-refresh-webpack-plugin');\n\nmodule.exports = (env, argv) => {\n  const isProduction = argv.mode === 'production';\n  \n  return {\n    entry: './src/index.js',\n    output: {\n      path: path.resolve(__dirname, 'dist'),\n      filename: isProduction ? 'bundle.[contenthash].js' : 'bundle.js',\n      publicPath: '/',\n      clean: true,\n      assetModuleFilename: 'assets/[name].[contenthash][ext]'\n    },\n    devServer: {\n      host: '0.0.0.0',\n      port: 5000,\n      allowedHosts: 'all',\n      historyApiFallback: true,\n      proxy: {\n        '/api': {\n          target: 'http://localhost:3001',\n          changeOrigin: true,\n          secure: false,\n        },\n      },\n      static: {\n        directory: path.join(__dirname, 'dist'),\n      },\n      compress: true,\n      hot: true,\n      open: false\n    },\n    module: {\n      rules: [\n        {\n          test: /\\.(js|jsx)$/,\n          exclude: /node_modules/,\n          use: {\n            loader: 'babel-loader',\n            options: {\n              presets: [\n                ['@babel/preset-env', {\n                  targets: {\n                    browsers: ['last 2 versions', 'ie >= 11']\n                  },\n                  modules: false\n                }],\n                ['@babel/preset-react', {\n                  runtime: 'automatic'\n                }]\n              ],\n              plugins: isProduction ? [] : ['react-refresh/babel']\n            }\n          }\n        },\n        {\n          test: /\\.css$/,\n          use: [\n            'style-loader',\n            {\n              loader: 'css-loader',\n              options: {\n                modules: false,\n                sourceMap: !isProduction\n              }\n            }\n          ]\n        },\n        {\n          test: /\\.(png|jpg|jpeg|gif|svg|ico)$/,\n          type: 'asset/resource',\n          generator: {\n            filename: (pathData) => {\n              // Keep original filenames for icons and logos in public directory\n              if (pathData.filename.includes('public/')) {\n                return '[name][ext]';\n              }\n              return 'images/[name].[contenthash][ext]';\n            }\n          }\n        },\n        {\n          test: /\\.(woff|woff2|eot|ttf|otf)$/,\n          type: 'asset/resource',\n          generator: {\n            filename: 'fonts/[name].[contenthash][ext]'\n          }\n        }\n      ]\n    },\n    plugins: [\n      new HtmlWebpackPlugin({\n        template: './public/index.html',\n        filename: 'index.html',\n        minify: isProduction ? {\n          removeComments: true,\n          collapseWhitespace: true,\n          removeRedundantAttributes: true,\n          useShortDoctype: true,\n          removeEmptyAttributes: true,\n          removeStyleLinkTypeAttributes: true,\n          keepClosingSlash: true,\n          minifyJS: true,\n          minifyCSS: true,\n          minifyURLs: true\n        } : false\n      }),\n      // React Fast Refresh for development\n      ...(!isProduction ? [new ReactRefreshWebpackPlugin()] : []),\n      // Copy static assets from public directory\n      ...(isProduction ? [\n        new (require('copy-webpack-plugin'))({\n          patterns: [\n            {\n              from: 'public',\n              to: '.',\n              globOptions: {\n                ignore: ['**/index.html']\n              }\n            }\n          ]\n        })\n      ] : [])\n    ],\n    resolve: {\n      extensions: ['.js', '.jsx'],\n      alias: {\n        '@': path.resolve(__dirname, 'src'),\n        '@components': path.resolve(__dirname, 'src/components'),\n        '@services': path.resolve(__dirname, 'src/services')\n      }\n    },\n    optimization: {\n      splitChunks: isProduction ? {\n        chunks: 'all',\n        cacheGroups: {\n          vendor: {\n            test: /[\\\\/]node_modules[\\\\/]/,\n            name: 'vendors',\n            chunks: 'all',\n          },\n        },\n      } : false,\n      minimize: isProduction\n    },\n    mode: isProduction ? 'production' : 'development',\n    devtool: isProduction ? 'source-map' : 'eval-source-map',\n    performance: {\n      hints: isProduction ? 'warning' : false,\n      maxEntrypointSize: 512000,\n      maxAssetSize: 512000\n    }\n  };\n};","size_bytes":4310},"api/_utils.js":{"content":"// Shared utilities for Vercel serverless functions\nconst { Pool } = require('pg');\n\n// Database connection configuration optimized for Neon serverless\nconst getDatabaseConfig = () => {\n  // Priority order for Neon database connection\n  let DATABASE_URL = process.env.DATABASE_URL || process.env.POSTGRES_URL;\n  \n  // Clean up any extra characters from the URL\n  if (DATABASE_URL && DATABASE_URL.startsWith('=')) {\n    DATABASE_URL = DATABASE_URL.substring(1);\n  }\n  \n  // If no URL, construct from individual components\n  if (!DATABASE_URL) {\n    DATABASE_URL = `postgresql://${process.env.PGUSER}:${process.env.PGPASSWORD}@${process.env.PGHOST}:${process.env.PGPORT || 5432}/${process.env.PGDATABASE}?sslmode=require`;\n  }\n\n  console.log('Database connection URL configured:', DATABASE_URL.replace(/:[^@]+@/, ':****@'));\n\n  return {\n    connectionString: DATABASE_URL,\n    ssl: { rejectUnauthorized: false }, // Always use SSL for Neon\n    max: 1, // Limit connections for serverless\n    idleTimeoutMillis: 10000, // Reduced for Neon\n    connectionTimeoutMillis: 5000, // Increased for Neon\n    allowExitOnIdle: true, // Allow pool to close when idle\n    statement_timeout: 30000, // 30 second timeout\n    query_timeout: 30000, // 30 second timeout\n  };\n};\n\n// Create database pool\nconst createPool = () => {\n  return new Pool(getDatabaseConfig());\n};\n\n// Helper function for database queries with error handling optimized for Neon\nconst queryDB = async (pool, sql, params = []) => {\n  let client;\n  try {\n    client = await pool.connect();\n    const result = await client.query(sql, params);\n    return result.rows;\n  } catch (error) {\n    console.error('Database query error:', error);\n    throw error;\n  } finally {\n    if (client) {\n      client.release();\n    }\n  }\n};\n\n// Helper function for single queries (for serverless functions)\nconst queryDBOnce = async (sql, params = []) => {\n  const pool = createPool();\n  try {\n    const result = await pool.query(sql, params);\n    return result.rows;\n  } catch (error) {\n    console.error('Database query error:', error);\n    throw error;\n  } finally {\n    await pool.end();\n  }\n};\n\n// CORS headers for API responses\nconst corsHeaders = {\n  'Access-Control-Allow-Origin': '*',\n  'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',\n  'Access-Control-Allow-Headers': 'Content-Type, Authorization',\n};\n\n// Set CORS headers\nconst setCorsHeaders = (res) => {\n  Object.entries(corsHeaders).forEach(([key, value]) => {\n    res.setHeader(key, value);\n  });\n};\n\n// Handle OPTIONS requests for CORS\nconst handleOptions = (res) => {\n  setCorsHeaders(res);\n  res.status(200).end();\n};\n\nmodule.exports = {\n  createPool,\n  queryDB,\n  queryDBOnce,\n  setCorsHeaders,\n  handleOptions,\n  getDatabaseConfig\n};\n","size_bytes":2758},"api/health.js":{"content":"// Health check endpoint for Vercel serverless with Neon database\nconst { queryDBOnce, setCorsHeaders, handleOptions } = require('./_utils');\n\nmodule.exports = async (req, res) => {\n  // Handle CORS preflight\n  if (req.method === 'OPTIONS') {\n    return handleOptions(res);\n  }\n\n  setCorsHeaders(res);\n\n  try {\n    // Test database connection with Neon\n    await queryDBOnce('SELECT NOW() as current_time, version() as db_version');\n    \n    res.json({ \n      ok: true, \n      message: 'Shawarma Boss API Running on Vercel with Neon Database', \n      database: 'Neon PostgreSQL',\n      timestamp: new Date().toISOString(),\n      environment: process.env.NODE_ENV || 'development'\n    });\n  } catch (error) {\n    console.error('Health check failed:', error);\n    res.status(500).json({ \n      ok: false, \n      message: 'Database connection failed', \n      error: error.message,\n      database: 'Neon PostgreSQL'\n    });\n  }\n};\n","size_bytes":927},"api/init-db.js":{"content":"// Database initialization for Vercel serverless with Neon database\nconst bcrypt = require('bcrypt');\nconst { createPool, queryDB, setCorsHeaders, handleOptions } = require('./_utils');\n\nmodule.exports = async (req, res) => {\n  // Handle CORS preflight\n  if (req.method === 'OPTIONS') {\n    return handleOptions(res);\n  }\n\n  if (req.method !== 'POST') {\n    return res.status(405).json({ error: 'Method not allowed' });\n  }\n\n  setCorsHeaders(res);\n\n  try {\n    const pool = createPool();\n    \n    // Create tables if they don't exist\n    await queryDB(pool, `\n      CREATE TABLE IF NOT EXISTS users (\n        username VARCHAR(50) PRIMARY KEY,\n        password VARCHAR(255) NOT NULL,\n        role VARCHAR(20) DEFAULT 'staff',\n        meta JSONB,\n        created_at TIMESTAMP DEFAULT NOW(),\n        updated_at TIMESTAMP DEFAULT NOW()\n      )\n    `);\n\n    await queryDB(pool, `\n      CREATE TABLE IF NOT EXISTS menu (\n        id VARCHAR(50) PRIMARY KEY,\n        name VARCHAR(255) NOT NULL,\n        price DECIMAL(10,2) NOT NULL DEFAULT 0,\n        stock INTEGER NOT NULL DEFAULT 0,\n        meta JSONB,\n        created_at TIMESTAMP DEFAULT NOW(),\n        updated_at TIMESTAMP DEFAULT NOW()\n      )\n    `);\n\n    await queryDB(pool, `\n      CREATE TABLE IF NOT EXISTS orders (\n        id VARCHAR(50) PRIMARY KEY,\n        staff VARCHAR(50),\n        timestamp TIMESTAMP DEFAULT NOW(),\n        total DECIMAL(10,2) NOT NULL DEFAULT 0,\n        payload JSONB,\n        server_received_at TIMESTAMP DEFAULT NOW(),\n        FOREIGN KEY (staff) REFERENCES users(username)\n      )\n    `);\n\n    // Create indexes for better performance\n    await queryDB(pool, `CREATE INDEX IF NOT EXISTS idx_orders_staff ON orders(staff)`);\n    await queryDB(pool, `CREATE INDEX IF NOT EXISTS idx_orders_timestamp ON orders(timestamp)`);\n    await queryDB(pool, `CREATE INDEX IF NOT EXISTS idx_menu_stock ON menu(stock)`);\n\n    // Insert default data - always create users if none exist\n    const userCount = await queryDB(pool, 'SELECT COUNT(*) as count FROM users');\n    if (parseInt(userCount[0].count) === 0) {\n      const saltRounds = 10;\n      const defaultUsers = [\n        { username: 'admin', password: await bcrypt.hash('admin123', saltRounds), role: 'admin' },\n        { username: 'staff1', password: await bcrypt.hash('staff123', saltRounds), role: 'staff' }\n      ];\n      \n      for (const user of defaultUsers) {\n        await queryDB(pool,\n          'INSERT INTO users (username, password, role) VALUES ($1, $2, $3) ON CONFLICT (username) DO NOTHING',\n          [user.username, user.password, user.role]\n        );\n      }\n      console.log('‚úÖ Default users created');\n    }\n\n    const menuCount = await queryDB(pool, 'SELECT COUNT(*) as count FROM menu');\n    if (parseInt(menuCount[0].count) === 0) {\n      const defaultMenu = [\n        { id: 'm-1', name: 'Shawarma Wrap', price: 20, stock: 25 },\n        { id: 'm-2', name: 'Chicken Shawarma', price: 25, stock: 20 },\n        { id: 'm-3', name: 'Beef Shawarma', price: 28, stock: 18 }\n      ];\n      \n      for (const item of defaultMenu) {\n        await queryDB(pool,\n          'INSERT INTO menu (id, name, price, stock) VALUES ($1, $2, $3, $4)',\n          [item.id, item.name, item.price, item.stock]\n        );\n      }\n      console.log('‚úÖ Default menu items created');\n    }\n\n    await pool.end(); // Close connection\n\n    res.json({ \n      ok: true, \n      message: 'Neon database initialized successfully',\n      database: 'Neon PostgreSQL',\n      timestamp: new Date().toISOString()\n    });\n  } catch (error) {\n    console.error('‚ùå Database initialization error:', error);\n    res.status(500).json({ \n      ok: false, \n      error: error.message,\n      database: 'Neon PostgreSQL'\n    });\n  }\n};\n","size_bytes":3740},"api/login.js":{"content":"// Login endpoint for Vercel serverless with Neon database\nconst bcrypt = require('bcrypt');\nconst { queryDBOnce, setCorsHeaders, handleOptions } = require('./_utils');\n\nmodule.exports = async (req, res) => {\n  // Handle CORS preflight\n  if (req.method === 'OPTIONS') {\n    return handleOptions(res);\n  }\n\n  if (req.method !== 'POST') {\n    return res.status(405).json({ error: 'Method not allowed' });\n  }\n\n  setCorsHeaders(res);\n\n  try {\n    const { username, password } = req.body || {};\n    if (!username || !password) {\n      return res.status(400).json({ ok: false, error: 'Username and password required' });\n    }\n    \n    const users = await queryDBOnce('SELECT username, password, role FROM users WHERE username = $1', [username]);\n    const user = users[0];\n    \n    if (!user) {\n      return res.status(401).json({ ok: false, error: 'Invalid credentials' });\n    }\n    \n    // Verify password using bcrypt\n    const isValidPassword = await bcrypt.compare(password, user.password);\n    if (!isValidPassword) {\n      return res.status(401).json({ ok: false, error: 'Invalid credentials' });\n    }\n    \n    res.json({ ok: true, username: user.username, role: user.role });\n  } catch (e) {\n    console.error('Login error:', e);\n    res.status(500).json({ ok: false, error: e.message });\n  }\n};\n","size_bytes":1302},"api/menu.js":{"content":"// Menu API endpoints for Vercel serverless with Neon database\nconst { queryDBOnce, setCorsHeaders, handleOptions } = require('./_utils');\n\nmodule.exports = async (req, res) => {\n  // Handle CORS preflight\n  if (req.method === 'OPTIONS') {\n    return handleOptions(res);\n  }\n\n  setCorsHeaders(res);\n\n  try {\n    if (req.method === 'GET') {\n      // Get menu items\n      const menu = await queryDBOnce('SELECT id, name, price, stock, meta FROM menu ORDER BY created_at');\n      const mapped = menu.map(item => ({\n        id: item.id,\n        name: item.name,\n        price: item.price,\n        stock: item.stock,\n        meta: item.meta || null,\n        is_available: item.meta?.is_available !== false,\n        category: item.meta?.category || 'General'\n      }));\n      res.json(mapped);\n    } else if (req.method === 'POST') {\n      // Check if this is a duplicate request\n      if (req.body.duplicateFrom) {\n        // Duplicate menu item\n        const { duplicateFrom } = req.body;\n        const original = await queryDBOnce('SELECT * FROM menu WHERE id = $1', [duplicateFrom]);\n        if (!original || original.length === 0) {\n          return res.status(404).json({ error: 'Menu item not found' });\n        }\n        \n        const item = original[0];\n        const newId = 'm-' + Date.now() + '-' + Math.floor(Math.random() * 1000);\n        const newName = item.name + ' (Copy)';\n        \n        await queryDBOnce(\n          'INSERT INTO menu (id, name, price, stock, meta) VALUES ($1, $2, $3, $4, $5)', \n          [newId, newName, item.price, item.stock, item.meta]\n        );\n        res.json({ ok: true, id: newId, name: newName, price: item.price, stock: item.stock });\n      } else {\n        // Add new menu item\n        const { name, price, stock, category } = req.body;\n        if (!name || price === undefined || stock === undefined) {\n          return res.status(400).json({ error: 'Name, price, and stock required' });\n        }\n        \n        const id = 'm-' + Date.now() + '-' + Math.floor(Math.random() * 1000);\n        const meta = { category: category || 'General', is_available: true };\n        \n        await queryDBOnce(\n          'INSERT INTO menu (id, name, price, stock, meta) VALUES ($1, $2, $3, $4, $5)', \n          [id, name, parseFloat(price), parseInt(stock), JSON.stringify(meta)]\n        );\n        res.json({ ok: true, id, name, price, stock });\n      }\n    } else if (req.method === 'PUT') {\n      // Update menu item stock - handle both /menu/:id/stock and /menu with id in body\n      const url = req.url || '';\n      const pathParts = url.split('/');\n      \n      let itemId, stock;\n      \n      if (pathParts.length >= 4 && pathParts[2] === 'menu' && pathParts[4] === 'stock') {\n        // Handle /api/menu/:id/stock\n        itemId = pathParts[3];\n        stock = req.body.stock;\n      } else {\n        // Handle /api/menu with id in body\n        itemId = req.body.id;\n        stock = req.body.stock;\n      }\n      \n      if (!itemId) {\n        return res.status(400).json({ error: 'Menu item ID required' });\n      }\n      \n      if (stock === undefined || stock === null) {\n        return res.status(400).json({ error: 'Stock value required' });\n      }\n      \n      await queryDBOnce('UPDATE menu SET stock = $1, updated_at = NOW() WHERE id = $2', [parseInt(stock), itemId]);\n      res.json({ ok: true, id: itemId, stock: parseInt(stock) });\n    } else if (req.method === 'PATCH') {\n      // Update menu item details (name, price, category, availability)\n      const { id, name, price, category, is_available } = req.body;\n      \n      if (!id) {\n        return res.status(400).json({ error: 'Menu item ID required' });\n      }\n      \n      // Get current item to merge metadata\n      const current = await queryDBOnce('SELECT meta FROM menu WHERE id = $1', [id]);\n      if (!current || current.length === 0) {\n        return res.status(404).json({ error: 'Menu item not found' });\n      }\n      \n      const currentMeta = current[0].meta || {};\n      const updatedMeta = {\n        ...currentMeta,\n        ...(category !== undefined && { category }),\n        ...(is_available !== undefined && { is_available })\n      };\n      \n      // Build dynamic update query\n      const updates = [];\n      const values = [];\n      let paramCount = 1;\n      \n      if (name !== undefined) {\n        updates.push(`name = $${paramCount++}`);\n        values.push(name);\n      }\n      if (price !== undefined) {\n        updates.push(`price = $${paramCount++}`);\n        values.push(parseFloat(price));\n      }\n      if (Object.keys(updatedMeta).length > 0) {\n        updates.push(`meta = $${paramCount++}`);\n        values.push(JSON.stringify(updatedMeta));\n      }\n      \n      updates.push(`updated_at = NOW()`);\n      values.push(id);\n      \n      const query = `UPDATE menu SET ${updates.join(', ')} WHERE id = $${paramCount}`;\n      await queryDBOnce(query, values);\n      \n      res.json({ ok: true, id });\n    } else if (req.method === 'DELETE') {\n      // Delete menu item\n      const { id } = req.body;\n      if (!id) {\n        return res.status(400).json({ error: 'Menu item ID required' });\n      }\n      \n      // Check if item exists\n      const item = await queryDBOnce('SELECT id FROM menu WHERE id = $1', [id]);\n      if (!item || item.length === 0) {\n        return res.status(404).json({ error: 'Menu item not found' });\n      }\n      \n      await queryDBOnce('DELETE FROM menu WHERE id = $1', [id]);\n      res.json({ ok: true, id });\n    } else {\n      res.status(405).json({ error: 'Method not allowed' });\n    }\n  } catch (e) {\n    console.error('Menu API error:', e);\n    res.status(500).json({ error: e.message });\n  }\n};\n","size_bytes":5675},"api/orders.js":{"content":"// Orders API endpoints for Vercel serverless with Neon database\nconst { queryDBOnce, setCorsHeaders, handleOptions } = require('./_utils');\n\nmodule.exports = async (req, res) => {\n  // Handle CORS preflight\n  if (req.method === 'OPTIONS') {\n    return handleOptions(res);\n  }\n\n  setCorsHeaders(res);\n\n  try {\n    if (req.method === 'GET') {\n      // Get orders/sales\n      const orders = await queryDBOnce('SELECT id, staff, timestamp, total, payload, server_received_at FROM orders ORDER BY server_received_at DESC LIMIT 500');\n      const mapped = orders.map(o => ({\n        id: o.id,\n        staff: o.staff,\n        timestamp: o.timestamp,\n        total: o.total,\n        payload: o.payload || null,\n        serverReceivedAt: o.server_received_at\n      }));\n      res.json(mapped);\n    } else if (req.method === 'POST') {\n      // Add order\n      const order = req.body;\n      console.log('Orders API: Received order data:', order);\n      \n      if (!order || !order.id) {\n        console.log('Orders API: Missing order or order.id');\n        return res.status(400).json({ error: 'Order with ID required' });\n      }\n      \n      const payload = order;\n      const serverReceivedAt = new Date().toISOString();\n      \n      console.log('Orders API: Inserting order with data:', {\n        id: order.id,\n        staff: order.user || order.staff || '',\n        timestamp: order.timestamp || new Date().toISOString(),\n        total: order.total || 0,\n        payload: JSON.stringify(payload),\n        serverReceivedAt\n      });\n      \n      await queryDBOnce('INSERT INTO orders (id, staff, timestamp, total, payload, server_received_at) VALUES ($1, $2, $3, $4, $5, $6) ON CONFLICT (id) DO NOTHING',\n                       [order.id, order.user || order.staff || '', order.timestamp || new Date().toISOString(), order.total || 0, JSON.stringify(payload), serverReceivedAt]);\n      \n      console.log('Orders API: Order inserted successfully');\n      res.json({ ok: true, id: order.id });\n    } else {\n      res.status(405).json({ error: 'Method not allowed' });\n    }\n  } catch (e) {\n    console.error('Orders API error:', e);\n    \n    // Provide more specific error messages\n    let errorMessage = e.message;\n    if (e.message && e.message.includes('foreign key constraint')) {\n      errorMessage = 'User not found. Please log in again.';\n    } else if (e.message && e.message.includes('relation \"orders\" does not exist')) {\n      errorMessage = 'Database not initialized. Please contact administrator.';\n    } else if (e.message && e.message.includes('connection')) {\n      errorMessage = 'Database connection failed. Please try again.';\n    }\n    \n    res.status(500).json({ error: errorMessage });\n  }\n};\n","size_bytes":2708},"api/staff.js":{"content":"// Staff API endpoints for Vercel serverless with Neon database\nconst bcrypt = require('bcrypt');\nconst { queryDBOnce, setCorsHeaders, handleOptions } = require('./_utils');\n\nmodule.exports = async (req, res) => {\n  // Handle CORS preflight\n  if (req.method === 'OPTIONS') {\n    return handleOptions(res);\n  }\n\n  setCorsHeaders(res);\n\n  try {\n    if (req.method === 'GET') {\n      // Get staff/users\n      const users = await queryDBOnce('SELECT username, role, meta, created_at FROM users ORDER BY created_at');\n      const mapped = users.map(u => ({\n        username: u.username,\n        role: u.role,\n        meta: u.meta || null,\n        created_at: u.created_at,\n        is_active: u.meta?.is_active !== false // Default to active if not specified\n      }));\n      res.json(mapped);\n    } else if (req.method === 'POST') {\n      // Add staff user with password hashing\n      const { username, password, role = 'staff' } = req.body;\n      if (!username || !password) {\n        return res.status(400).json({ error: 'Username and password required' });\n      }\n      \n      const saltRounds = 10;\n      const hashedPassword = await bcrypt.hash(password, saltRounds);\n      \n      await queryDBOnce('INSERT INTO users (username, password, role, meta) VALUES ($1, $2, $3, $4)', \n                       [username, hashedPassword, role, JSON.stringify({ is_active: true })]);\n      res.json({ ok: true, username });\n    } else if (req.method === 'PUT') {\n      // Update staff user\n      const { username, role, is_active } = req.body;\n      if (!username) {\n        return res.status(400).json({ error: 'Username required' });\n      }\n      \n      const meta = { is_active: is_active !== false };\n      await queryDBOnce('UPDATE users SET role = $1, meta = $2 WHERE username = $3', \n                       [role, JSON.stringify(meta), username]);\n      res.json({ ok: true, username });\n    } else if (req.method === 'PATCH') {\n      // Reset password\n      const { username, newPassword } = req.body;\n      if (!username || !newPassword) {\n        return res.status(400).json({ error: 'Username and new password required' });\n      }\n      \n      const saltRounds = 10;\n      const hashedPassword = await bcrypt.hash(newPassword, saltRounds);\n      \n      await queryDBOnce('UPDATE users SET password = $1 WHERE username = $2', \n                       [hashedPassword, username]);\n      res.json({ ok: true, username });\n    } else if (req.method === 'DELETE') {\n      // Delete staff user\n      const { username } = req.body;\n      if (!username) {\n        return res.status(400).json({ error: 'Username required' });\n      }\n      \n      // Check if user exists\n      const user = await queryDBOnce('SELECT username FROM users WHERE username = $1', [username]);\n      if (!user || user.length === 0) {\n        return res.status(404).json({ error: 'User not found' });\n      }\n      \n      await queryDBOnce('DELETE FROM users WHERE username = $1', [username]);\n      res.json({ ok: true, username });\n    } else {\n      res.status(405).json({ error: 'Method not allowed' });\n    }\n  } catch (e) {\n    console.error('Staff API error:', e);\n    res.status(500).json({ error: e.message });\n  }\n};\n","size_bytes":3196},"api/test-db.js":{"content":"// Database test endpoint for Vercel serverless with Neon database\nconst { queryDBOnce, setCorsHeaders, handleOptions } = require('./_utils');\n\nmodule.exports = async (req, res) => {\n  // Handle CORS preflight\n  if (req.method === 'OPTIONS') {\n    return handleOptions(res);\n  }\n\n  setCorsHeaders(res);\n\n  try {\n    // Test database connection\n    const healthCheck = await queryDBOnce('SELECT NOW() as current_time, version() as db_version');\n    \n    // Test if tables exist\n    const tablesCheck = await queryDBOnce(`\n      SELECT table_name \n      FROM information_schema.tables \n      WHERE table_schema = 'public' \n      AND table_name IN ('users', 'menu', 'orders')\n      ORDER BY table_name\n    `);\n    \n    // Test if we have data\n    const usersCount = await queryDBOnce('SELECT COUNT(*) as count FROM users');\n    const menuCount = await queryDBOnce('SELECT COUNT(*) as count FROM menu');\n    const ordersCount = await queryDBOnce('SELECT COUNT(*) as count FROM orders');\n    \n    res.json({\n      ok: true,\n      database: {\n        connection: 'OK',\n        current_time: healthCheck[0].current_time,\n        version: healthCheck[0].db_version\n      },\n      tables: {\n        found: tablesCheck.map(t => t.table_name),\n        users_count: parseInt(usersCount[0].count),\n        menu_count: parseInt(menuCount[0].count),\n        orders_count: parseInt(ordersCount[0].count)\n      },\n      timestamp: new Date().toISOString()\n    });\n  } catch (e) {\n    console.error('Database test error:', e);\n    res.status(500).json({ \n      ok: false, \n      error: e.message,\n      timestamp: new Date().toISOString()\n    });\n  }\n};\n","size_bytes":1636},"scripts/deploy.sh":{"content":"#!/bin/bash\n\n# Shawarma Boss POS - Deployment Script for Vercel\n\necho \"üöÄ Starting deployment process...\"\n\n# Check if Vercel CLI is installed\nif ! command -v vercel &> /dev/null; then\n    echo \"‚ùå Vercel CLI not found. Installing...\"\n    npm install -g vercel\nfi\n\n# Build the project\necho \"üì¶ Building project...\"\nnpm run build\n\n# Check if build was successful\nif [ $? -eq 0 ]; then\n    echo \"‚úÖ Build successful!\"\nelse\n    echo \"‚ùå Build failed!\"\n    exit 1\nfi\n\n# Deploy to Vercel\necho \"üöÄ Deploying to Vercel...\"\nvercel --prod\n\necho \"‚úÖ Deployment complete!\"\necho \"üîó Check your Vercel dashboard for the deployment URL\"\n","size_bytes":634},"src/App.css":{"content":"/* App-specific styles */\n.App {\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n}\n\n.App main {\n  flex: 1;\n}\n\n/* Loading spinner */\n.spinner {\n  border: 4px solid #f3f3f3;\n  border-top: 4px solid #3498db;\n  border-radius: 50%;\n  width: 40px;\n  height: 40px;\n  animation: spin 2s linear infinite;\n  margin: 0 auto;\n}\n\n@keyframes spin {\n  0% { transform: rotate(0deg); }\n  100% { transform: rotate(360deg); }\n}\n\n/* Custom scrollbar */\n::-webkit-scrollbar {\n  width: 8px;\n}\n\n::-webkit-scrollbar-track {\n  background: #f1f1f1;\n}\n\n::-webkit-scrollbar-thumb {\n  background: #888;\n  border-radius: 4px;\n}\n\n::-webkit-scrollbar-thumb:hover {\n  background: #555;\n}\n\n/* Responsive utilities */\n@media (max-width: 768px) {\n  .container {\n    padding: 0 0.5rem;\n  }\n  \n  .grid-cols-3 {\n    grid-template-columns: repeat(2, 1fr);\n  }\n}\n\n@media (max-width: 480px) {\n  .grid-cols-3,\n  .md\\:grid-cols-3 {\n    grid-template-columns: 1fr;\n  }\n}\n\n/* Animation classes */\n.fade-in {\n  animation: fadeIn 0.3s ease-in;\n}\n\n@keyframes fadeIn {\n  from { opacity: 0; }\n  to { opacity: 1; }\n}\n\n.slide-up {\n  animation: slideUp 0.3s ease-out;\n}\n\n@keyframes slideUp {\n  from {\n    opacity: 0;\n    transform: translateY(20px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n/* ===== UNIFIED ADMIN LAYOUT ===== */\n.admin-container {\n  min-height: calc(100vh - 100px);\n  background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);\n}\n\n.admin-content-wrapper {\n  padding: 1.5rem;\n  max-width: 1400px;\n  margin: 0 auto;\n}\n\n/* Admin Navigation Dropdown */\n.nav-tab-dropdown {\n  position: relative;\n}\n\n.nav-tab-dropdown .dropdown-menu {\n  border: none;\n  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.12);\n  border-radius: 16px;\n  padding: 0.5rem 0;\n  margin-top: 0.5rem;\n  min-width: 220px;\n}\n\n.nav-tab-dropdown .dropdown-item {\n  display: flex;\n  align-items: center;\n  padding: 0.75rem 1.25rem;\n  font-weight: 500;\n  color: #64748b;\n  border: none;\n  background: none;\n  width: 100%;\n  text-align: left;\n  transition: all 0.2s ease;\n  text-decoration: none;\n}\n\n.nav-tab-dropdown .dropdown-item:hover {\n  background: rgba(220, 53, 69, 0.08);\n  color: #dc3545;\n}\n\n.nav-tab-dropdown .dropdown-item i {\n  width: 20px;\n  text-align: center;\n  margin-right: 0.75rem;\n}\n\n/* Mobile Navigation Sections */\n.mobile-nav-section {\n  margin: 1rem 0;\n}\n\n.mobile-nav-header {\n  display: flex;\n  align-items: center;\n  gap: 0.75rem;\n  padding: 0.75rem 1.5rem;\n  font-weight: 600;\n  color: #374151;\n  background: rgba(220, 53, 69, 0.05);\n  border-radius: 8px;\n  margin-bottom: 0.5rem;\n}\n\n.mobile-nav-header i {\n  color: #dc3545;\n  font-size: 1.1rem;\n}\n\n.mobile-nav-items {\n  padding-left: 1rem;\n}\n\n.mobile-nav-subitem {\n  display: flex;\n  align-items: center;\n  gap: 1rem;\n  width: 100%;\n  padding: 0.875rem 1.25rem;\n  margin-bottom: 0.25rem;\n  border: none;\n  background: none;\n  border-radius: 8px;\n  transition: all 0.2s ease;\n  cursor: pointer;\n  font-weight: 500;\n  color: #6b7280;\n  text-align: left;\n  text-decoration: none;\n}\n\n.mobile-nav-subitem:hover {\n  background: rgba(220, 53, 69, 0.08);\n  color: #dc3545;\n}\n\n.mobile-nav-subitem.active {\n  background: #dc3545;\n  color: white;\n  box-shadow: 0 2px 8px rgba(220, 53, 69, 0.3);\n}\n\n.mobile-nav-subitem i {\n  width: 20px;\n  text-align: center;\n  font-size: 0.95rem;\n}\n\n.content-header {\n  display: flex;\n  align-items: center;\n  justify-content: between;\n  margin-bottom: 2rem;\n  padding-bottom: 1rem;\n  border-bottom: 1px solid rgba(255, 255, 255, 0.2);\n}\n\n.page-title {\n  font-size: 1.875rem;\n  font-weight: 700;\n  color: #1e293b;\n  margin: 0;\n  display: flex;\n  align-items: center;\n  gap: 0.75rem;\n}\n\n.content-body {\n  flex: 1;\n}\n\n/* ===== MODERN KPI CARDS ===== */\n.kpi-grid {\n  margin-bottom: 2rem;\n}\n\n.kpi-card {\n  background: white;\n  border: 1px solid #f1f5f9;\n  border-radius: 16px;\n  padding: 1.5rem;\n  display: flex;\n  align-items: center;\n  gap: 1rem;\n  transition: all 0.3s ease;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.04);\n  min-width: 200px;\n}\n\n.kpi-card:hover {\n  transform: translateY(-4px);\n  box-shadow: 0 8px 25px rgba(0, 0, 0, 0.12);\n  border-color: #e2e8f0;\n}\n\n.kpi-icon {\n  width: 60px;\n  height: 60px;\n  border-radius: 16px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: white;\n  font-size: 1.5rem;\n  flex-shrink: 0;\n}\n\n.kpi-content {\n  flex: 1;\n}\n\n.kpi-value {\n  font-size: 1.875rem;\n  font-weight: 700;\n  line-height: 1.2;\n  margin-bottom: 0.25rem;\n}\n\n.kpi-label {\n  font-size: 0.875rem;\n  color: #64748b;\n  font-weight: 500;\n  text-transform: uppercase;\n  letter-spacing: 0.5px;\n}\n\n/* ===== ADMIN PANELS ===== */\n.admin-panel {\n  background: white;\n  border: 1px solid #f1f5f9;\n  border-radius: 20px;\n  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);\n  overflow: hidden;\n  transition: all 0.3s ease;\n}\n\n.admin-panel:hover {\n  box-shadow: 0 8px 30px rgba(0, 0, 0, 0.12);\n  transform: translateY(-2px);\n}\n\n.panel-header {\n  background: linear-gradient(135deg, #ffffff 0%, #f8fafc 100%);\n  padding: 1.5rem;\n  border-bottom: 1px solid #f1f5f9;\n}\n\n.panel-title {\n  font-size: 1.25rem;\n  font-weight: 700;\n  color: #1e293b;\n  margin: 0;\n  display: flex;\n  align-items: center;\n  gap: 0.75rem;\n}\n\n.panel-body {\n  padding: 1.5rem;\n}\n\n/* ===== STAFF CARDS ===== */\n.staff-grid {\n  gap: 1rem;\n}\n\n.staff-card {\n  background: #f8fafc;\n  border: 1px solid #e2e8f0;\n  border-radius: 12px;\n  padding: 1rem;\n  display: flex;\n  align-items: center;\n  gap: 0.75rem;\n  transition: all 0.2s ease;\n  min-width: 200px;\n}\n\n.staff-card:hover {\n  background: white;\n  border-color: #3b82f6;\n  transform: translateY(-2px);\n  box-shadow: 0 4px 12px rgba(59, 130, 246, 0.15);\n}\n\n.staff-avatar {\n  width: 40px;\n  height: 40px;\n  background: linear-gradient(135deg, #3b82f6, #1d4ed8);\n  border-radius: 10px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: white;\n  font-size: 1.1rem;\n  flex-shrink: 0;\n}\n\n.staff-avatar.large {\n  width: 48px;\n  height: 48px;\n  font-size: 1.25rem;\n}\n\n.staff-info {\n  flex: 1;\n}\n\n.staff-name {\n  font-size: 0.9375rem;\n  font-weight: 600;\n  color: #1e293b;\n  margin-bottom: 0.125rem;\n}\n\n.staff-role {\n  font-size: 0.75rem;\n  color: #64748b;\n  text-transform: uppercase;\n  letter-spacing: 0.5px;\n}\n\n.staff-stats {\n  text-align: right;\n  font-size: 0.8125rem;\n}\n\n.stat-orders {\n  font-weight: 600;\n  color: #1e293b;\n}\n\n.stat-sales {\n  font-weight: 600;\n}\n\n/* ===== STAFF MANAGEMENT CARDS ===== */\n.staff-management-grid {\n  gap: 1.25rem;\n}\n\n.staff-management-card {\n  background: white;\n  border: 1px solid #f1f5f9;\n  border-radius: 16px;\n  padding: 1.25rem;\n  transition: all 0.3s ease;\n  min-width: 240px;\n  position: relative;\n}\n\n.staff-management-card:hover {\n  transform: translateY(-4px);\n  box-shadow: 0 8px 25px rgba(0, 0, 0, 0.12);\n  border-color: #e2e8f0;\n}\n\n.staff-card-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: flex-start;\n  margin-bottom: 1rem;\n}\n\n.staff-badge {\n  position: absolute;\n  top: 1rem;\n  right: 1rem;\n}\n\n.staff-card-body {\n  margin-bottom: 1rem;\n}\n\n.staff-performance {\n  display: flex;\n  flex-direction: column;\n  gap: 0.5rem;\n  margin-top: 0.75rem;\n}\n\n.performance-item {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  font-size: 0.8125rem;\n}\n\n.performance-label {\n  color: #64748b;\n  font-weight: 500;\n}\n\n.performance-value {\n  font-weight: 600;\n  color: #1e293b;\n}\n\n.staff-card-actions {\n  display: flex;\n  gap: 0.5rem;\n  justify-content: flex-end;\n}\n\n/* ===== STOCK ALERTS ===== */\n.no-alerts {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 0.75rem;\n  padding: 2rem;\n  text-align: center;\n  color: #10b981;\n  font-weight: 600;\n  background: #f0fdf4;\n  border-radius: 12px;\n  border: 2px dashed #bbf7d0;\n}\n\n.no-alerts i {\n  font-size: 1.5rem;\n  color: #10b981;\n}\n\n.stock-alerts {\n  max-height: 300px;\n  overflow-y: auto;\n}\n\n.stock-alert {\n  display: flex;\n  align-items: center;\n  gap: 0.75rem;\n  padding: 0.875rem 1rem;\n  border-radius: 12px;\n  transition: all 0.2s ease;\n}\n\n.stock-alert.warning {\n  background: #fffbeb;\n  border: 1px solid #fde68a;\n}\n\n.stock-alert.critical {\n  background: #fef2f2;\n  border: 1px solid #fecaca;\n}\n\n.stock-alert:hover {\n  transform: translateX(4px);\n}\n\n.alert-icon {\n  width: 32px;\n  height: 32px;\n  border-radius: 8px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 1rem;\n  flex-shrink: 0;\n}\n\n.stock-alert.warning .alert-icon {\n  background: #fbbf24;\n  color: white;\n}\n\n.stock-alert.critical .alert-icon {\n  background: #ef4444;\n  color: white;\n}\n\n.alert-content {\n  flex: 1;\n}\n\n.alert-title {\n  font-weight: 600;\n  color: #1e293b;\n  margin-bottom: 0.125rem;\n}\n\n.alert-message {\n  font-size: 0.8125rem;\n  color: #64748b;\n}\n\n/* ===== FORM STYLING ===== */\n.add-staff-form .form-group {\n  margin-bottom: 1.25rem;\n}\n\n.form-label {\n  display: block;\n  font-size: 0.875rem;\n  font-weight: 600;\n  color: #374151;\n  margin-bottom: 0.5rem;\n}\n\n.form-control {\n  border-radius: 8px;\n  border: 1px solid #d1d5db;\n  transition: all 0.2s ease;\n}\n\n.form-control:focus {\n  border-color: #3b82f6;\n  box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);\n}\n\n/* ===== MOBILE ADMIN LAYOUT ===== */\n.admin-layout.mobile {\n  display: flex;\n  flex-direction: column;\n  min-height: 100vh;\n  background: #f8fafc;\n}\n\n.mobile-hidden {\n  display: none !important;\n}\n\n/* ===== MOBILE HEADER ===== */\n.mobile-header {\n  position: sticky;\n  top: 0;\n  z-index: 200;\n  background: white;\n  border-bottom: 1px solid #e2e8f0;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n}\n\n.mobile-header-content {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 1rem 1.25rem;\n  max-width: 100%;\n}\n\n.mobile-menu-toggle {\n  width: 44px;\n  height: 44px;\n  border: none;\n  background: #f1f5f9;\n  border-radius: 12px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: #475569;\n  font-size: 1.25rem;\n  transition: all 0.2s ease;\n  cursor: pointer;\n  touch-action: manipulation;\n}\n\n.mobile-menu-toggle:hover,\n.mobile-menu-toggle:active {\n  background: #e2e8f0;\n  color: #dc3545;\n  transform: scale(1.05);\n}\n\n.mobile-page-title {\n  font-size: 1.25rem;\n  font-weight: 700;\n  color: #1e293b;\n  margin: 0;\n  text-align: center;\n  flex: 1;\n  padding: 0 1rem;\n}\n\n.mobile-user-info {\n  display: flex;\n  align-items: center;\n}\n\n.mobile-user-avatar {\n  width: 44px;\n  height: 44px;\n  background: linear-gradient(135deg, #dc3545, #b91c1c);\n  border-radius: 12px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: white;\n  font-size: 1.1rem;\n}\n\n/* ===== MOBILE MENU OVERLAY ===== */\n.mobile-menu-overlay {\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background: rgba(0, 0, 0, 0.5);\n  z-index: 300;\n  animation: fadeIn 0.2s ease;\n}\n\n.mobile-menu {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 320px;\n  max-width: 90vw;\n  height: 100vh;\n  background: white;\n  box-shadow: 4px 0 20px rgba(0, 0, 0, 0.15);\n  animation: slideInLeft 0.3s ease;\n  overflow-y: auto;\n}\n\n.mobile-menu-header {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 1.5rem;\n  border-bottom: 1px solid #e2e8f0;\n  background: linear-gradient(135deg, #dc3545, #b91c1c);\n  color: white;\n}\n\n.mobile-brand {\n  display: flex;\n  align-items: center;\n  gap: 0.75rem;\n  font-size: 1.25rem;\n  font-weight: 700;\n}\n\n.mobile-brand i {\n  font-size: 1.5rem;\n}\n\n.mobile-menu-close {\n  width: 40px;\n  height: 40px;\n  border: none;\n  background: rgba(255, 255, 255, 0.1);\n  border-radius: 10px;\n  color: white;\n  font-size: 1.1rem;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n  transition: all 0.2s ease;\n}\n\n.mobile-menu-close:hover {\n  background: rgba(255, 255, 255, 0.2);\n}\n\n.mobile-nav {\n  padding: 1rem 0;\n}\n\n.mobile-nav-item {\n  display: flex;\n  align-items: center;\n  gap: 1rem;\n  width: 100%;\n  padding: 1rem 1.5rem;\n  border: none;\n  background: none;\n  color: #475569;\n  font-size: 1rem;\n  font-weight: 500;\n  text-align: left;\n  transition: all 0.2s ease;\n  cursor: pointer;\n  touch-action: manipulation;\n  min-height: 60px;\n}\n\n.mobile-nav-item:hover {\n  background: #f8fafc;\n  color: #dc3545;\n}\n\n.mobile-nav-item.active {\n  background: rgba(220, 53, 69, 0.1);\n  color: #dc3545;\n  border-right: 4px solid #dc3545;\n}\n\n.mobile-nav-icon {\n  width: 24px;\n  text-align: center;\n  font-size: 1.25rem;\n  flex-shrink: 0;\n}\n\n.mobile-nav-label {\n  flex: 1;\n  font-weight: 600;\n}\n\n.mobile-nav-arrow {\n  font-size: 0.875rem;\n  color: #94a3b8;\n  transition: transform 0.2s ease;\n}\n\n.mobile-nav-item:hover .mobile-nav-arrow {\n  transform: translateX(4px);\n}\n\n/* ===== MOBILE BOTTOM NAVIGATION ===== */\n.mobile-bottom-nav {\n  position: fixed;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  background: white;\n  border-top: 1px solid #e2e8f0;\n  box-shadow: 0 -4px 20px rgba(0, 0, 0, 0.1);\n  display: flex;\n  padding: 0.5rem;\n  z-index: 150;\n  safe-area-inset-bottom: env(safe-area-inset-bottom);\n}\n\n.bottom-nav-item {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  padding: 0.5rem;\n  border: none;\n  background: none;\n  border-radius: 12px;\n  transition: all 0.2s ease;\n  cursor: pointer;\n  touch-action: manipulation;\n  min-height: 60px;\n  color: #64748b;\n}\n\n.bottom-nav-item:hover {\n  background: rgba(59, 130, 246, 0.1);\n  color: #3b82f6;\n}\n\n.bottom-nav-item.active {\n  background: rgba(220, 53, 69, 0.1);\n  color: #dc3545;\n}\n\n.bottom-nav-icon {\n  font-size: 1.25rem;\n  margin-bottom: 0.25rem;\n  transition: transform 0.2s ease;\n}\n\n.bottom-nav-item:active .bottom-nav-icon {\n  transform: scale(0.95);\n}\n\n.bottom-nav-label {\n  font-size: 0.75rem;\n  font-weight: 600;\n  text-transform: uppercase;\n  letter-spacing: 0.5px;\n  line-height: 1;\n}\n\n/* ===== MOBILE CONTENT ADJUSTMENTS ===== */\n.admin-layout.mobile .admin-content {\n  flex: 1;\n  padding: 1rem;\n  margin-bottom: 80px; /* Space for bottom nav */\n  overflow-y: auto;\n}\n\n.admin-layout.mobile .content-body {\n  padding: 0;\n}\n\n/* ===== MOBILE PANEL OPTIMIZATIONS ===== */\n.admin-layout.mobile .admin-panel {\n  margin-bottom: 1rem;\n  border-radius: 16px;\n}\n\n.admin-layout.mobile .panel-header {\n  padding: 1.25rem;\n}\n\n.admin-layout.mobile .panel-body {\n  padding: 1.25rem;\n}\n\n.admin-layout.mobile .panel-title {\n  font-size: 1.125rem;\n}\n\n/* ===== MOBILE KPI CARDS ===== */\n.admin-layout.mobile .kpi-grid {\n  flex-direction: column;\n  gap: 0.75rem;\n  margin-bottom: 1.5rem;\n}\n\n.admin-layout.mobile .kpi-card {\n  min-width: auto;\n  padding: 1.25rem;\n  border-radius: 16px;\n}\n\n.admin-layout.mobile .kpi-icon {\n  width: 48px;\n  height: 48px;\n  font-size: 1.25rem;\n}\n\n.admin-layout.mobile .kpi-value {\n  font-size: 1.5rem;\n}\n\n/* ===== MOBILE STAFF CARDS ===== */\n.admin-layout.mobile .staff-grid,\n.admin-layout.mobile .staff-management-grid {\n  flex-direction: column;\n  gap: 0.75rem;\n}\n\n.admin-layout.mobile .staff-card,\n.admin-layout.mobile .staff-management-card {\n  min-width: auto;\n}\n\n/* ===== MOBILE FORM IMPROVEMENTS ===== */\n.admin-layout.mobile .form-control {\n  font-size: 16px; /* Prevents zoom on iOS */\n  padding: 0.875rem;\n  border-radius: 12px;\n}\n\n.admin-layout.mobile .btn {\n  min-height: 44px;\n  font-size: 1rem;\n  border-radius: 12px;\n  font-weight: 600;\n}\n\n/* ===== MOBILE ANIMATIONS ===== */\n@keyframes fadeIn {\n  from { opacity: 0; }\n  to { opacity: 1; }\n}\n\n@keyframes slideInLeft {\n  from { transform: translateX(-100%); }\n  to { transform: translateX(0); }\n}\n\n/* ===== RESPONSIVE ADMIN LAYOUT (UPDATED) ===== */\n@media (max-width: 1200px) {\n  .admin-grid-layout {\n    flex-direction: column;\n  }\n  \n  .kpi-grid {\n    flex-direction: column;\n    gap: 1rem;\n  }\n  \n  .kpi-card {\n    min-width: auto;\n  }\n}\n\n@media (max-width: 992px) {\n  .admin-sidebar:not(.mobile-hidden) {\n    position: fixed;\n    left: -280px;\n    top: 0;\n    height: 100vh;\n    z-index: 1000;\n    transition: left 0.3s ease;\n  }\n  \n  .admin-sidebar.open {\n    left: 0;\n  }\n  \n  .admin-content {\n    width: 100%;\n    padding: 1rem;\n  }\n  \n  .staff-management-grid {\n    flex-direction: column;\n  }\n  \n  .staff-management-card {\n    min-width: auto;\n  }\n}\n\n@media (max-width: 768px) {\n  .kpi-grid {\n    gap: 0.75rem;\n  }\n  \n  .kpi-card {\n    flex-direction: column;\n    text-align: center;\n    padding: 1.25rem;\n  }\n  \n  .kpi-icon {\n    width: 48px;\n    height: 48px;\n    font-size: 1.25rem;\n  }\n  \n  .staff-grid {\n    flex-direction: column;\n  }\n  \n  .staff-card {\n    min-width: auto;\n  }\n  \n  .page-title {\n    font-size: 1.5rem;\n  }\n  \n  .panel-title {\n    font-size: 1.125rem;\n  }\n}\n\n@media (max-width: 480px) {\n  .admin-content {\n    padding: 0.75rem;\n  }\n  \n  .kpi-value {\n    font-size: 1.5rem;\n  }\n  \n  .kpi-label {\n    font-size: 0.8125rem;\n  }\n  \n  .panel-header,\n  .panel-body {\n    padding: 1rem;\n  }\n  \n  .mobile-page-title {\n    font-size: 1.125rem;\n  }\n  \n  .mobile-menu {\n    width: 100%;\n    max-width: 100vw;\n  }\n  \n  .bottom-nav-label {\n    font-size: 0.6875rem;\n  }\n}\n\n/* ===== PWA STAFF LAYOUT ===== */\n.pwa-staff-layout {\n  min-height: calc(100vh - 80px);\n  background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);\n  display: flex;\n  flex-direction: column;\n}\n\n/* PWA Navigation Tabs */\n.pwa-nav-tabs {\n  background: white;\n  border-bottom: 1px solid #e2e8f0;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);\n  position: sticky;\n  top: 0;\n  z-index: 100;\n}\n\n.pwa-nav-container {\n  display: flex;\n  justify-content: center;\n  padding: 0.5rem 1rem;\n  max-width: 1200px;\n  margin: 0 auto;\n  gap: 0.5rem;\n}\n\n.pwa-nav-tab {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  padding: 0.75rem 1rem;\n  border: none;\n  background: none;\n  border-radius: 12px;\n  transition: all 0.2s ease;\n  cursor: pointer;\n  min-width: 80px;\n  color: #64748b;\n  font-weight: 500;\n}\n\n.pwa-nav-tab:hover {\n  background: rgba(59, 130, 246, 0.1);\n  color: #3b82f6;\n  transform: translateY(-2px);\n}\n\n.pwa-nav-tab.active {\n  background: linear-gradient(135deg, #3b82f6, #1d4ed8);\n  color: white;\n  box-shadow: 0 4px 12px rgba(59, 130, 246, 0.3);\n}\n\n.pwa-tab-icon {\n  font-size: 1.25rem;\n  margin-bottom: 0.25rem;\n}\n\n.pwa-tab-label {\n  font-size: 0.75rem;\n  font-weight: 600;\n  text-transform: uppercase;\n  letter-spacing: 0.5px;\n}\n\n/* PWA Main Content */\n.pwa-main-content {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  max-width: 1400px;\n  margin: 0 auto;\n  width: 100%;\n  padding: 0 1rem;\n}\n\n.pwa-main-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 1.5rem 0;\n  border-bottom: 1px solid rgba(255, 255, 255, 0.2);\n  margin-bottom: 1.5rem;\n}\n\n.pwa-header-info {\n  flex: 1;\n}\n\n.pwa-main-title {\n  font-size: 1.875rem;\n  font-weight: 700;\n  color: #1e293b;\n  margin: 0 0 0.25rem 0;\n  display: flex;\n  align-items: center;\n  gap: 0.75rem;\n}\n\n.pwa-main-title i {\n  color: #3b82f6;\n}\n\n.pwa-main-subtitle {\n  color: #64748b;\n  margin: 0;\n  font-size: 0.875rem;\n}\n\n.pwa-header-user {\n  display: flex;\n  align-items: center;\n  gap: 0.75rem;\n  background: white;\n  padding: 0.75rem 1rem;\n  border-radius: 16px;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n}\n\n.pwa-user-avatar {\n  width: 40px;\n  height: 40px;\n  background: linear-gradient(135deg, #3b82f6, #1d4ed8);\n  border-radius: 50%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: white;\n  font-size: 1.1rem;\n}\n\n.pwa-user-info {\n  display: flex;\n  flex-direction: column;\n}\n\n.pwa-user-name {\n  font-weight: 600;\n  color: #1e293b;\n  font-size: 0.875rem;\n}\n\n.pwa-user-role {\n  color: #64748b;\n  font-size: 0.75rem;\n  text-transform: uppercase;\n  letter-spacing: 0.5px;\n}\n\n.pwa-content-area {\n  flex: 1;\n}\n\n/* ===== PWA POS GRID LAYOUT ===== */\n.pwa-pos-grid {\n  display: grid;\n  grid-template-columns: 1fr 400px;\n  gap: 1.5rem;\n  height: calc(100vh - 280px);\n  min-height: 600px;\n}\n\n.pwa-menu-section,\n.pwa-cart-section {\n  display: flex;\n  flex-direction: column;\n  background: white;\n  border-radius: 20px;\n  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);\n  overflow: hidden;\n}\n\n.pwa-section-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 1.25rem 1.5rem;\n  border-bottom: 1px solid #f1f5f9;\n  background: linear-gradient(135deg, #ffffff 0%, #f8fafc 100%);\n}\n\n.pwa-header-content {\n  display: flex;\n  align-items: center;\n  gap: 1rem;\n}\n\n.pwa-header-icon {\n  width: 48px;\n  height: 48px;\n  background: linear-gradient(135deg, #f59e0b, #d97706);\n  border-radius: 14px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: white;\n  font-size: 1.25rem;\n}\n\n.pwa-cart-icon {\n  background: linear-gradient(135deg, #10b981, #059669);\n}\n\n.pwa-header-text {\n  display: flex;\n  flex-direction: column;\n}\n\n.pwa-section-title {\n  font-size: 1.125rem;\n  font-weight: 700;\n  color: #1e293b;\n  margin: 0;\n}\n\n.pwa-section-subtitle {\n  color: #64748b;\n  font-size: 0.8125rem;\n  margin: 0;\n}\n\n.pwa-header-actions {\n  display: flex;\n  gap: 0.5rem;\n}\n\n.pwa-refresh-btn {\n  width: 40px;\n  height: 40px;\n  background: none;\n  border: 1px solid #e2e8f0;\n  border-radius: 10px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: #64748b;\n  transition: all 0.2s ease;\n  cursor: pointer;\n}\n\n.pwa-refresh-btn:hover {\n  background: #f1f5f9;\n  color: #3b82f6;\n  border-color: #3b82f6;\n}\n\n.pwa-cart-total {\n  display: flex;\n  flex-direction: column;\n  align-items: flex-end;\n  text-align: right;\n}\n\n.pwa-total-label {\n  color: #64748b;\n  font-size: 0.75rem;\n  text-transform: uppercase;\n  letter-spacing: 0.5px;\n  font-weight: 600;\n}\n\n.pwa-total-amount {\n  color: #10b981;\n  font-size: 1.25rem;\n  font-weight: 700;\n  line-height: 1.2;\n}\n\n.pwa-menu-container,\n.pwa-cart-container {\n  flex: 1;\n  overflow-y: auto;\n  padding: 1rem;\n}\n\n/* ===== PWA RESPONSIVE DESIGN ===== */\n@media (max-width: 1200px) {\n  .pwa-pos-grid {\n    grid-template-columns: 1fr 350px;\n  }\n}\n\n@media (max-width: 992px) {\n  .pwa-pos-grid {\n    grid-template-columns: 1fr;\n    grid-template-rows: 1fr auto;\n    height: auto;\n    min-height: auto;\n  }\n  \n  .pwa-cart-section {\n    order: -1;\n    max-height: 400px;\n  }\n  \n  .pwa-main-header {\n    flex-direction: column;\n    gap: 1rem;\n    align-items: flex-start;\n  }\n  \n  .pwa-header-user {\n    align-self: stretch;\n    justify-content: center;\n  }\n}\n\n@media (max-width: 768px) {\n  .pwa-nav-container {\n    justify-content: flex-start;\n    overflow-x: auto;\n    padding-bottom: 0.5rem;\n  }\n  \n  .pwa-nav-tab {\n    min-width: 70px;\n    padding: 0.5rem 0.75rem;\n  }\n  \n  .pwa-tab-label {\n    font-size: 0.65rem;\n  }\n  \n  .pwa-main-content {\n    padding: 0 0.75rem;\n  }\n  \n  .pwa-main-title {\n    font-size: 1.5rem;\n  }\n  \n  .pwa-pos-grid {\n    gap: 1rem;\n  }\n  \n  .pwa-section-header {\n    padding: 1rem 1.25rem;\n  }\n  \n  .pwa-header-icon {\n    width: 40px;\n    height: 40px;\n    font-size: 1.1rem;\n  }\n}\n\n@media (max-width: 480px) {\n  .pwa-nav-tab {\n    min-width: 60px;\n    padding: 0.5rem;\n  }\n  \n  .pwa-tab-icon {\n    font-size: 1.1rem;\n    margin-bottom: 0.125rem;\n  }\n  \n  .pwa-tab-label {\n    font-size: 0.625rem;\n  }\n  \n  .pwa-main-content {\n    padding: 0 0.5rem;\n  }\n  \n  .pwa-main-header {\n    padding: 1rem 0;\n  }\n  \n  .pwa-header-content {\n    gap: 0.75rem;\n  }\n}\n\n/* ===== PWA MENU GRID STYLES ===== */\n.pos-menu-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\n  gap: 1.25rem;\n  padding: 0.5rem 0;\n  width: 100%;\n}\n\n.menu-item-card {\n  background: white;\n  border: 1px solid #f1f5f9;\n  border-radius: 16px;\n  padding: 1.25rem;\n  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n  cursor: pointer;\n  position: relative;\n  overflow: hidden;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.04);\n}\n\n.menu-item-card::before {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  height: 4px;\n  background: linear-gradient(90deg, #f59e0b, #d97706);\n  transform: scaleX(0);\n  transition: transform 0.3s ease;\n}\n\n.menu-item-card:hover {\n  transform: translateY(-6px);\n  box-shadow: 0 12px 32px rgba(0, 0, 0, 0.12);\n  border-color: #f59e0b;\n}\n\n.menu-item-card:hover::before {\n  transform: scaleX(1);\n}\n\n.menu-item-card:active {\n  transform: translateY(-2px) scale(0.98);\n}\n\n.menu-item-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: flex-start;\n  margin-bottom: 1rem;\n  gap: 1rem;\n}\n\n.menu-item-name {\n  font-size: 1.125rem;\n  font-weight: 700;\n  color: #1e293b;\n  margin: 0;\n  line-height: 1.3;\n  flex: 1;\n}\n\n.menu-item-price {\n  background: linear-gradient(135deg, #10b981, #059669);\n  color: white;\n  font-size: 1.125rem;\n  font-weight: 700;\n  padding: 0.375rem 0.75rem;\n  border-radius: 12px;\n  text-align: center;\n  box-shadow: 0 2px 8px rgba(16, 185, 129, 0.25);\n  white-space: nowrap;\n}\n\n.menu-item-stock {\n  font-size: 0.8125rem;\n  font-weight: 600;\n  margin-bottom: 1.25rem;\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n  padding: 0.5rem 0.75rem;\n  border-radius: 10px;\n  background: #f8fafc;\n}\n\n.stock-out {\n  color: #ef4444 !important;\n  background: #fef2f2 !important;\n}\n\n.stock-low {\n  color: #f59e0b !important;\n  background: #fffbeb !important;\n}\n\n.stock-good {\n  color: #10b981 !important;\n  background: #f0fdfa !important;\n}\n\n.menu-item-actions {\n  display: flex;\n  flex-direction: column;\n  gap: 1rem;\n}\n\n.quantity-selector {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 0.75rem;\n  background: #f8fafc;\n  border-radius: 12px;\n  padding: 0.5rem;\n}\n\n.qty-btn {\n  width: 40px;\n  height: 40px;\n  padding: 0;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border-radius: 10px;\n  border: 1px solid #e2e8f0;\n  background: white;\n  color: #64748b;\n  font-weight: 600;\n  transition: all 0.2s ease;\n  touch-action: manipulation;\n}\n\n.qty-btn:hover:not(:disabled) {\n  background: #3b82f6;\n  color: white;\n  border-color: #3b82f6;\n  transform: scale(1.05);\n}\n\n.qty-btn:disabled {\n  opacity: 0.5;\n  cursor: not-allowed;\n}\n\n.qty-input {\n  width: 60px;\n  height: 40px;\n  text-align: center;\n  font-weight: 700;\n  font-size: 1rem;\n  border: 1px solid #e2e8f0;\n  border-radius: 10px;\n  background: white;\n  color: #1e293b;\n}\n\n.qty-input:focus {\n  border-color: #3b82f6;\n  box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);\n  outline: none;\n}\n\n.add-to-cart-btn {\n  font-weight: 700;\n  padding: 0.875rem 1.25rem;\n  border-radius: 12px;\n  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n  border: none;\n  font-size: 0.9375rem;\n  position: relative;\n  overflow: hidden;\n  touch-action: manipulation;\n}\n\n.add-to-cart-btn:not(:disabled) {\n  background: linear-gradient(135deg, #dc2626, #b91c1c);\n  color: white;\n  box-shadow: 0 4px 12px rgba(220, 38, 38, 0.3);\n}\n\n.add-to-cart-btn:hover:not(:disabled) {\n  transform: translateY(-2px);\n  box-shadow: 0 8px 20px rgba(220, 38, 38, 0.4);\n}\n\n.add-to-cart-btn:active:not(:disabled) {\n  transform: translateY(0) scale(0.98);\n}\n\n.add-to-cart-btn:disabled {\n  background: #e2e8f0;\n  color: #94a3b8;\n  box-shadow: none;\n  cursor: not-allowed;\n}\n\n.no-menu-items {\n  grid-column: 1 / -1;\n  text-align: center;\n  padding: 4rem 2rem;\n  color: #64748b;\n  background: white;\n  border-radius: 16px;\n  border: 2px dashed #e2e8f0;\n}\n\n.no-menu-items i {\n  margin-bottom: 1rem;\n  color: #cbd5e1;\n}\n\n/* ===== PWA CART STYLES ===== */\n.pwa-cart-wrapper {\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n}\n\n.pwa-cart-container .card {\n  background: none;\n  border: none;\n  box-shadow: none;\n}\n\n.pwa-cart-container .card-body {\n  padding: 0;\n}\n\n.pwa-cart-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 1.25rem;\n  padding: 1rem;\n  background: #f8fafc;\n  border-radius: 12px;\n}\n\n.pwa-cart-title {\n  font-size: 1.125rem;\n  font-weight: 700;\n  color: #1e293b;\n  margin: 0;\n}\n\n.pwa-cart-actions {\n  display: flex;\n  gap: 0.5rem;\n}\n\n.pwa-cart-btn {\n  padding: 0.5rem 0.75rem;\n  border-radius: 8px;\n  font-weight: 600;\n  font-size: 0.875rem;\n  border: none;\n  transition: all 0.2s ease;\n  touch-action: manipulation;\n  display: flex;\n  align-items: center;\n  gap: 0.25rem;\n}\n\n.pwa-cart-btn.clear {\n  background: #fef2f2;\n  color: #dc2626;\n}\n\n.pwa-cart-btn.clear:hover:not(:disabled) {\n  background: #fee2e2;\n  transform: translateY(-1px);\n}\n\n.pwa-cart-btn.confirm {\n  background: linear-gradient(135deg, #10b981, #059669);\n  color: white;\n}\n\n.pwa-cart-btn.confirm:hover:not(:disabled) {\n  transform: translateY(-1px);\n  box-shadow: 0 4px 12px rgba(16, 185, 129, 0.3);\n}\n\n.pwa-cart-btn:disabled {\n  opacity: 0.5;\n  cursor: not-allowed;\n}\n\n.pwa-cart-items {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  gap: 0.75rem;\n  margin-bottom: 1.25rem;\n  min-height: 200px;\n  overflow-y: auto;\n}\n\n.pwa-cart-empty {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  text-align: center;\n  padding: 2rem 1rem;\n  color: #64748b;\n}\n\n.pwa-cart-empty i {\n  color: #cbd5e1;\n  margin-bottom: 0.5rem;\n}\n\n.pwa-cart-empty p {\n  font-weight: 600;\n  margin: 0 0 0.25rem 0;\n  color: #475569;\n}\n\n.pwa-cart-empty span {\n  font-size: 0.875rem;\n}\n\n.pwa-cart-item {\n  background: white;\n  border: 1px solid #f1f5f9;\n  border-radius: 12px;\n  padding: 1rem;\n  transition: all 0.2s ease;\n}\n\n.pwa-cart-item:hover {\n  border-color: #e2e8f0;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.04);\n}\n\n.pwa-item-info {\n  margin-bottom: 0.75rem;\n}\n\n.pwa-item-name {\n  font-size: 0.9375rem;\n  font-weight: 600;\n  color: #1e293b;\n  margin: 0 0 0.25rem 0;\n}\n\n.pwa-item-price {\n  font-size: 0.8125rem;\n  color: #64748b;\n}\n\n.pwa-item-controls {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  gap: 0.75rem;\n}\n\n.pwa-quantity-controls {\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n  background: #f8fafc;\n  border-radius: 8px;\n  padding: 0.25rem;\n}\n\n.pwa-qty-btn {\n  width: 32px;\n  height: 32px;\n  border-radius: 6px;\n  border: 1px solid #e2e8f0;\n  background: white;\n  color: #64748b;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 0.75rem;\n  font-weight: 600;\n  transition: all 0.2s ease;\n  touch-action: manipulation;\n}\n\n.pwa-qty-btn:hover {\n  background: #3b82f6;\n  color: white;\n  border-color: #3b82f6;\n}\n\n.pwa-qty-input {\n  width: 45px;\n  height: 32px;\n  text-align: center;\n  font-weight: 600;\n  font-size: 0.875rem;\n  border: 1px solid #e2e8f0;\n  border-radius: 6px;\n  background: white;\n  color: #1e293b;\n}\n\n.pwa-qty-input:focus {\n  border-color: #3b82f6;\n  box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.1);\n  outline: none;\n}\n\n.pwa-item-total {\n  font-size: 0.9375rem;\n  font-weight: 700;\n  color: #10b981;\n  min-width: 80px;\n  text-align: center;\n}\n\n.pwa-remove-btn {\n  width: 32px;\n  height: 32px;\n  border-radius: 6px;\n  border: 1px solid #fecaca;\n  background: #fef2f2;\n  color: #dc2626;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 0.75rem;\n  transition: all 0.2s ease;\n  touch-action: manipulation;\n}\n\n.pwa-remove-btn:hover {\n  background: #fee2e2;\n  transform: scale(1.05);\n}\n\n.pwa-cart-summary {\n  border-top: 2px solid #f1f5f9;\n  padding-top: 1rem;\n  margin-top: auto;\n}\n\n.pwa-cart-total {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 1rem;\n  background: linear-gradient(135deg, #f0fdf4, #dcfce7);\n  border-radius: 12px;\n  border: 1px solid #bbf7d0;\n}\n\n.pwa-total-label {\n  font-size: 1rem;\n  font-weight: 600;\n  color: #166534;\n}\n\n.pwa-total-value {\n  font-size: 1.25rem;\n  font-weight: 700;\n  color: #15803d;\n}\n\n/* ===== RESPONSIVE MENU GRID ===== */\n@media (max-width: 1400px) {\n  .pos-menu-grid {\n    grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));\n  }\n}\n\n@media (max-width: 1200px) {\n  .pos-menu-grid {\n    grid-template-columns: repeat(auto-fill, minmax(260px, 1fr));\n  }\n}\n\n@media (max-width: 992px) {\n  .pos-menu-grid {\n    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\n    gap: 1rem;\n  }\n  \n  .menu-item-card {\n    padding: 1rem;\n  }\n}\n\n@media (max-width: 768px) {\n  .pos-menu-grid {\n    grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));\n    gap: 0.75rem;\n  }\n  \n  .menu-item-name {\n    font-size: 1rem;\n  }\n  \n  .menu-item-price {\n    font-size: 1rem;\n    padding: 0.25rem 0.5rem;\n  }\n  \n  .qty-btn,\n  .qty-input {\n    height: 36px;\n  }\n  \n  .qty-btn {\n    width: 36px;\n  }\n  \n  .qty-input {\n    width: 50px;\n    font-size: 0.875rem;\n  }\n}\n\n@media (max-width: 600px) {\n  .pos-menu-grid {\n    grid-template-columns: 1fr;\n    gap: 1rem;\n  }\n  \n  .menu-item-header {\n    margin-bottom: 0.75rem;\n  }\n  \n  .quantity-selector {\n    gap: 0.5rem;\n    padding: 0.375rem;\n  }\n  \n  .add-to-cart-btn {\n    padding: 0.75rem 1rem;\n    font-size: 0.875rem;\n  }\n}\n\n/* ===== RESPONSIVE DESIGN ===== */\n\n@media (max-width: 992px) {\n  .admin-sidebar {\n    width: 100%;\n    min-width: unset;\n    position: fixed;\n    top: 0;\n    left: 0;\n    z-index: 1000;\n    height: 100vh;\n    transform: translateX(-100%);\n    transition: transform 0.3s ease;\n  }\n  \n  .admin-sidebar.show {\n    transform: translateX(0);\n  }\n  \n  .pos-menu-grid {\n    grid-template-columns: repeat(auto-fill, minmax(220px, 1fr));\n  }\n  \n  .pos-header {\n    padding: 1rem;\n  }\n}\n\n@media (max-width: 768px) {\n  .menu-item-card {\n    padding: 0.75rem;\n  }\n  \n  .menu-item-name {\n    font-size: 1rem;\n  }\n  \n  .menu-item-price {\n    font-size: 1.1rem;\n  }\n  \n  .pos-menu-grid {\n    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\n    gap: 0.75rem;\n  }\n}\n\n@media (max-width: 576px) {\n  .pos-menu-grid {\n    grid-template-columns: 1fr;\n  }\n  \n  .quantity-selector {\n    justify-content: space-between;\n  }\n  \n  .admin-layout {\n    flex-direction: column;\n  }\n}\n\n/* ===== MODERN PWA NAVBAR ===== */\n.modern-navbar {\n  background: #ffffff;\n  border-bottom: 1px solid #e2e8f0;\n  box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06);\n  position: sticky;\n  top: 0;\n  z-index: 1030;\n  backdrop-filter: blur(10px);\n  -webkit-backdrop-filter: blur(10px);\n}\n\n.navbar-container {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 0.75rem 1.5rem;\n  max-width: 1400px;\n  margin: 0 auto;\n  gap: 2rem;\n}\n\n/* Brand Section */\n.navbar-brand {\n  display: flex;\n  align-items: center;\n  gap: 0.75rem;\n  background: none;\n  border: none;\n  padding: 0.5rem;\n  border-radius: 12px;\n  transition: all 0.2s ease;\n  cursor: pointer;\n}\n\n.navbar-brand:hover {\n  background: rgba(220, 53, 69, 0.05);\n  transform: translateY(-1px);\n}\n\n.brand-icon {\n  position: relative;\n}\n\n.brand-logo {\n  width: 40px;\n  height: 40px;\n  border-radius: 10px;\n  object-fit: cover;\n  box-shadow: 0 4px 12px rgba(220, 53, 69, 0.2);\n  transition: all 0.3s ease;\n}\n\n.navbar-brand:hover .brand-logo {\n  transform: scale(1.05);\n  box-shadow: 0 6px 20px rgba(220, 53, 69, 0.3);\n}\n\n.brand-content {\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n}\n\n.brand-title {\n  font-size: 1.25rem;\n  font-weight: 700;\n  color: #000000;\n  margin: 0;\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n}\n\n.brand-badge {\n  background: #f3f4f6;\n  color: #000000;\n  font-size: 0.65rem;\n  font-weight: 600;\n  padding: 0.15rem 0.4rem;\n  border-radius: 8px;\n  text-transform: uppercase;\n  letter-spacing: 0.5px;\n}\n\n.brand-subtitle {\n  font-size: 0.75rem;\n  color: #000000;\n  margin: 0;\n  font-weight: 500;\n}\n\n/* Navigation Tabs */\n.nav-tabs {\n  flex: 1;\n  display: flex;\n  justify-content: center;\n}\n\n.nav-tab-list {\n  display: flex;\n  align-items: center;\n  background: #f1f5f9;\n  border-radius: 12px;\n  padding: 0.25rem;\n  gap: 0.25rem;\n}\n\n.nav-tab {\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n  background: transparent;\n  border: none;\n  padding: 0.75rem 1.25rem;\n  border-radius: 10px;\n  font-weight: 500;\n  font-size: 0.875rem;\n  color: #000000;\n  transition: all 0.2s ease;\n  cursor: pointer;\n  position: relative;\n}\n\n.nav-tab:hover {\n  color: #000000;\n  background: rgba(220, 53, 69, 0.08);\n}\n\n.nav-tab.active {\n  background: #ffffff;\n  color: #000000;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n  font-weight: 600;\n}\n\n.nav-tab.active::after {\n  content: '';\n  position: absolute;\n  bottom: -0.25rem;\n  left: 50%;\n  transform: translateX(-50%);\n  width: 20px;\n  height: 3px;\n  background: linear-gradient(135deg, #dc3545, #c82333);\n  border-radius: 2px;\n}\n\n.tab-icon {\n  font-size: 1rem;\n}\n\n.tab-label {\n  font-weight: inherit;\n}\n\n/* User Profile */\n.user-profile {\n  display: flex;\n  align-items: center;\n}\n\n.user-info {\n  display: flex;\n  align-items: center;\n  gap: 0.75rem;\n  position: relative;\n}\n\n.user-avatar {\n  width: 36px;\n  height: 36px;\n  background: linear-gradient(135deg, #dc3545, #c82333);\n  border-radius: 50%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: white;\n  font-size: 1.1rem;\n  box-shadow: 0 2px 8px rgba(220, 53, 69, 0.2);\n}\n\n.user-details {\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n}\n\n.user-name {\n  font-weight: 600;\n  color: #000000;\n  font-size: 0.875rem;\n  line-height: 1.2;\n}\n\n.user-role {\n  font-size: 0.75rem;\n  font-weight: 500;\n  display: flex;\n  align-items: center;\n  padding: 0.125rem 0.375rem;\n  border-radius: 6px;\n  margin-top: 0.125rem;\n  color: #000000;\n}\n\n.role-admin {\n  background: #f3f4f6;\n  color: #000000;\n}\n\n.role-staff {\n  background: #f3f4f6;\n  color: #000000;\n}\n\n.user-menu-btn {\n  background: none;\n  border: none;\n  color: #000000;\n  padding: 0.5rem;\n  border-radius: 8px;\n  transition: all 0.2s ease;\n  cursor: pointer;\n}\n\n.user-menu-btn:hover {\n  background: #f3f4f6;\n  color: #dc3545;\n}\n\n/* Modern Dropdown */\n.modern-dropdown {\n  background: white;\n  border: 1px solid #e5e7eb;\n  border-radius: 12px;\n  box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);\n  padding: 0.5rem;\n  min-width: 220px;\n  margin-top: 0.5rem;\n}\n\n.modern-dropdown .dropdown-header {\n  padding: 0.75rem;\n  border: none;\n  background: none;\n}\n\n.dropdown-user-info {\n  display: flex;\n  align-items: center;\n  gap: 0.75rem;\n}\n\n.dropdown-avatar {\n  width: 32px;\n  height: 32px;\n  background: linear-gradient(135deg, #dc3545, #c82333);\n  border-radius: 50%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: white;\n  font-size: 1rem;\n}\n\n.dropdown-name {\n  font-weight: 600;\n  color: #000000;\n  font-size: 0.875rem;\n}\n\n.dropdown-role {\n  font-size: 0.75rem;\n  font-weight: 500;\n  display: flex;\n  align-items: center;\n  padding: 0.125rem 0.375rem;\n  border-radius: 6px;\n  margin-top: 0.125rem;\n  color: #000000;\n  background: #f3f4f6;\n}\n\n.logout-item {\n  border: none;\n  background: none;\n  width: 100%;\n  padding: 0.75rem;\n  border-radius: 8px;\n  transition: all 0.2s ease;\n  cursor: pointer;\n}\n\n.logout-item:hover {\n  background: #fee2e2;\n  color: #dc2626;\n}\n\n.dropdown-item-content {\n  display: flex;\n  align-items: center;\n  gap: 0.75rem;\n  font-weight: 500;\n}\n\n/* PWA Indicator */\n.pwa-indicator {\n  position: absolute;\n  top: 0.5rem;\n  right: 0.5rem;\n  width: 8px;\n  height: 8px;\n  background: #10b981;\n  border-radius: 50%;\n  animation: pulse 2s infinite;\n}\n\n/* Mobile Responsive Styles */\n@media (max-width: 768px) {\n  .navbar-container {\n    padding: 0.5rem 1rem;\n    gap: 1rem;\n  }\n  \n  .brand-logo {\n    width: 32px;\n    height: 32px;\n  }\n  \n  .brand-title {\n    font-size: 1.1rem;\n  }\n  \n  .brand-badge {\n    font-size: 0.6rem;\n    padding: 0.1rem 0.3rem;\n  }\n  \n  .brand-subtitle {\n    display: none;\n  }\n  \n  .nav-tab {\n    padding: 0.6rem 1rem;\n    font-size: 0.8rem;\n  }\n  \n  .tab-label {\n    display: none;\n  }\n  \n  .user-details {\n    display: none !important;\n  }\n  \n  .user-avatar {\n    width: 32px;\n    height: 32px;\n    font-size: 1rem;\n  }\n}\n\n@media (max-width: 480px) {\n  .navbar-container {\n    padding: 0.5rem 0.75rem;\n  }\n  \n  .brand-title {\n    font-size: 1rem;\n  }\n  \n  .nav-tab-list {\n    padding: 0.2rem;\n    gap: 0.2rem;\n  }\n  \n  .nav-tab {\n    padding: 0.5rem 0.8rem;\n  }\n  \n  .tab-icon {\n    font-size: 0.9rem;\n  }\n  \n  .modern-dropdown {\n    min-width: 180px;\n  }\n}\n\n/* Dark mode support - Override to maintain white background and black text */\n@media (prefers-color-scheme: dark) {\n  .modern-navbar {\n    background: #ffffff !important;\n    border-bottom: 1px solid #e2e8f0 !important;\n  }\n  \n  .brand-title {\n    color: #000000 !important;\n  }\n  \n  .brand-subtitle {\n    color: #000000 !important;\n  }\n  \n  .nav-tab-list {\n    background: #f1f5f9 !important;\n  }\n  \n  .nav-tab {\n    color: #000000 !important;\n  }\n  \n  .nav-tab:hover {\n    background: rgba(220, 53, 69, 0.08) !important;\n    color: #000000 !important;\n  }\n  \n  .nav-tab.active {\n    background: #ffffff !important;\n    color: #000000 !important;\n  }\n  \n  .user-name {\n    color: #000000 !important;\n  }\n  \n  .modern-dropdown {\n    background: white !important;\n    border: 1px solid #e5e7eb !important;\n  }\n  \n  .dropdown-name {\n    color: #000000 !important;\n  }\n  \n  .mobile-menu-toggle {\n    color: #000000 !important;\n  }\n  \n  .notification-btn {\n    color: #000000 !important;\n  }\n  \n  .user-menu-btn {\n    color: #000000 !important;\n  }\n  \n  .logout-item:hover {\n    background: #fee2e2 !important;\n    color: #dc2626 !important;\n  }\n}\n\n/* PWA-specific enhancements */\n@supports (display: standalone) {\n  .modern-navbar {\n    padding-top: env(safe-area-inset-top);\n  }\n}\n\n/* High contrast mode support */\n@media (prefers-contrast: high) {\n  .modern-navbar {\n    border-bottom: 2px solid #000;\n  }\n  \n  .nav-tab.active {\n    outline: 2px solid currentColor;\n  }\n}\n\n/* ===== MOBILE HAMBURGER MENU ===== */\n.mobile-menu-toggle {\n  background: none;\n  border: none;\n  color: #000000;\n  font-size: 1.25rem;\n  padding: 0.5rem;\n  border-radius: 8px;\n  transition: all 0.2s ease;\n  cursor: pointer;\n  margin-right: 0.5rem;\n}\n\n.mobile-menu-toggle:hover {\n  background: #f3f4f6;\n  color: #dc3545;\n}\n\n/* Mobile Navigation Menu */\n.mobile-nav-menu {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 280px;\n  height: 100vh;\n  background: #ffffff;\n  border-right: 1px solid #e5e7eb;\n  box-shadow: 2px 0 10px rgba(0, 0, 0, 0.1);\n  transform: translateX(-100%);\n  transition: transform 0.3s ease;\n  z-index: 1040;\n  overflow-y: auto;\n}\n\n.mobile-nav-menu.open {\n  transform: translateX(0);\n}\n\n.mobile-nav-header {\n  padding: 2rem 1.5rem 1.5rem;\n  background: linear-gradient(135deg, #dc3545, #c82333);\n  color: white;\n}\n\n.mobile-user-info {\n  display: flex;\n  align-items: center;\n  gap: 0.75rem;\n}\n\n.mobile-avatar {\n  width: 48px;\n  height: 48px;\n  background: rgba(255, 255, 255, 0.2);\n  border-radius: 50%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 1.5rem;\n  color: white;\n}\n\n.mobile-user-details {\n  flex: 1;\n}\n\n.mobile-user-name {\n  font-weight: 700;\n  font-size: 1.1rem;\n  margin-bottom: 0.25rem;\n}\n\n.mobile-user-role {\n  font-size: 0.8rem;\n  display: flex;\n  align-items: center;\n  opacity: 0.9;\n}\n\n/* Mobile Navigation List */\n.mobile-nav-list {\n  padding: 1rem 0;\n}\n\n.mobile-nav-item {\n  display: flex;\n  align-items: center;\n  gap: 0.75rem;\n  width: 100%;\n  padding: 1rem 1.5rem;\n  background: none;\n  border: none;\n  color: #000000;\n  font-size: 1rem;\n  font-weight: 500;\n  text-align: left;\n  transition: all 0.2s ease;\n  cursor: pointer;\n}\n\n.mobile-nav-item:hover {\n  background: #f9fafb;\n  color: #dc3545;\n}\n\n.mobile-nav-item.active {\n  background: #fef2f2;\n  color: #dc3545;\n  font-weight: 600;\n  border-right: 3px solid #dc3545;\n}\n\n.mobile-nav-item.logout {\n  color: #ef4444;\n  margin-top: 0.5rem;\n}\n\n.mobile-nav-item.logout:hover {\n  background: #fef2f2;\n  color: #dc2626;\n}\n\n.mobile-nav-divider {\n  height: 1px;\n  background: #e5e7eb;\n  margin: 0.5rem 1.5rem;\n}\n\n/* Mobile Menu Overlay */\n.mobile-menu-overlay {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  background: rgba(0, 0, 0, 0.5);\n  z-index: 1039;\n  backdrop-filter: blur(2px);\n}\n\n/* ===== NOTIFICATION SYSTEM ===== */\n.navbar-actions {\n  display: flex;\n  align-items: center;\n  gap: 0.75rem;\n}\n\n.notification-wrapper {\n  position: relative;\n}\n\n.notification-btn {\n  background: none;\n  border: none;\n  color: #000000;\n  padding: 0.5rem;\n  border-radius: 8px;\n  transition: all 0.2s ease;\n  cursor: pointer;\n  position: relative;\n  font-size: 1.1rem;\n}\n\n.notification-btn:hover {\n  background: #f3f4f6;\n  color: #dc3545;\n}\n\n.notification-badge {\n  position: absolute;\n  top: 0.2rem;\n  right: 0.2rem;\n  background: #ef4444;\n  color: white;\n  border-radius: 50%;\n  width: 18px;\n  height: 18px;\n  font-size: 0.7rem;\n  font-weight: 600;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  animation: notification-pulse 2s infinite;\n}\n\n@keyframes notification-pulse {\n  0%, 100% { transform: scale(1); }\n  50% { transform: scale(1.1); }\n}\n\n/* Notification Dropdown */\n.notification-dropdown {\n  position: absolute;\n  top: calc(100% + 0.5rem);\n  right: 0;\n  width: 320px;\n  max-width: 90vw;\n  background: white;\n  border: 1px solid #e5e7eb;\n  border-radius: 12px;\n  box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);\n  z-index: 1050;\n  overflow: hidden;\n}\n\n.notification-header {\n  padding: 1rem 1.25rem;\n  border-bottom: 1px solid #e5e7eb;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  background: #f9fafb;\n}\n\n.notification-header h6 {\n  margin: 0;\n  font-size: 1rem;\n  font-weight: 600;\n  color: #1f2937;\n}\n\n.mark-read-btn {\n  background: none;\n  border: none;\n  color: #6b7280;\n  font-size: 0.8rem;\n  font-weight: 500;\n  cursor: pointer;\n  transition: color 0.2s ease;\n}\n\n.mark-read-btn:hover {\n  color: #dc3545;\n}\n\n/* Notification List */\n.notification-list {\n  max-height: 300px;\n  overflow-y: auto;\n}\n\n.notification-item {\n  display: flex;\n  align-items: flex-start;\n  gap: 0.75rem;\n  padding: 1rem 1.25rem;\n  border-bottom: 1px solid #f3f4f6;\n  transition: background 0.2s ease;\n  position: relative;\n}\n\n.notification-item:hover {\n  background: #f9fafb;\n}\n\n.notification-item.unread {\n  background: #fef7f7;\n  border-left: 3px solid #dc3545;\n}\n\n.notification-icon {\n  width: 36px;\n  height: 36px;\n  border-radius: 50%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 0.9rem;\n  flex-shrink: 0;\n}\n\n.notification-item[class*=\"order\"] .notification-icon {\n  background: #dcfce7;\n  color: #16a34a;\n}\n\n.notification-item[class*=\"system\"] .notification-icon {\n  background: #dbeafe;\n  color: #2563eb;\n}\n\n.notification-item[class*=\"inventory\"] .notification-icon {\n  background: #fef3c7;\n  color: #d97706;\n}\n\n.notification-content {\n  flex: 1;\n  min-width: 0;\n}\n\n.notification-message {\n  font-size: 0.875rem;\n  color: #374151;\n  margin: 0 0 0.25rem 0;\n  line-height: 1.4;\n}\n\n.notification-time {\n  font-size: 0.75rem;\n  color: #6b7280;\n}\n\n.unread-dot {\n  position: absolute;\n  top: 1.25rem;\n  right: 1.25rem;\n  width: 8px;\n  height: 8px;\n  background: #dc3545;\n  border-radius: 50%;\n}\n\n.notification-empty {\n  text-align: center;\n  padding: 2rem 1.25rem;\n  color: #6b7280;\n}\n\n.notification-empty i {\n  font-size: 2rem;\n  margin-bottom: 0.5rem;\n  display: block;\n  opacity: 0.5;\n}\n\n.notification-empty p {\n  margin: 0;\n  font-size: 0.875rem;\n}\n\n/* Enhanced Mobile Responsiveness */\n@media (max-width: 768px) {\n  .navbar-container {\n    padding: 0.5rem 1rem;\n  }\n  \n  .brand-title {\n    font-size: 1rem;\n  }\n  \n  .brand-badge {\n    font-size: 0.55rem;\n    padding: 0.1rem 0.25rem;\n  }\n  \n  .notification-dropdown {\n    width: 280px;\n    right: -1rem;\n  }\n  \n  .user-details {\n    display: none !important;\n  }\n}\n\n@media (max-width: 480px) {\n  .navbar-container {\n    padding: 0.5rem 0.75rem;\n    gap: 0.5rem;\n  }\n  \n  .brand-content {\n    display: flex;\n    flex-direction: column;\n    align-items: flex-start;\n  }\n  \n  .brand-title {\n    font-size: 0.9rem;\n    line-height: 1.2;\n  }\n  \n  .notification-dropdown {\n    width: calc(100vw - 2rem);\n    right: -0.75rem;\n  }\n  \n  .mobile-nav-menu {\n    width: 100%;\n  }\n  \n  .notification-btn,\n  .user-menu-btn {\n    padding: 0.4rem;\n  }\n}\n\n/* Touch-friendly enhancements */\n@media (hover: none) and (pointer: coarse) {\n  .mobile-nav-item,\n  .notification-btn,\n  .user-menu-btn,\n  .mobile-menu-toggle {\n    min-height: 44px;\n    min-width: 44px;\n  }\n  \n  .notification-item {\n    min-height: 60px;\n  }\n}\n\n/* User Section */\n.user-section {\n  position: relative;\n}\n\n.user-info {\n  background: rgba(255, 255, 255, 0.1);\n  padding: 8px 15px;\n  border-radius: 15px;\n  backdrop-filter: blur(10px);\n  border: 1px solid rgba(255, 255, 255, 0.1);\n}\n\n.user-name {\n  font-size: 0.95rem;\n  line-height: 1.2;\n}\n\n.role-badge {\n  font-size: 0.75rem;\n  font-weight: 600;\n  padding: 2px 8px;\n  border-radius: 12px;\n  text-transform: uppercase;\n  letter-spacing: 0.5px;\n  display: inline-flex;\n  align-items: center;\n  margin-top: 2px;\n}\n\n.role-badge.admin {\n  background: #f3f4f6;\n  color: #000000;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n}\n\n.role-badge.staff {\n  background: #f3f4f6;\n  color: #000000;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n}\n\n/* Action Buttons - removed conflicting styles to maintain navbar black text */\n\n.logout-btn {\n  background: linear-gradient(135deg, #e53e3e, #c53030);\n  border: none;\n  color: #ffffff;\n  padding: 10px 16px;\n  border-radius: 20px;\n  font-weight: 500;\n  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n  position: relative;\n  overflow: hidden;\n}\n\n.logout-btn::before {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: -100%;\n  width: 100%;\n  height: 100%;\n  background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);\n  transition: left 0.6s ease;\n}\n\n.logout-btn:hover::before {\n  left: 100%;\n}\n\n.logout-btn:hover {\n  background: linear-gradient(135deg, #c53030, #9c2626);\n  transform: translateY(-2px);\n  box-shadow: 0 6px 20px rgba(197, 48, 48, 0.4);\n  color: #ffffff;\n}\n\n.logout-btn:focus-visible {\n  outline: 2px solid #ffffff;\n  outline-offset: 2px;\n}\n\n/* Dropdown Styling */\n.user-dropdown {\n  background: rgba(255, 255, 255, 0.95);\n  backdrop-filter: blur(15px);\n  border: 1px solid rgba(255, 255, 255, 0.2);\n  border-radius: 15px;\n  box-shadow: 0 10px 40px rgba(0,0,0,0.3);\n  padding: 8px 0;\n  margin-top: 8px;\n}\n\n.user-dropdown .dropdown-header {\n  color: #2d3748;\n  font-weight: 600;\n  font-size: 0.9rem;\n  padding: 8px 16px;\n}\n\n.user-dropdown .dropdown-item {\n  padding: 8px 16px;\n  border-radius: 8px;\n  margin: 2px 8px;\n  transition: all 0.2s ease;\n}\n\n.user-dropdown .dropdown-item:hover {\n  background: rgba(220, 53, 69, 0.1);\n  transform: translateX(4px);\n}\n\n/* Animations */\n@keyframes pulse {\n  0%, 100% { transform: scale(1); }\n  50% { transform: scale(1.1); }\n}\n\n@keyframes fadeInDown {\n  from {\n    opacity: 0;\n    transform: translateY(-20px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n.beautiful-navbar {\n  animation: fadeInDown 0.6s ease-out;\n}\n\n/* Responsive Design */\n@media (max-width: 991.98px) {\n  .brand-name {\n    font-size: 1.5rem !important;\n  }\n  \n  .nav-pills-container {\n    position: fixed;\n    bottom: 20px;\n    left: 50%;\n    transform: translateX(-50%);\n    z-index: 1030;\n    background: rgba(26, 26, 26, 0.95);\n    backdrop-filter: blur(20px);\n    box-shadow: 0 8px 32px rgba(0,0,0,0.3);\n  }\n  \n  /* Add safe spacing for mobile bottom navigation */\n  .pos-layout,\n  .admin-layout {\n    padding-bottom: 80px;\n    padding-bottom: calc(80px + env(safe-area-inset-bottom));\n  }\n  \n  /* Ensure dropdowns appear above mobile nav */\n  .user-dropdown {\n    z-index: 1040;\n  }\n}\n\n@media (max-width: 767.98px) {\n  .beautiful-navbar {\n    min-height: 60px;\n  }\n  \n  .brand-logo {\n    width: 35px;\n    height: 35px;\n  }\n  \n  .brand-name {\n    font-size: 1.3rem !important;\n  }\n  \n  .nav-pill {\n    padding: 8px 16px;\n    font-size: 0.85rem;\n  }\n}\n\n/* ===== UTILITY CLASSES ===== */\n.card-hover {\n  transition: all 0.3s ease;\n}\n\n.card-hover:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 6px 20px rgba(0,0,0,0.1);\n}\n\n.text-truncate-2 {\n  display: -webkit-box;\n  -webkit-line-clamp: 2;\n  -webkit-box-orient: vertical;\n  overflow: hidden;\n}\n\n.border-dashed {\n  border-style: dashed !important;\n}\n\n.shadow-custom {\n  box-shadow: 0 4px 12px rgba(0,0,0,0.1) !important;\n}","size_bytes":51883},"src/App.js":{"content":"import React, { useState, useEffect } from 'react';\nimport { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';\nimport Header from './components/Header';\nimport Login from './components/Login';\nimport POS from './components/POS';\nimport Admin from './components/Admin';\nimport { AuthProvider, useAuth } from './services/AuthContext';\nimport { CartProvider } from './services/CartContext';\nimport './App.css';\n\nfunction AppContent() {\n  const { user, isLoading } = useAuth();\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"text-lg\">Loading...</div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"App\">\n      <Header />\n      <main className=\"container py-4\">\n        {!user ? (\n          <Login />\n        ) : (\n          <Routes>\n            <Route path=\"/\" element={<POS />} />\n            <Route path=\"/admin\" element={\n              user.role === 'admin' ? <Admin /> : <Navigate to=\"/\" replace />\n            } />\n            <Route path=\"*\" element={<Navigate to=\"/\" replace />} />\n          </Routes>\n        )}\n      </main>\n      <footer className=\"text-center text-muted py-3 text-sm\">\n        Shawarma Boss ‚Ä¢ Developed by FulPlan\n      </footer>\n    </div>\n  );\n}\n\nfunction App() {\n  return (\n    <Router>\n      <AuthProvider>\n        <CartProvider>\n          <AppContent />\n        </CartProvider>\n      </AuthProvider>\n    </Router>\n  );\n}\n\nexport default App;","size_bytes":1487},"src/index.css":{"content":"/* Import Bootstrap CSS */\n@import '~bootstrap/dist/css/bootstrap.min.css';\n\n/* Import Font Awesome CSS */\n@import '~@fortawesome/fontawesome-free/css/all.min.css';\n\n/* Modern CSS Reset and Base Styles */\n* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  background-color: #f8f9fa;\n}\n\n.App {\n  min-height: 100vh;\n}\n\n/* Utility Classes */\n.text-danger {\n  color: #dc3545;\n}\n\n.text-success {\n  color: #28a745;\n}\n\n.text-muted {\n  color: #6c757d;\n}\n\n.btn {\n  display: inline-block;\n  padding: 0.375rem 0.75rem;\n  margin-bottom: 0;\n  font-size: 1rem;\n  font-weight: 400;\n  line-height: 1.5;\n  text-align: center;\n  white-space: nowrap;\n  vertical-align: middle;\n  cursor: pointer;\n  border: 1px solid transparent;\n  border-radius: 0.25rem;\n  text-decoration: none;\n  transition: all 0.15s ease-in-out;\n}\n\n.btn-primary {\n  color: #fff;\n  background-color: #007bff;\n  border-color: #007bff;\n}\n\n.btn-danger {\n  color: #fff;\n  background-color: #dc3545;\n  border-color: #dc3545;\n}\n\n.btn-success {\n  color: #fff;\n  background-color: #28a745;\n  border-color: #28a745;\n}\n\n.btn-outline-danger {\n  color: #dc3545;\n  background-color: transparent;\n  border-color: #dc3545;\n}\n\n.btn:hover {\n  opacity: 0.85;\n}\n\n.form-control {\n  display: block;\n  width: 100%;\n  padding: 0.375rem 0.75rem;\n  font-size: 1rem;\n  line-height: 1.5;\n  color: #495057;\n  background-color: #fff;\n  border: 1px solid #ced4da;\n  border-radius: 0.25rem;\n  transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;\n}\n\n.form-control:focus {\n  border-color: #80bdff;\n  outline: 0;\n  box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);\n}\n\n.card {\n  background-color: #fff;\n  border: 1px solid rgba(0, 0, 0, 0.125);\n  border-radius: 0.25rem;\n  box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);\n}\n\n.card-header {\n  padding: 0.75rem 1.25rem;\n  background-color: rgba(0, 0, 0, 0.03);\n  border-bottom: 1px solid rgba(0, 0, 0, 0.125);\n}\n\n.card-body {\n  padding: 1.25rem;\n}\n\n.grid {\n  display: grid;\n  gap: 1rem;\n}\n\n.grid-cols-1 { grid-template-columns: repeat(1, 1fr); }\n.grid-cols-2 { grid-template-columns: repeat(2, 1fr); }\n.grid-cols-3 { grid-template-columns: repeat(3, 1fr); }\n\n@media (min-width: 768px) {\n  .md\\:grid-cols-2 { grid-template-columns: repeat(2, 1fr); }\n  .md\\:grid-cols-3 { grid-template-columns: repeat(3, 1fr); }\n}\n\n.flex {\n  display: flex;\n}\n\n.flex-col {\n  flex-direction: column;\n}\n\n.items-center {\n  align-items: center;\n}\n\n.justify-between {\n  justify-content: space-between;\n}\n\n.gap-2 {\n  gap: 0.5rem;\n}\n\n.gap-4 {\n  gap: 1rem;\n}\n\n.p-2 { padding: 0.5rem; }\n.p-4 { padding: 1rem; }\n.p-6 { padding: 1.5rem; }\n\n.m-2 { margin: 0.5rem; }\n.m-4 { margin: 1rem; }\n\n.mt-2 { margin-top: 0.5rem; }\n.mt-4 { margin-top: 1rem; }\n.mb-2 { margin-bottom: 0.5rem; }\n.mb-4 { margin-bottom: 1rem; }\n\n.text-center {\n  text-align: center;\n}\n\n.font-bold {\n  font-weight: 700;\n}\n\n.text-sm {\n  font-size: 0.875rem;\n}\n\n.text-lg {\n  font-size: 1.125rem;\n}\n\n.text-xl {\n  font-size: 1.25rem;\n}\n\n.hidden {\n  display: none;\n}\n\n.container {\n  max-width: 1200px;\n  margin: 0 auto;\n  padding: 0 1rem;\n}\n\n.menu-card {\n  cursor: pointer;\n  transition: transform 0.2s ease-in-out;\n}\n\n.menu-card:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n}\n\n.cart-item {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 0.5rem;\n  border-bottom: 1px solid #eee;\n}\n\n.stock-low {\n  color: #ffc107;\n}\n\n.stock-out {\n  color: #dc3545;\n}\n\n/* Width/Height utility classes */\n.w-12 { width: 3rem; }\n.w-16 { width: 4rem; }\n.w-20 { width: 5rem; }\n.h-12 { height: 3rem; }\n.h-16 { height: 4rem; }\n.h-20 { height: 5rem; }\n\n.w-4 { width: 1rem; }\n.h-4 { height: 1rem; }\n\n.mx-auto {\n  margin-left: auto;\n  margin-right: auto;\n}\n\n.mb-1 { margin-bottom: 0.25rem; }\n.mb-2 { margin-bottom: 0.5rem; }\n.mb-4 { margin-bottom: 1rem; }\n.mb-6 { margin-bottom: 1.5rem; }\n\n.mt-1 { margin-top: 0.25rem; }\n.mt-6 { margin-top: 1.5rem; }\n\n.min-h-96 { min-height: 24rem; }\n\n.max-w-md { max-width: 28rem; }\n\n.w-full { width: 100%; }\n\n.space-y-1 > * + * { margin-top: 0.25rem; }\n\n.justify-center { justify-content: center; }\n\n.bg-red-50 { background-color: #fef2f2; }\n.border-red-200 { border-color: #fecaca; }\n.rounded { border-radius: 0.25rem; }\n\n/* Legacy navbar compact styling - only for non-beautiful navbars */\n.navbar:not(.beautiful-navbar) {\n  --bs-navbar-padding-y: .25rem;\n}\n\n.navbar:not(.beautiful-navbar) .navbar-brand img {\n  width: 32px !important;\n  height: 32px !important;\n  max-width: 32px !important;\n  max-height: 32px !important;\n  object-fit: contain;\n}\n\n.navbar:not(.beautiful-navbar) .navbar-nav .nav-link {\n  padding: .25rem .5rem;\n}\n\n@media (max-width: 576px) {\n  .navbar:not(.beautiful-navbar) .navbar-brand small {\n    display: none;\n  }\n}","size_bytes":4924},"src/index.js":{"content":"import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './App';\nimport './index.css';\n\n// Import Bootstrap JavaScript for dropdown functionality\nimport 'bootstrap/dist/js/bootstrap.bundle.min.js';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);","size_bytes":364},"src/components/Admin.js":{"content":"import React, { useState, useEffect } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport { getStaff, addStaff, updateStaff, deleteStaff, resetStaffPassword, getMenu, addMenuItem, updateMenuStock, updateMenuItem, deleteMenuItem, duplicateMenuItem, toggleMenuItemAvailability, getOrders } from '../services/api';\nimport { useAuth } from '../services/AuthContext';\nimport StaffDetailsModal from './StaffDetailsModal';\nimport MenuDetailsModal from './MenuDetailsModal';\n\nconst Admin = () => {\n  const { user } = useAuth();\n  const location = useLocation();\n  const navigate = useNavigate();\n  const [staff, setStaff] = useState([]);\n  const [menu, setMenu] = useState([]);\n  const [orders, setOrders] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState('');\n  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);\n  const [isMobile, setIsMobile] = useState(false);\n  const [showStaffDetailsModal, setShowStaffDetailsModal] = useState(false);\n  const [selectedStaff, setSelectedStaff] = useState(null);\n  const [showMenuDetailsModal, setShowMenuDetailsModal] = useState(false);\n  const [selectedMenuItem, setSelectedMenuItem] = useState(null);\n\n  // Get active section from URL query parameters\n  const getActiveSection = () => {\n    const urlParams = new URLSearchParams(location.search);\n    const section = urlParams.get('section');\n    return section && ['dashboard', 'staff', 'menu', 'orders', 'reports'].includes(section) \n      ? section \n      : 'dashboard';\n  };\n\n  const activeSection = getActiveSection();\n\n  // Function to navigate to different admin sections\n  const navigateToSection = (section) => {\n    navigate(`/admin?section=${section}`);\n  };\n\n  // Form states\n  const [newStaff, setNewStaff] = useState({ username: '', password: '', role: 'staff' });\n  const [newMenuItem, setNewMenuItem] = useState({ name: '', price: '', stock: '' });\n  const [stockUpdates, setStockUpdates] = useState({});\n  const [successMessage, setSuccessMessage] = useState('');\n\n  useEffect(() => {\n    loadAllData();\n  }, []);\n\n  // Mobile detection and responsive handling\n  useEffect(() => {\n    const checkMobile = () => {\n      setIsMobile(window.innerWidth <= 768);\n    };\n    \n    checkMobile();\n    window.addEventListener('resize', checkMobile);\n    \n    return () => window.removeEventListener('resize', checkMobile);\n  }, []);\n\n  // Close mobile menu when section changes\n  useEffect(() => {\n    setIsMobileMenuOpen(false);\n  }, [activeSection]);\n\n  const loadAllData = async () => {\n    try {\n      setIsLoading(true);\n      const [staffData, menuData, ordersData] = await Promise.all([\n        getStaff(),\n        getMenu(),\n        getOrders()\n      ]);\n      setStaff(staffData);\n      setMenu(menuData);\n      setOrders(ordersData);\n      setError('');\n    } catch (error) {\n      console.error('Error loading admin data:', error);\n      setError('Failed to load admin data. Please refresh.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleAddStaff = async (e) => {\n    e.preventDefault();\n    if (!newStaff.username || !newStaff.password) {\n      alert('Please fill in all fields');\n      return;\n    }\n\n    try {\n      await addStaff(newStaff);\n      await loadAllData();\n      setNewStaff({ username: '', password: '', role: 'staff' });\n      setSuccessMessage('Staff member added successfully!');\n      setTimeout(() => setSuccessMessage(''), 3000);\n    } catch (error) {\n      console.error('Error adding staff:', error);\n      setError('Failed to add staff member');\n    }\n  };\n\n  const handleAddMenuItem = async (e) => {\n    e.preventDefault();\n    if (!newMenuItem.name || !newMenuItem.price || !newMenuItem.stock) {\n      setError('Please fill in all fields');\n      return;\n    }\n\n    try {\n      await addMenuItem({\n        name: newMenuItem.name,\n        price: parseFloat(newMenuItem.price),\n        stock: parseInt(newMenuItem.stock)\n      });\n      await loadAllData();\n      setNewMenuItem({ name: '', price: '', stock: '' });\n      setSuccessMessage('Menu item added successfully!');\n      setTimeout(() => setSuccessMessage(''), 3000);\n    } catch (error) {\n      console.error('Error adding menu item:', error);\n      setError('Failed to add menu item');\n    }\n  };\n\n  const handleUpdateStock = async (itemId, newStock) => {\n    try {\n      await updateMenuStock(itemId, parseInt(newStock));\n      await loadAllData();\n      setStockUpdates({});\n      setSuccessMessage('Stock updated successfully!');\n      setTimeout(() => setSuccessMessage(''), 3000);\n    } catch (error) {\n      console.error('Error updating stock:', error);\n      setError('Failed to update stock');\n    }\n  };\n\n  const handleStockChange = (itemId, value) => {\n    setStockUpdates(prev => ({\n      ...prev,\n      [itemId]: value\n    }));\n  };\n\n  const handleViewStaffDetails = (staffMember) => {\n    setSelectedStaff(staffMember);\n    setShowStaffDetailsModal(true);\n  };\n\n  const handleStaffUpdate = async () => {\n    await loadAllData();\n  };\n\n  const handleStaffDelete = async () => {\n    await loadAllData();\n  };\n\n  const handleDeleteStaff = async (username) => {\n    if (window.confirm(`Are you sure you want to delete staff member \"${username}\"?`)) {\n      try {\n        await deleteStaff(username);\n        await loadAllData();\n        setSuccessMessage('Staff member deleted successfully!');\n        setTimeout(() => setSuccessMessage(''), 3000);\n      } catch (error) {\n        console.error('Error deleting staff:', error);\n        setError('Failed to delete staff member');\n      }\n    }\n  };\n\n  const handleResetStaffPassword = async (username) => {\n    const newPassword = prompt(`Enter new password for ${username}:`);\n    if (newPassword) {\n      try {\n        await resetStaffPassword(username, newPassword);\n        setSuccessMessage(`Password reset successfully for ${username}!`);\n        setTimeout(() => setSuccessMessage(''), 3000);\n      } catch (error) {\n        console.error('Error resetting password:', error);\n        setError('Failed to reset password');\n      }\n    }\n  };\n\n  const handleViewMenuDetails = (menuItem) => {\n    setSelectedMenuItem(menuItem);\n    setShowMenuDetailsModal(true);\n  };\n\n  const handleUpdateMenuItem = async (itemId, itemData) => {\n    try {\n      await updateMenuItem(itemId, itemData);\n      await loadAllData();\n      setSuccessMessage('Menu item updated successfully!');\n      setTimeout(() => setSuccessMessage(''), 3000);\n    } catch (error) {\n      console.error('Error updating menu item:', error);\n      setError('Failed to update menu item');\n      throw error;\n    }\n  };\n\n  const handleDeleteMenuItem = async (itemId) => {\n    try {\n      await deleteMenuItem(itemId);\n      await loadAllData();\n      setSuccessMessage('Menu item deleted successfully!');\n      setTimeout(() => setSuccessMessage(''), 3000);\n    } catch (error) {\n      console.error('Error deleting menu item:', error);\n      setError('Failed to delete menu item');\n      throw error;\n    }\n  };\n\n  const handleDuplicateMenuItem = async (itemId) => {\n    try {\n      await duplicateMenuItem(itemId);\n      await loadAllData();\n      setSuccessMessage('Menu item duplicated successfully!');\n      setTimeout(() => setSuccessMessage(''), 3000);\n    } catch (error) {\n      console.error('Error duplicating menu item:', error);\n      setError('Failed to duplicate menu item');\n    }\n  };\n\n  const handleToggleAvailability = async (itemId, isAvailable) => {\n    try {\n      await toggleMenuItemAvailability(itemId, !isAvailable);\n      await loadAllData();\n      setSuccessMessage(`Item marked as ${!isAvailable ? 'available' : 'unavailable'}!`);\n      setTimeout(() => setSuccessMessage(''), 3000);\n    } catch (error) {\n      console.error('Error toggling availability:', error);\n      setError('Failed to toggle availability');\n    }\n  };\n\n  const exportData = () => {\n    const data = {\n      staff,\n      menu,\n      orders,\n      exportDate: new Date().toISOString()\n    };\n    \n    const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `shawarma-boss-export-${new Date().toISOString().split('T')[0]}.json`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n  };\n\n  const exportCSV = () => {\n    const csvContent = [\n      ['Order ID', 'Staff', 'Date', 'Total', 'Items'].join(','),\n      ...orders.map(order => [\n        order.id,\n        order.staff,\n        order.timestamp,\n        order.total,\n        order.payload ? order.payload.items?.map(item => `${item.name} x${item.quantity}`).join(';') : ''\n      ].join(','))\n    ].join('\\n');\n\n    const blob = new Blob([csvContent], { type: 'text/csv' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `orders-export-${new Date().toISOString().split('T')[0]}.csv`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n  };\n\n  // Calculate sales stats\n  const salesStats = React.useMemo(() => {\n    const today = new Date().toDateString();\n    const todayOrders = orders.filter(order => \n      new Date(order.timestamp).toDateString() === today\n    );\n    const totalSales = orders.reduce((sum, order) => sum + Number(order.total || 0), 0);\n    const todaySales = todayOrders.reduce((sum, order) => sum + Number(order.total || 0), 0);\n\n    const staffSales = {};\n    orders.forEach(order => {\n      if (!staffSales[order.staff]) {\n        staffSales[order.staff] = { orders: 0, total: 0 };\n      }\n      staffSales[order.staff].orders++;\n      staffSales[order.staff].total += Number(order.total || 0);\n    });\n\n    return {\n      totalOrders: orders.length,\n      totalSales,\n      todayOrders: todayOrders.length,\n      todaySales,\n      staffSales\n    };\n  }, [orders]);\n\n  const renderDashboard = () => (\n    <div className=\"dashboard-container\">\n      {/* KPI Grid Cards */}\n      <div className=\"kpi-grid d-flex flex-wrap gap-3 mb-4\">\n        <div className=\"kpi-card flex-fill\">\n          <div className=\"kpi-icon bg-primary\">\n            <i className=\"fas fa-shopping-cart\"></i>\n          </div>\n          <div className=\"kpi-content\">\n            <div className=\"kpi-value text-primary\">{salesStats.totalOrders}</div>\n            <div className=\"kpi-label\">Total Orders</div>\n          </div>\n        </div>\n        <div className=\"kpi-card flex-fill\">\n          <div className=\"kpi-icon bg-success\">\n            <i className=\"fas fa-dollar-sign\"></i>\n          </div>\n          <div className=\"kpi-content\">\n            <div className=\"kpi-value text-success\">GHS {salesStats.totalSales.toFixed(2)}</div>\n            <div className=\"kpi-label\">Total Sales</div>\n          </div>\n        </div>\n        <div className=\"kpi-card flex-fill\">\n          <div className=\"kpi-icon bg-warning\">\n            <i className=\"fas fa-clock\"></i>\n          </div>\n          <div className=\"kpi-content\">\n            <div className=\"kpi-value text-warning\">{salesStats.todayOrders}</div>\n            <div className=\"kpi-label\">Today's Orders</div>\n          </div>\n        </div>\n        <div className=\"kpi-card flex-fill\">\n          <div className=\"kpi-icon bg-info\">\n            <i className=\"fas fa-chart-line\"></i>\n          </div>\n          <div className=\"kpi-content\">\n            <div className=\"kpi-value text-info\">GHS {salesStats.todaySales.toFixed(2)}</div>\n            <div className=\"kpi-label\">Today's Sales</div>\n          </div>\n        </div>\n      </div>\n      \n      {/* Responsive Grid Layout for Staff and Stock */}\n      <div className=\"admin-grid-layout d-flex flex-column flex-lg-row gap-4\">\n        {/* Staff Performance Panel */}\n        <div className=\"admin-panel flex-fill\">\n          <div className=\"panel-header\">\n            <h4 className=\"panel-title\">\n              <i className=\"fas fa-users me-2\"></i>\n              Staff Performance\n            </h4>\n          </div>\n          <div className=\"panel-body\">\n            <div className=\"staff-grid d-flex flex-wrap gap-3\">\n              {staff.map((member) => (\n                <div key={member.username} className=\"staff-card flex-fill\">\n                  <div className=\"staff-avatar\">\n                    <i className=\"fas fa-user\"></i>\n                  </div>\n                  <div className=\"staff-info\">\n                    <div className=\"staff-name\">{member.username}</div>\n                    <div className=\"staff-role\">{member.role}</div>\n                  </div>\n                  {salesStats.staffSales[member.username] && (\n                    <div className=\"staff-stats\">\n                      <div className=\"stat-orders\">{salesStats.staffSales[member.username].orders}</div>\n                      <div className=\"stat-sales\">GHS {salesStats.staffSales[member.username].total.toFixed(2)}</div>\n                    </div>\n                  )}\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n\n        {/* Stock Alerts Panel */}\n        <div className=\"admin-panel flex-fill\">\n          <div className=\"panel-header\">\n            <h4 className=\"panel-title\">\n              <i className=\"fas fa-exclamation-triangle me-2\"></i>\n              Stock Alerts\n            </h4>\n          </div>\n          <div className=\"panel-body\">\n            {menu.filter(item => item.stock <= 5).length === 0 ? (\n              <div className=\"no-alerts\">\n                <i className=\"fas fa-check-circle\"></i>\n                <span>All items are well stocked</span>\n              </div>\n            ) : (\n              <div className=\"stock-alerts d-flex flex-column gap-2\">\n                {menu.filter(item => item.stock <= 5).map(item => (\n                  <div key={item.id} className={`stock-alert ${item.stock === 0 ? 'critical' : 'warning'}`}>\n                    <div className=\"alert-icon\">\n                      <i className={`fas ${item.stock === 0 ? 'fa-times-circle' : 'fa-exclamation-triangle'}`}></i>\n                    </div>\n                    <div className=\"alert-content\">\n                      <div className=\"alert-title\">{item.name}</div>\n                      <div className=\"alert-message\">{item.stock === 0 ? 'Out of stock' : `${item.stock} left`}</div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n\n  const renderStaffManagement = () => (\n    <div className=\"staff-management-container\">\n      <div className=\"admin-grid-layout d-flex flex-column flex-xl-row gap-4\">\n        {/* Staff List Panel */}\n        <div className=\"admin-panel flex-fill\">\n          <div className=\"panel-header\">\n            <h4 className=\"panel-title\">\n              <i className=\"fas fa-users me-2\"></i>\n              Staff Members\n            </h4>\n          </div>\n          <div className=\"panel-body\">\n            <div className=\"staff-management-grid d-flex flex-wrap gap-3\">\n              {staff.map((member) => (\n                <div key={member.username} className=\"staff-management-card flex-fill\">\n                  <div className=\"staff-card-header\">\n                    <div className=\"staff-avatar large\">\n                      <i className=\"fas fa-user\"></i>\n                    </div>\n                    <div className=\"staff-badge\">\n                      <span className={`badge ${member.role === 'admin' ? 'bg-danger' : 'bg-primary'}`}>\n                        {member.role}\n                      </span>\n                      {!member.is_active && (\n                        <span className=\"badge bg-secondary ms-1\">Inactive</span>\n                      )}\n                    </div>\n                  </div>\n                  <div className=\"staff-card-body\">\n                    <div className=\"staff-name\">{member.username}</div>\n                    {salesStats.staffSales[member.username] && (\n                      <div className=\"staff-performance\">\n                        <div className=\"performance-item\">\n                          <span className=\"performance-label\">Orders:</span>\n                          <span className=\"performance-value\">{salesStats.staffSales[member.username].orders}</span>\n                        </div>\n                        <div className=\"performance-item\">\n                          <span className=\"performance-label\">Sales:</span>\n                          <span className=\"performance-value text-success\">GHS {salesStats.staffSales[member.username].total.toFixed(2)}</span>\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                  <div className=\"staff-card-actions\">\n                    <button \n                      className=\"btn btn-sm btn-outline-info me-1\"\n                      onClick={() => handleViewStaffDetails(member)}\n                      title=\"View Details\"\n                    >\n                      <i className=\"fas fa-eye\"></i>\n                    </button>\n                    <button \n                      className=\"btn btn-sm btn-outline-primary me-1\"\n                      onClick={() => handleViewStaffDetails(member)}\n                      title=\"Edit Staff\"\n                    >\n                      <i className=\"fas fa-edit\"></i>\n                    </button>\n                    <button \n                      className=\"btn btn-sm btn-outline-warning me-1\"\n                      onClick={() => handleResetStaffPassword(member.username)}\n                      title=\"Reset Password\"\n                    >\n                      <i className=\"fas fa-key\"></i>\n                    </button>\n                    <button \n                      className=\"btn btn-sm btn-outline-danger\"\n                      onClick={() => handleDeleteStaff(member.username)}\n                      title=\"Delete Staff\"\n                    >\n                      <i className=\"fas fa-trash\"></i>\n                    </button>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n        \n        {/* Add Staff Form Panel */}\n        <div className=\"admin-panel\" style={{minWidth: '320px'}}>\n          <div className=\"panel-header\">\n            <h4 className=\"panel-title\">\n              <i className=\"fas fa-user-plus me-2\"></i>\n              Add New Staff\n            </h4>\n          </div>\n          <div className=\"panel-body\">\n            <form onSubmit={handleAddStaff} className=\"add-staff-form\">\n              <div className=\"form-group\">\n                <label className=\"form-label\">Username</label>\n                <input\n                  type=\"text\"\n                  placeholder=\"Enter username\"\n                  value={newStaff.username}\n                  onChange={(e) => setNewStaff({...newStaff, username: e.target.value})}\n                  className=\"form-control\"\n                />\n              </div>\n              <div className=\"form-group\">\n                <label className=\"form-label\">Password</label>\n                <input\n                  type=\"password\"\n                  placeholder=\"Enter password\"\n                  value={newStaff.password}\n                  onChange={(e) => setNewStaff({...newStaff, password: e.target.value})}\n                  className=\"form-control\"\n                />\n              </div>\n              <div className=\"form-group\">\n                <label className=\"form-label\">Role</label>\n                <select\n                  value={newStaff.role}\n                  onChange={(e) => setNewStaff({...newStaff, role: e.target.value})}\n                  className=\"form-control\"\n                >\n                  <option value=\"staff\">Staff</option>\n                  <option value=\"admin\">Admin</option>\n                </select>\n              </div>\n              <button type=\"submit\" className=\"btn btn-danger w-100\">\n                <i className=\"fas fa-user-plus me-2\"></i>\n                Add Staff Member\n              </button>\n            </form>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n\n  const renderMenuManagement = () => (\n    <div className=\"row\">\n      <div className=\"col-lg-8\">\n        <div className=\"card\">\n          <div className=\"card-header\">\n            <h4 className=\"font-bold text-danger mb-0\">Menu Items</h4>\n          </div>\n          <div className=\"card-body\">\n            <div className=\"table-responsive\">\n              <table className=\"table table-hover\">\n                <thead className=\"table-light\">\n                  <tr>\n                    <th>Item Name</th>\n                    <th>Category</th>\n                    <th>Price</th>\n                    <th>Stock</th>\n                    <th>Status</th>\n                    <th>Actions</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {menu.map((item) => (\n                    <tr key={item.id} className={!item.is_available ? 'table-secondary' : ''}>\n                      <td className=\"fw-medium\">\n                        {item.name}\n                        {!item.is_available && <span className=\"ms-2 badge bg-secondary\">Unavailable</span>}\n                      </td>\n                      <td>\n                        <span className=\"badge bg-info\">{item.category || 'General'}</span>\n                      </td>\n                      <td>GHS {parseFloat(item.price || 0).toFixed(2)}</td>\n                      <td>\n                        <div className=\"d-flex align-items-center gap-2\">\n                          <input\n                            type=\"number\"\n                            min=\"0\"\n                            value={stockUpdates[item.id] !== undefined ? stockUpdates[item.id] : item.stock}\n                            onChange={(e) => handleStockChange(item.id, e.target.value)}\n                            className=\"form-control form-control-sm\"\n                            style={{ width: '80px' }}\n                          />\n                          {stockUpdates[item.id] !== undefined && stockUpdates[item.id] != item.stock && (\n                            <button\n                              onClick={() => handleUpdateStock(item.id, stockUpdates[item.id])}\n                              className=\"btn btn-sm btn-primary\"\n                              title=\"Update Stock\"\n                            >\n                              <i className=\"fas fa-check\"></i>\n                            </button>\n                          )}\n                        </div>\n                      </td>\n                      <td>\n                        <span className={`badge ${item.stock <= 0 ? 'bg-danger' : item.stock <= 5 ? 'bg-warning' : 'bg-success'}`}>\n                          {item.stock <= 0 ? 'Out of Stock' : item.stock <= 5 ? 'Low Stock' : 'In Stock'}\n                        </span>\n                      </td>\n                      <td>\n                        <div className=\"btn-group\" role=\"group\">\n                          <button \n                            className=\"btn btn-sm btn-outline-info\"\n                            onClick={() => handleViewMenuDetails(item)}\n                            title=\"View/Edit Details\"\n                          >\n                            <i className=\"fas fa-eye\"></i>\n                          </button>\n                          <button \n                            className={`btn btn-sm ${item.is_available ? 'btn-outline-warning' : 'btn-outline-success'}`}\n                            onClick={() => handleToggleAvailability(item.id, item.is_available)}\n                            title={item.is_available ? 'Mark Unavailable' : 'Mark Available'}\n                          >\n                            <i className={`fas ${item.is_available ? 'fa-ban' : 'fa-check-circle'}`}></i>\n                          </button>\n                          <button \n                            className=\"btn btn-sm btn-outline-secondary\"\n                            onClick={() => handleDuplicateMenuItem(item.id)}\n                            title=\"Duplicate Item\"\n                          >\n                            <i className=\"fas fa-copy\"></i>\n                          </button>\n                          <button \n                            className=\"btn btn-sm btn-outline-danger\"\n                            onClick={() => {\n                              if (window.confirm(`Are you sure you want to delete \"${item.name}\"?`)) {\n                                handleDeleteMenuItem(item.id);\n                              }\n                            }}\n                            title=\"Delete Item\"\n                          >\n                            <i className=\"fas fa-trash\"></i>\n                          </button>\n                        </div>\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          </div>\n        </div>\n      </div>\n      \n      <div className=\"col-lg-4\">\n        <div className=\"card\">\n          <div className=\"card-header\">\n            <h4 className=\"font-bold text-danger mb-0\">Add New Item</h4>\n          </div>\n          <div className=\"card-body\">\n            <form onSubmit={handleAddMenuItem}>\n              <div className=\"mb-3\">\n                <input\n                  type=\"text\"\n                  placeholder=\"Item name\"\n                  value={newMenuItem.name}\n                  onChange={(e) => setNewMenuItem({...newMenuItem, name: e.target.value})}\n                  className=\"form-control\"\n                />\n              </div>\n              <div className=\"mb-3\">\n                <input\n                  type=\"number\"\n                  step=\"0.01\"\n                  placeholder=\"Price (GHS)\"\n                  value={newMenuItem.price}\n                  onChange={(e) => setNewMenuItem({...newMenuItem, price: e.target.value})}\n                  className=\"form-control\"\n                />\n              </div>\n              <div className=\"mb-3\">\n                <input\n                  type=\"number\"\n                  placeholder=\"Initial Stock\"\n                  value={newMenuItem.stock}\n                  onChange={(e) => setNewMenuItem({...newMenuItem, stock: e.target.value})}\n                  className=\"form-control\"\n                />\n              </div>\n              <button type=\"submit\" className=\"btn btn-danger w-100\">\n                <i className=\"fas fa-plus me-2\"></i>\n                Add Item\n              </button>\n            </form>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n\n  const renderRecentOrders = () => (\n    <div className=\"card\">\n      <div className=\"card-header\">\n        <h4 className=\"font-bold text-danger mb-0\">Recent Orders</h4>\n      </div>\n      <div className=\"card-body\">\n        <div className=\"table-responsive\">\n          <table className=\"table table-hover\">\n            <thead className=\"table-light\">\n              <tr>\n                <th>Order ID</th>\n                <th>Staff</th>\n                <th>Date & Time</th>\n                <th>Total</th>\n                <th>Items</th>\n              </tr>\n            </thead>\n            <tbody>\n              {orders.slice(0, 20).map((order) => (\n                <tr key={order.id}>\n                  <td className=\"font-mono\">#{order.id.slice(-8)}</td>\n                  <td>{order.staff}</td>\n                  <td>{new Date(order.timestamp).toLocaleString()}</td>\n                  <td className=\"fw-bold text-success\">GHS {parseFloat(order.total || 0).toFixed(2)}</td>\n                  <td className=\"text-sm\">\n                    {order.payload?.items?.slice(0, 2).map(item => item.name).join(', ')}\n                    {order.payload?.items?.length > 2 && '...'}\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n          {orders.length === 0 && (\n            <div className=\"text-center py-4 text-muted\">No orders yet</div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n\n  const renderReportsExport = () => (\n    <div className=\"row\">\n      <div className=\"col-lg-6\">\n        <div className=\"card mb-4\">\n          <div className=\"card-header\">\n            <h4 className=\"font-bold text-danger mb-0\">Export Options</h4>\n          </div>\n          <div className=\"card-body\">\n            <div className=\"d-grid gap-2\">\n              <button onClick={exportData} className=\"btn btn-outline-danger\">\n                <i className=\"fas fa-download me-2\"></i>\n                Export JSON Data\n              </button>\n              <button onClick={exportCSV} className=\"btn btn-outline-danger\">\n                <i className=\"fas fa-file-csv me-2\"></i>\n                Export Orders CSV\n              </button>\n              <button onClick={loadAllData} className=\"btn btn-outline-danger\">\n                <i className=\"fas fa-sync-alt me-2\"></i>\n                Refresh All Data\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n      \n      <div className=\"col-lg-6\">\n        <div className=\"card\">\n          <div className=\"card-header\">\n            <h4 className=\"font-bold text-danger mb-0\">Quick Stats</h4>\n          </div>\n          <div className=\"card-body\">\n            <div className=\"row text-center\">\n              <div className=\"col-6 mb-3\">\n                <div className=\"h4 text-primary mb-0\">{menu.length}</div>\n                <small className=\"text-muted\">Menu Items</small>\n              </div>\n              <div className=\"col-6 mb-3\">\n                <div className=\"h4 text-warning mb-0\">{staff.length}</div>\n                <small className=\"text-muted\">Staff Members</small>\n              </div>\n              <div className=\"col-6\">\n                <div className=\"h4 text-success mb-0\">{orders.length}</div>\n                <small className=\"text-muted\">Total Orders</small>\n              </div>\n              <div className=\"col-6\">\n                <div className=\"h4 text-info mb-0\">GHS {salesStats.totalSales.toFixed(2)}</div>\n                <small className=\"text-muted\">Total Revenue</small>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n\n  const renderContent = () => {\n    switch (activeSection) {\n      case 'dashboard':\n        return renderDashboard();\n      case 'staff':\n        return renderStaffManagement();\n      case 'menu':\n        return renderMenuManagement();\n      case 'orders':\n        return renderRecentOrders();\n      case 'reports':\n        return renderReportsExport();\n      default:\n        return renderDashboard();\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center py-8\">\n        <div className=\"spinner\"></div>\n        <span className=\"ml-2\">Loading admin panel...</span>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"card\">\n        <div className=\"card-body text-center\">\n          <div className=\"text-danger mb-4\">{error}</div>\n          <button onClick={loadAllData} className=\"btn btn-danger\">\n            Retry\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"admin-container\">\n      {/* Full-width admin content */}\n      <div className=\"admin-content-wrapper\">\n        {/* Success/Error Messages */}\n        {successMessage && (\n          <div className=\"alert alert-success alert-dismissible fade show mb-4\" role=\"alert\">\n            <i className=\"fas fa-check-circle me-2\"></i>\n            {successMessage}\n            <button type=\"button\" className=\"btn-close\" onClick={() => setSuccessMessage('')}></button>\n          </div>\n        )}\n        \n        {error && (\n          <div className=\"alert alert-danger alert-dismissible fade show mb-4\" role=\"alert\">\n            <i className=\"fas fa-exclamation-circle me-2\"></i>\n            {error}\n            <button type=\"button\" className=\"btn-close\" onClick={() => setError('')}></button>\n          </div>\n        )}\n        \n        {renderContent()}\n      </div>\n\n      {/* Staff Details Modal */}\n      {showStaffDetailsModal && selectedStaff && (\n        <StaffDetailsModal\n          staff={selectedStaff}\n          onClose={() => {\n            setShowStaffDetailsModal(false);\n            setSelectedStaff(null);\n          }}\n          onUpdate={handleStaffUpdate}\n          onDelete={handleStaffDelete}\n        />\n      )}\n\n      {/* Menu Details Modal */}\n      {showMenuDetailsModal && selectedMenuItem && (\n        <MenuDetailsModal\n          menuItem={selectedMenuItem}\n          onClose={() => {\n            setShowMenuDetailsModal(false);\n            setSelectedMenuItem(null);\n          }}\n          onUpdate={handleUpdateMenuItem}\n          onDelete={handleDeleteMenuItem}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default Admin;","size_bytes":33087},"src/components/Cart.js":{"content":"import React from 'react';\nimport { useCart } from '../services/CartContext';\n\nconst Cart = ({ onConfirmOrder }) => {\n  const { \n    cartItems, \n    removeFromCart, \n    updateQuantity, \n    clearCart, \n    getCartTotal, \n    getCartCount \n  } = useCart();\n\n  const handleQuantityChange = (itemId, newQuantity) => {\n    if (newQuantity <= 0) {\n      removeFromCart(itemId);\n    } else {\n      updateQuantity(itemId, newQuantity);\n    }\n  };\n\n  return (\n    <div className=\"pwa-cart-wrapper\">\n      <div className=\"pwa-cart-header\">\n        <h4 className=\"pwa-cart-title\">Cart ({getCartCount()})</h4>\n        <div className=\"pwa-cart-actions\">\n          <button\n            onClick={clearCart}\n            disabled={cartItems.length === 0}\n            className=\"pwa-cart-btn clear\"\n          >\n            <i className=\"fas fa-trash me-1\"></i>\n            Clear\n          </button>\n          <button\n            onClick={onConfirmOrder}\n            disabled={cartItems.length === 0}\n            className=\"pwa-cart-btn confirm\"\n          >\n            <i className=\"fas fa-check me-1\"></i>\n            Confirm\n          </button>\n        </div>\n      </div>\n\n        <div className=\"pwa-cart-items\">\n          {cartItems.length === 0 ? (\n            <div className=\"pwa-cart-empty\">\n              <i className=\"fas fa-shopping-cart fa-2x mb-2\"></i>\n              <p>Your cart is empty</p>\n              <span className=\"text-muted\">Add items from the menu to get started</span>\n            </div>\n          ) : (\n            cartItems.map((item) => (\n              <div key={item.id} className=\"pwa-cart-item\">\n                <div className=\"pwa-item-info\">\n                  <h6 className=\"pwa-item-name\">{item.name}</h6>\n                  <span className=\"pwa-item-price\">\n                    GHS {parseFloat(item.price || 0).toFixed(2)} each\n                  </span>\n                </div>\n                \n                <div className=\"pwa-item-controls\">\n                  <div className=\"pwa-quantity-controls\">\n                    <button\n                      onClick={() => handleQuantityChange(item.id, item.quantity - 1)}\n                      className=\"pwa-qty-btn\"\n                    >\n                      <i className=\"fas fa-minus\"></i>\n                    </button>\n                    \n                    <input\n                      type=\"number\"\n                      min=\"1\"\n                      value={item.quantity}\n                      onChange={(e) => handleQuantityChange(item.id, parseInt(e.target.value) || 1)}\n                      className=\"pwa-qty-input\"\n                    />\n                    \n                    <button\n                      onClick={() => handleQuantityChange(item.id, item.quantity + 1)}\n                      className=\"pwa-qty-btn\"\n                    >\n                      <i className=\"fas fa-plus\"></i>\n                    </button>\n                  </div>\n                  \n                  <div className=\"pwa-item-total\">\n                    GHS {(parseFloat(item.price || 0) * item.quantity).toFixed(2)}\n                  </div>\n                  \n                  <button\n                    onClick={() => removeFromCart(item.id)}\n                    className=\"pwa-remove-btn\"\n                    title=\"Remove item\"\n                  >\n                    <i className=\"fas fa-trash\"></i>\n                  </button>\n                </div>\n              </div>\n            ))\n          )}\n        </div>\n\n        {cartItems.length > 0 && (\n          <div className=\"pwa-cart-summary\">\n            <div className=\"pwa-cart-total\">\n              <span className=\"pwa-total-label\">Order Total:</span>\n              <span className=\"pwa-total-value\">\n                GHS {getCartTotal().toFixed(2)}\n              </span>\n            </div>\n          </div>\n        )}\n    </div>\n  );\n};\n\nexport default Cart;","size_bytes":3891},"src/components/Header.js":{"content":"import React, { useState, useEffect } from 'react';\nimport { useAuth } from '../services/AuthContext';\nimport { useNavigate, useLocation } from 'react-router-dom';\n\nconst Header = () => {\n  const { user, logout } = useAuth();\n  const navigate = useNavigate();\n  const location = useLocation();\n  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);\n  const [notifications, setNotifications] = useState([]);\n  const [unreadCount, setUnreadCount] = useState(0);\n  const [showNotifications, setShowNotifications] = useState(false);\n\n  // Mock notification system for UI demonstration (ready for real-time integration)\n  useEffect(() => {\n    // Demo notifications - can be replaced with WebSocket/SSE for real-time updates\n    const mockNotifications = [\n      { id: 1, type: 'order', message: 'New order #1234 received', time: '2 min ago', read: false },\n      { id: 2, type: 'system', message: 'Daily backup completed', time: '1 hour ago', read: true },\n      { id: 3, type: 'inventory', message: 'Low stock alert: Chicken Shawarma', time: '3 hours ago', read: false },\n    ];\n    setNotifications(mockNotifications);\n    setUnreadCount(mockNotifications.filter(n => !n.read).length);\n    \n    // TODO: Replace with real-time notification subscription\n    // Example: WebSocket connection, Server-Sent Events, or polling\n  }, []);\n\n  // Close dropdowns when clicking outside\n  useEffect(() => {\n    const handleClickOutside = (event) => {\n      if (showNotifications && !event.target.closest('.notification-wrapper')) {\n        setShowNotifications(false);\n      }\n    };\n\n    document.addEventListener('click', handleClickOutside);\n    return () => document.removeEventListener('click', handleClickOutside);\n  }, [showNotifications]);\n\n  const handleLogout = () => {\n    logout();\n    navigate('/');\n  };\n\n  const handleNavigation = (path) => {\n    navigate(path);\n    setIsMobileMenuOpen(false); // Close mobile menu when navigating\n  };\n\n  const toggleMobileMenu = () => {\n    setIsMobileMenuOpen(!isMobileMenuOpen);\n  };\n\n  const toggleNotifications = () => {\n    setShowNotifications(!showNotifications);\n  };\n\n  const markAllAsRead = () => {\n    setNotifications(prev => prev.map(n => ({ ...n, read: true })));\n    setUnreadCount(0);\n  };\n\n  const getNotificationIcon = (type) => {\n    switch (type) {\n      case 'order': return 'fas fa-shopping-cart';\n      case 'system': return 'fas fa-cog';\n      case 'inventory': return 'fas fa-exclamation-triangle';\n      default: return 'fas fa-bell';\n    }\n  };\n\n  return (\n    <header className=\"modern-navbar\">\n      <div className=\"navbar-container\">\n        {/* Mobile Hamburger Menu */}\n        {user && (\n          <button \n            className=\"mobile-menu-toggle d-md-none\"\n            onClick={toggleMobileMenu}\n            aria-label=\"Toggle mobile menu\"\n            aria-expanded={isMobileMenuOpen}\n          >\n            <i className={`fas ${isMobileMenuOpen ? 'fa-times' : 'fa-bars'}`}></i>\n          </button>\n        )}\n\n        {/* Brand Section */}\n        <button \n          className=\"navbar-brand\" \n          onClick={() => handleNavigation('/')}\n          aria-label=\"Go to home\"\n        >\n          <div className=\"brand-icon\">\n            <img \n              src=\"/logo.png\" \n              alt=\"Shawarma Boss Logo\" \n              className=\"brand-logo\"\n            />\n          </div>\n          <div className=\"brand-content\">\n            <h1 className=\"brand-title\">\n              Shawarma Boss\n              <span className=\"brand-badge\">POS</span>\n            </h1>\n            <p className=\"brand-subtitle d-none d-lg-block\">Where Flavor Meets Technology</p>\n          </div>\n        </button>\n\n        {user && (\n          <>\n            {/* Desktop Navigation Tabs */}\n            <nav className=\"nav-tabs d-none d-md-flex\" aria-label=\"Primary navigation\">\n              <div className=\"nav-tab-list\">\n                <button\n                  onClick={() => handleNavigation('/')}\n                  className={`nav-tab ${location.pathname === '/' ? 'active' : ''}`}\n                  title=\"POS Dashboard\"\n                  aria-current={location.pathname === '/' ? 'page' : undefined}\n                >\n                  <div className=\"tab-icon\">\n                    <i className=\"fas fa-cash-register\"></i>\n                  </div>\n                  <span className=\"tab-label\">POS</span>\n                </button>\n                {user.role === 'admin' && (\n                  <div className=\"nav-tab-dropdown\">\n                    <button\n                      className={`nav-tab ${location.pathname === '/admin' ? 'active' : ''}`}\n                      data-bs-toggle=\"dropdown\" \n                      aria-expanded=\"false\"\n                      title=\"Admin Dashboard\"\n                      aria-current={location.pathname === '/admin' ? 'page' : undefined}\n                    >\n                      <div className=\"tab-icon\">\n                        <i className=\"fas fa-shield-alt\"></i>\n                      </div>\n                      <span className=\"tab-label\">Admin</span>\n                      <i className=\"fas fa-chevron-down ms-1\"></i>\n                    </button>\n                    <ul className=\"dropdown-menu modern-dropdown\">\n                      <li>\n                        <button \n                          className=\"dropdown-item\" \n                          onClick={() => handleNavigation('/admin?section=dashboard')}\n                        >\n                          <i className=\"fas fa-tachometer-alt me-2\"></i>Dashboard\n                        </button>\n                      </li>\n                      <li>\n                        <button \n                          className=\"dropdown-item\" \n                          onClick={() => handleNavigation('/admin?section=staff')}\n                        >\n                          <i className=\"fas fa-users me-2\"></i>Staff Management\n                        </button>\n                      </li>\n                      <li>\n                        <button \n                          className=\"dropdown-item\" \n                          onClick={() => handleNavigation('/admin?section=menu')}\n                        >\n                          <i className=\"fas fa-utensils me-2\"></i>Menu Management\n                        </button>\n                      </li>\n                      <li>\n                        <button \n                          className=\"dropdown-item\" \n                          onClick={() => handleNavigation('/admin?section=orders')}\n                        >\n                          <i className=\"fas fa-receipt me-2\"></i>Recent Orders\n                        </button>\n                      </li>\n                      <li>\n                        <button \n                          className=\"dropdown-item\" \n                          onClick={() => handleNavigation('/admin?section=reports')}\n                        >\n                          <i className=\"fas fa-chart-bar me-2\"></i>Reports & Export\n                        </button>\n                      </li>\n                    </ul>\n                  </div>\n                )}\n              </div>\n            </nav>\n            \n            {/* Right Side Actions */}\n            <div className=\"navbar-actions\">\n              {/* Notifications */}\n              <div className=\"notification-wrapper\">\n                <button\n                  className=\"notification-btn\"\n                  onClick={toggleNotifications}\n                  title=\"Notifications\"\n                  aria-label=\"Show notifications\"\n                >\n                  <i className=\"fas fa-bell\"></i>\n                  {unreadCount > 0 && (\n                    <span className=\"notification-badge\">{unreadCount}</span>\n                  )}\n                </button>\n                \n                {/* Notification Dropdown */}\n                {showNotifications && (\n                  <div className=\"notification-dropdown\">\n                    <div className=\"notification-header\">\n                      <h6>Notifications</h6>\n                      {unreadCount > 0 && (\n                        <button \n                          className=\"mark-read-btn\"\n                          onClick={markAllAsRead}\n                        >\n                          Mark all as read\n                        </button>\n                      )}\n                    </div>\n                    <div className=\"notification-list\">\n                      {notifications.length === 0 ? (\n                        <div className=\"notification-empty\">\n                          <i className=\"fas fa-bell-slash\"></i>\n                          <p>No notifications yet</p>\n                        </div>\n                      ) : (\n                        notifications.map(notification => (\n                          <div \n                            key={notification.id} \n                            className={`notification-item ${!notification.read ? 'unread' : ''}`}\n                          >\n                            <div className=\"notification-icon\">\n                              <i className={getNotificationIcon(notification.type)}></i>\n                            </div>\n                            <div className=\"notification-content\">\n                              <p className=\"notification-message\">{notification.message}</p>\n                              <span className=\"notification-time\">{notification.time}</span>\n                            </div>\n                            {!notification.read && <div className=\"unread-dot\"></div>}\n                          </div>\n                        ))\n                      )}\n                    </div>\n                  </div>\n                )}\n              </div>\n\n              {/* User Profile */}\n              <div className=\"user-profile\">\n                <div className=\"user-info\">\n                  <div className=\"user-avatar\">\n                    <i className=\"fas fa-user-circle\"></i>\n                  </div>\n                  <div className=\"user-details d-none d-lg-block\">\n                    <div className=\"user-name\">{user.username}</div>\n                    <div className={`user-role role-${user.role}`}>\n                      <i className={`fas ${user.role === 'admin' ? 'fa-crown' : 'fa-user'} me-1`}></i>\n                      {user.role}\n                    </div>\n                  </div>\n                  \n                  <div className=\"dropdown\">\n                    <button \n                      className=\"user-menu-btn\" \n                      type=\"button\" \n                      data-bs-toggle=\"dropdown\" \n                      aria-expanded=\"false\"\n                      title=\"User Menu\"\n                    >\n                      <i className=\"fas fa-chevron-down d-none d-md-inline\"></i>\n                      <i className=\"fas fa-ellipsis-v d-md-none\"></i>\n                    </button>\n                    <ul className=\"dropdown-menu dropdown-menu-end modern-dropdown\">\n                      <li className=\"dropdown-header\">\n                        <div className=\"dropdown-user-info\">\n                          <div className=\"dropdown-avatar\">\n                            <i className=\"fas fa-user-circle\"></i>\n                          </div>\n                          <div>\n                            <div className=\"dropdown-name\">{user.username}</div>\n                            <div className={`dropdown-role role-${user.role}`}>\n                              <i className={`fas ${user.role === 'admin' ? 'fa-crown' : 'fa-user'} me-1`}></i>\n                              {user.role}\n                            </div>\n                          </div>\n                        </div>\n                      </li>\n                      <li><hr className=\"dropdown-divider\" /></li>\n                      <li>\n                        <button className=\"dropdown-item logout-item\" onClick={handleLogout}>\n                          <div className=\"dropdown-item-content\">\n                            <i className=\"fas fa-sign-out-alt\"></i>\n                            <span>Sign Out</span>\n                          </div>\n                        </button>\n                      </li>\n                    </ul>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </>\n        )}\n      </div>\n\n      {/* Mobile Navigation Menu */}\n      {user && (\n        <div className={`mobile-nav-menu ${isMobileMenuOpen ? 'open' : ''}`}>\n          <div className=\"mobile-nav-header\">\n            <div className=\"mobile-user-info\">\n              <div className=\"mobile-avatar\">\n                <i className=\"fas fa-user-circle\"></i>\n              </div>\n              <div className=\"mobile-user-details\">\n                <div className=\"mobile-user-name\">{user.username}</div>\n                <div className={`mobile-user-role role-${user.role}`}>\n                  <i className={`fas ${user.role === 'admin' ? 'fa-crown' : 'fa-user'} me-1`}></i>\n                  {user.role}\n                </div>\n              </div>\n            </div>\n          </div>\n          \n          <nav className=\"mobile-nav-list\">\n            <button\n              onClick={() => handleNavigation('/')}\n              className={`mobile-nav-item ${location.pathname === '/' ? 'active' : ''}`}\n            >\n              <i className=\"fas fa-cash-register\"></i>\n              <span>POS Dashboard</span>\n            </button>\n            {user.role === 'admin' && (\n              <>\n                <div className=\"mobile-nav-section\">\n                  <div className=\"mobile-nav-header\">\n                    <i className=\"fas fa-shield-alt\"></i>\n                    <span>Admin</span>\n                  </div>\n                  <div className=\"mobile-nav-items\">\n                    <button\n                      onClick={() => handleNavigation('/admin?section=dashboard')}\n                      className={`mobile-nav-subitem ${location.pathname === '/admin' && new URLSearchParams(location.search).get('section') === 'dashboard' ? 'active' : ''}`}\n                    >\n                      <i className=\"fas fa-tachometer-alt\"></i>\n                      <span>Dashboard</span>\n                    </button>\n                    <button\n                      onClick={() => handleNavigation('/admin?section=staff')}\n                      className={`mobile-nav-subitem ${location.pathname === '/admin' && new URLSearchParams(location.search).get('section') === 'staff' ? 'active' : ''}`}\n                    >\n                      <i className=\"fas fa-users\"></i>\n                      <span>Staff Management</span>\n                    </button>\n                    <button\n                      onClick={() => handleNavigation('/admin?section=menu')}\n                      className={`mobile-nav-subitem ${location.pathname === '/admin' && new URLSearchParams(location.search).get('section') === 'menu' ? 'active' : ''}`}\n                    >\n                      <i className=\"fas fa-utensils\"></i>\n                      <span>Menu Management</span>\n                    </button>\n                    <button\n                      onClick={() => handleNavigation('/admin?section=orders')}\n                      className={`mobile-nav-subitem ${location.pathname === '/admin' && new URLSearchParams(location.search).get('section') === 'orders' ? 'active' : ''}`}\n                    >\n                      <i className=\"fas fa-receipt\"></i>\n                      <span>Recent Orders</span>\n                    </button>\n                    <button\n                      onClick={() => handleNavigation('/admin?section=reports')}\n                      className={`mobile-nav-subitem ${location.pathname === '/admin' && new URLSearchParams(location.search).get('section') === 'reports' ? 'active' : ''}`}\n                    >\n                      <i className=\"fas fa-chart-bar\"></i>\n                      <span>Reports & Export</span>\n                    </button>\n                  </div>\n                </div>\n              </>\n            )}\n            <div className=\"mobile-nav-divider\"></div>\n            <button className=\"mobile-nav-item logout\" onClick={handleLogout}>\n              <i className=\"fas fa-sign-out-alt\"></i>\n              <span>Sign Out</span>\n            </button>\n          </nav>\n        </div>\n      )}\n      \n      {/* Mobile Menu Overlay */}\n      {isMobileMenuOpen && <div className=\"mobile-menu-overlay\" onClick={toggleMobileMenu}></div>}\n    </header>\n  );\n};\n\nexport default Header;","size_bytes":16591},"src/components/Login.js":{"content":"import React, { useState } from 'react';\nimport { useAuth } from '../services/AuthContext';\n\nconst Login = () => {\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [error, setError] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const { login } = useAuth();\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setError('');\n    setIsLoading(true);\n\n    if (!username.trim() || !password.trim()) {\n      setError('Please enter both username and password');\n      setIsLoading(false);\n      return;\n    }\n\n    try {\n      const result = await login(username.trim(), password);\n      if (!result.success) {\n        setError(result.error || 'Login failed');\n      }\n    } catch (error) {\n      setError('An error occurred. Please try again.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"flex items-center justify-center min-h-96\">\n      <div className=\"card w-full max-w-md slide-up\">\n        <div className=\"card-body p-6\">\n          <div className=\"text-center mb-6\">\n            <img \n              src=\"/icons/logo.png\" \n              alt=\"Shawarma Boss Logo\" \n              className=\"w-12 h-12 mx-auto mb-4 rounded\"\n              onError={(e) => {\n                e.target.style.display = 'none';\n              }}\n            />\n            <h2 className=\"text-xl font-bold text-danger\">Shawarma Boss POS</h2>\n            <p className=\"text-muted text-sm mt-1\">Delicious Shawarma, Seamless Service</p>\n          </div>\n\n          <form onSubmit={handleSubmit}>\n            <div className=\"mb-4\">\n              <label className=\"block text-sm font-medium mb-2\">Username</label>\n              <input\n                type=\"text\"\n                value={username}\n                onChange={(e) => setUsername(e.target.value)}\n                className=\"form-control\"\n                placeholder=\"Enter username\"\n                disabled={isLoading}\n                autoComplete=\"username\"\n              />\n            </div>\n\n            <div className=\"mb-4\">\n              <label className=\"block text-sm font-medium mb-2\">Password</label>\n              <input\n                type=\"password\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                className=\"form-control\"\n                placeholder=\"Enter password\"\n                disabled={isLoading}\n                autoComplete=\"current-password\"\n              />\n            </div>\n\n            {error && (\n              <div className=\"text-danger text-sm mb-4 p-2 bg-red-50 border border-red-200 rounded\">\n                {error}\n              </div>\n            )}\n\n            <button\n              type=\"submit\"\n              disabled={isLoading}\n              className=\"btn btn-danger w-full flex items-center justify-center\"\n            >\n              {isLoading ? (\n                <div className=\"spinner w-4 h-4\"></div>\n              ) : (\n                'Login'\n              )}\n            </button>\n          </form>\n\n          <div className=\"mt-6 text-center text-sm text-muted\">\n            <div className=\"mb-2\">\n              <strong>Welcome to Shawarma Boss</strong>\n            </div>\n            <div className=\"space-y-1\">\n              <div>Your trusted partner in delicious shawarma</div>\n              <div className=\"text-xs opacity-75\">Secure ‚Ä¢ Fast ‚Ä¢ Reliable</div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Login;","size_bytes":3555},"src/components/MenuGrid.js":{"content":"import React, { useState } from 'react';\nimport { useCart } from '../services/CartContext';\n\nconst MenuGrid = ({ menu }) => {\n  const { addToCart } = useCart();\n  const [quantities, setQuantities] = useState({});\n\n  const handleQuantityChange = (itemId, quantity) => {\n    setQuantities(prev => ({\n      ...prev,\n      [itemId]: Math.max(1, parseInt(quantity) || 1)\n    }));\n  };\n\n  const handleAddToCart = (item) => {\n    const quantity = quantities[item.id] || 1;\n    if (item.stock < quantity) {\n      alert(`Not enough stock! Only ${item.stock} available.`);\n      return;\n    }\n    addToCart(item, quantity);\n    // Reset quantity to 1 after adding\n    setQuantities(prev => ({\n      ...prev,\n      [item.id]: 1\n    }));\n  };\n\n  const getStockStatus = (stock) => {\n    if (stock === 0) return { text: 'Out of Stock', class: 'stock-out text-danger' };\n    if (stock <= 5) return { text: `Low Stock (${stock})`, class: 'stock-low text-warning' };\n    return { text: `In Stock (${stock})`, class: 'stock-good text-success' };\n  };\n\n  return (\n    <div className=\"pos-menu-grid\">\n      {menu.map((item) => {\n        const stockStatus = getStockStatus(item.stock);\n        const quantity = quantities[item.id] || 1;\n        \n        return (\n          <div key={item.id} className=\"menu-item-card\">\n            <div className=\"menu-item-header\">\n              <h5 className=\"menu-item-name\">{item.name}</h5>\n              <span className=\"menu-item-price\">\n                GHS {parseFloat(item.price || 0).toFixed(2)}\n              </span>\n            </div>\n            \n            <div className={`menu-item-stock ${stockStatus.class}`}>\n              <i className={`fas ${\n                item.stock === 0 ? 'fa-times-circle' : \n                item.stock <= 5 ? 'fa-exclamation-triangle' : \n                'fa-check-circle'\n              } me-1`}></i>\n              {stockStatus.text}\n            </div>\n            \n            <div className=\"menu-item-actions\">\n              <div className=\"quantity-selector\">\n                <button \n                  className=\"btn btn-outline-secondary btn-sm qty-btn\"\n                  onClick={() => handleQuantityChange(item.id, Math.max(1, quantity - 1))}\n                  disabled={item.stock === 0 || quantity <= 1}\n                >\n                  <i className=\"fas fa-minus\"></i>\n                </button>\n                <input\n                  type=\"number\"\n                  min=\"1\"\n                  max={item.stock}\n                  value={quantity}\n                  onChange={(e) => handleQuantityChange(item.id, e.target.value)}\n                  className=\"form-control form-control-sm qty-input\"\n                  disabled={item.stock === 0}\n                />\n                <button \n                  className=\"btn btn-outline-secondary btn-sm qty-btn\"\n                  onClick={() => handleQuantityChange(item.id, Math.min(item.stock, quantity + 1))}\n                  disabled={item.stock === 0 || quantity >= item.stock}\n                >\n                  <i className=\"fas fa-plus\"></i>\n                </button>\n              </div>\n              <button\n                onClick={() => handleAddToCart(item)}\n                disabled={item.stock === 0}\n                className={`btn add-to-cart-btn ${\n                  item.stock === 0 ? 'btn-secondary' : 'btn-danger'\n                }`}\n              >\n                <i className={`fas ${\n                  item.stock === 0 ? 'fa-ban' : 'fa-cart-plus'\n                } me-1`}></i>\n                {item.stock === 0 ? 'Out of Stock' : 'Add to Cart'}\n              </button>\n            </div>\n          </div>\n        );\n      })}\n      \n      {menu.length === 0 && (\n        <div className=\"no-menu-items\">\n          <i className=\"fas fa-utensils fa-3x text-muted mb-3\"></i>\n          <p className=\"text-muted mb-0\">No menu items available</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default MenuGrid;","size_bytes":3953},"src/components/OrderDetailsModal.js":{"content":"import React from 'react';\n\nconst OrderDetailsModal = ({ order, onClose }) => {\n  const handlePrint = () => {\n    // Create a new window for printing\n    const printWindow = window.open('', '_blank');\n    \n    printWindow.document.write(`\n      <!DOCTYPE html>\n      <html>\n        <head>\n          <title>Order Details - ${order.id}</title>\n          <style>\n            body {\n              font-family: 'Courier New', monospace;\n              font-size: 12px;\n              line-height: 1.4;\n              margin: 0;\n              padding: 20px;\n              background: white;\n            }\n            .receipt-header {\n              text-align: center;\n              margin-bottom: 20px;\n              border-bottom: 2px solid #000;\n              padding-bottom: 10px;\n            }\n            .receipt-title {\n              font-size: 18px;\n              font-weight: bold;\n              margin-bottom: 5px;\n            }\n            .receipt-subtitle {\n              font-size: 12px;\n              color: #666;\n            }\n            .receipt-info {\n              margin-bottom: 15px;\n            }\n            .receipt-info div {\n              display: flex;\n              justify-content: space-between;\n              margin-bottom: 3px;\n            }\n            .receipt-items {\n              margin-bottom: 15px;\n            }\n            .receipt-items h5 {\n              margin-bottom: 10px;\n              font-size: 14px;\n            }\n            .item-row {\n              display: flex;\n              justify-content: space-between;\n              margin-bottom: 5px;\n            }\n            .receipt-total {\n              border-top: 2px solid #000;\n              padding-top: 10px;\n              margin-top: 15px;\n            }\n            .receipt-total div {\n              display: flex;\n              justify-content: space-between;\n              font-weight: bold;\n              font-size: 14px;\n            }\n            .receipt-footer {\n              text-align: center;\n              margin-top: 20px;\n              font-size: 11px;\n              color: #666;\n            }\n            @media print {\n              body { margin: 0; padding: 10px; }\n            }\n          </style>\n        </head>\n        <body>\n          <div class=\"receipt-header\">\n            <div class=\"receipt-title\">Shawarma Boss</div>\n            <div class=\"receipt-subtitle\">Order Details</div>\n          </div>\n          \n          <div class=\"receipt-info\">\n            <div><span>Order ID:</span><span>#${order.id.slice(-8)}</span></div>\n            <div><span>Staff:</span><span>${order.staff}</span></div>\n            <div><span>Date:</span><span>${new Date(order.timestamp).toLocaleString()}</span></div>\n            <div><span>Status:</span><span>${order.status || 'Completed'}</span></div>\n          </div>\n          \n          <div class=\"receipt-items\">\n            <h5>Items:</h5>\n            ${order.items.map(item => `\n              <div class=\"item-row\">\n                <span>${item.name} √ó ${item.quantity}</span>\n                <span>GHS ${(parseFloat(item.price || 0) * item.quantity).toFixed(2)}</span>\n              </div>\n            `).join('')}\n          </div>\n          \n          <div class=\"receipt-total\">\n            <div>\n              <span>Total:</span>\n              <span>GHS ${parseFloat(order.total || 0).toFixed(2)}</span>\n            </div>\n          </div>\n          \n          <div class=\"receipt-footer\">\n            Thank you for your business!\n          </div>\n        </body>\n      </html>\n    `);\n    \n    printWindow.document.close();\n    printWindow.focus();\n    printWindow.print();\n    printWindow.close();\n  };\n\n  const handleDownloadPDF = () => {\n    // This would integrate with jsPDF or similar library\n    alert('PDF download feature would be implemented here');\n  };\n\n  if (!order) {\n    console.log('OrderDetailsModal: No order provided');\n    return null;\n  }\n\n  console.log('OrderDetailsModal: Rendering modal with order:', order);\n\n  return (\n    <div \n      className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\"\n      style={{ \n        position: 'fixed',\n        top: 0,\n        left: 0,\n        right: 0,\n        bottom: 0,\n        zIndex: 9999,\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center'\n      }}\n    >\n      <div \n        className=\"bg-white rounded-lg shadow-xl max-w-2xl w-full mx-4 max-h-[90vh] overflow-y-auto\"\n        style={{\n          position: 'relative',\n          zIndex: 10000,\n          backgroundColor: 'white',\n          borderRadius: '0.5rem',\n          boxShadow: '0 25px 50px -12px rgba(0, 0, 0, 0.25)',\n          maxWidth: '42rem',\n          width: '100%',\n          margin: '0 1rem',\n          maxHeight: '90vh',\n          overflowY: 'auto'\n        }}\n      >\n        <div className=\"flex justify-between items-center p-4 border-b sticky top-0 bg-white\">\n          <h3 className=\"text-xl font-bold text-danger\">Order Details</h3>\n          <button\n            onClick={onClose}\n            className=\"text-gray-500 hover:text-gray-700 text-2xl font-bold\"\n            aria-label=\"Close modal\"\n          >\n            √ó\n          </button>\n        </div>\n        \n        <div className=\"p-6\">\n          {/* Order Header */}\n          <div className=\"text-center mb-6\">\n            <h4 className=\"font-bold text-2xl text-danger\">Shawarma Boss</h4>\n            <p className=\"text-sm text-muted\">Order Details</p>\n          </div>\n          \n          {/* Order Information */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-6\">\n            <div className=\"bg-gray-50 p-4 rounded-lg\">\n              <h6 className=\"font-semibold text-gray-700 mb-2\">Order Information</h6>\n              <div className=\"space-y-2\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-600\">Order ID:</span>\n                  <span className=\"font-mono font-semibold\">#{order.id.slice(-8)}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-600\">Staff:</span>\n                  <span className=\"font-semibold\">{order.staff}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-600\">Date:</span>\n                  <span className=\"font-semibold\">{new Date(order.timestamp).toLocaleString()}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-600\">Status:</span>\n                  <span className=\"badge bg-success text-white px-2 py-1 rounded text-xs\">\n                    {order.status || 'Completed'}\n                  </span>\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"bg-gray-50 p-4 rounded-lg\">\n              <h6 className=\"font-semibold text-gray-700 mb-2\">Order Summary</h6>\n              <div className=\"space-y-2\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-600\">Total Items:</span>\n                  <span className=\"font-semibold\">{order.items?.length || 0}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-600\">Total Quantity:</span>\n                  <span className=\"font-semibold\">\n                    {order.items?.reduce((sum, item) => sum + item.quantity, 0) || 0}\n                  </span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-600\">Order Total:</span>\n                  <span className=\"font-bold text-lg text-success\">\n                    GHS {parseFloat(order.total || 0).toFixed(2)}\n                  </span>\n                </div>\n              </div>\n            </div>\n          </div>\n          \n          {/* Items List */}\n          <div className=\"mb-6\">\n            <h5 className=\"font-bold text-lg mb-4 flex items-center\">\n              <i className=\"fas fa-utensils me-2 text-warning\"></i>\n              Order Items\n            </h5>\n            <div className=\"space-y-3\">\n              {order.items?.map((item, index) => (\n                <div key={index} className=\"bg-white border border-gray-200 rounded-lg p-4 hover:shadow-md transition-shadow\">\n                  <div className=\"flex justify-between items-start\">\n                    <div className=\"flex-1\">\n                      <h6 className=\"font-semibold text-gray-800 mb-1\">{item.name}</h6>\n                      <p className=\"text-sm text-gray-600\">\n                        Price: GHS {parseFloat(item.price || 0).toFixed(2)} each\n                      </p>\n                    </div>\n                    <div className=\"text-right\">\n                      <div className=\"text-sm text-gray-600 mb-1\">\n                        Quantity: <span className=\"font-semibold\">{item.quantity}</span>\n                      </div>\n                      <div className=\"font-bold text-lg text-success\">\n                        GHS {(parseFloat(item.price || 0) * item.quantity).toFixed(2)}\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n          \n          {/* Total Section */}\n          <div className=\"border-t pt-4\">\n            <div className=\"bg-success bg-opacity-10 border border-success border-opacity-20 rounded-lg p-4\">\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-lg font-semibold text-gray-700\">Order Total:</span>\n                <span className=\"text-2xl font-bold text-success\">\n                  GHS {parseFloat(order.total || 0).toFixed(2)}\n                </span>\n              </div>\n            </div>\n          </div>\n          \n          {/* Footer */}\n          <div className=\"text-center text-sm text-muted mt-6\">\n            <i className=\"fas fa-check-circle text-success me-1\"></i>\n            Order completed successfully\n          </div>\n        </div>\n        \n        <div className=\"flex gap-2 p-4 border-t sticky bottom-0 bg-white\">\n          <button\n            onClick={handlePrint}\n            className=\"btn btn-danger flex-1\"\n          >\n            <i className=\"fas fa-print me-2\"></i>\n            Print Details\n          </button>\n          <button\n            onClick={handleDownloadPDF}\n            className=\"btn btn-outline-danger flex-1\"\n          >\n            <i className=\"fas fa-download me-2\"></i>\n            Download PDF\n          </button>\n          <button\n            onClick={onClose}\n            className=\"btn btn-outline-secondary\"\n          >\n            <i className=\"fas fa-times me-2\"></i>\n            Close\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default OrderDetailsModal;\n","size_bytes":10971},"src/components/OrderModal.js":{"content":"import React from 'react';\n\nconst OrderModal = ({ order, onClose }) => {\n  const handlePrint = () => {\n    // Create a new window for printing\n    const printWindow = window.open('', '_blank');\n    \n    printWindow.document.write(`\n      <!DOCTYPE html>\n      <html>\n        <head>\n          <title>Order Receipt - ${order.id}</title>\n          <style>\n            body {\n              font-family: 'Courier New', monospace;\n              font-size: 12px;\n              line-height: 1.4;\n              margin: 0;\n              padding: 20px;\n              background: white;\n            }\n            .receipt-header {\n              text-align: center;\n              margin-bottom: 20px;\n              border-bottom: 2px solid #000;\n              padding-bottom: 10px;\n            }\n            .receipt-title {\n              font-size: 18px;\n              font-weight: bold;\n              margin-bottom: 5px;\n            }\n            .receipt-subtitle {\n              font-size: 12px;\n              color: #666;\n            }\n            .receipt-info {\n              margin-bottom: 15px;\n            }\n            .receipt-info div {\n              display: flex;\n              justify-content: space-between;\n              margin-bottom: 3px;\n            }\n            .receipt-items {\n              margin-bottom: 15px;\n            }\n            .receipt-items h5 {\n              margin-bottom: 10px;\n              font-size: 14px;\n            }\n            .item-row {\n              display: flex;\n              justify-content: space-between;\n              margin-bottom: 5px;\n            }\n            .receipt-total {\n              border-top: 2px solid #000;\n              padding-top: 10px;\n              margin-top: 15px;\n            }\n            .receipt-total div {\n              display: flex;\n              justify-content: space-between;\n              font-weight: bold;\n              font-size: 14px;\n            }\n            .receipt-footer {\n              text-align: center;\n              margin-top: 20px;\n              font-size: 11px;\n              color: #666;\n            }\n            @media print {\n              body { margin: 0; padding: 10px; }\n            }\n          </style>\n        </head>\n        <body>\n          <div class=\"receipt-header\">\n            <div class=\"receipt-title\">Shawarma Boss</div>\n            <div class=\"receipt-subtitle\">Order Receipt</div>\n          </div>\n          \n          <div class=\"receipt-info\">\n            <div><span>Order ID:</span><span>#${order.id.slice(-8)}</span></div>\n            <div><span>Staff:</span><span>${order.staff}</span></div>\n            <div><span>Date:</span><span>${new Date(order.timestamp).toLocaleString()}</span></div>\n          </div>\n          \n          <div class=\"receipt-items\">\n            <h5>Items:</h5>\n            ${order.items.map(item => `\n              <div class=\"item-row\">\n                <span>${item.name} √ó ${item.quantity}</span>\n                <span>GHS ${(parseFloat(item.price || 0) * item.quantity).toFixed(2)}</span>\n              </div>\n            `).join('')}\n          </div>\n          \n          <div class=\"receipt-total\">\n            <div>\n              <span>Total:</span>\n              <span>GHS ${parseFloat(order.total || 0).toFixed(2)}</span>\n            </div>\n          </div>\n          \n          <div class=\"receipt-footer\">\n            Thank you for your business!\n          </div>\n        </body>\n      </html>\n    `);\n    \n    printWindow.document.close();\n    printWindow.focus();\n    printWindow.print();\n    printWindow.close();\n  };\n\n  const handleDownloadPDF = () => {\n    // This would integrate with jsPDF or similar library\n    alert('PDF download feature would be implemented here');\n  };\n\n  if (!order) {\n    console.log('OrderModal: No order provided');\n    return null;\n  }\n\n  console.log('OrderModal: Rendering modal with order:', order);\n\n  return (\n    <div \n      className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\"\n      style={{ \n        position: 'fixed',\n        top: 0,\n        left: 0,\n        right: 0,\n        bottom: 0,\n        zIndex: 9999,\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center'\n      }}\n    >\n      <div \n        className=\"bg-white rounded-lg shadow-xl max-w-md w-full mx-4 max-h-[90vh] overflow-y-auto\"\n        style={{\n          position: 'relative',\n          zIndex: 10000,\n          backgroundColor: 'white',\n          borderRadius: '0.5rem',\n          boxShadow: '0 25px 50px -12px rgba(0, 0, 0, 0.25)',\n          maxWidth: '28rem',\n          width: '100%',\n          margin: '0 1rem',\n          maxHeight: '90vh',\n          overflowY: 'auto'\n        }}\n      >\n        <div className=\"flex justify-between items-center p-4 border-b sticky top-0 bg-white\">\n          <h3 className=\"text-lg font-bold text-danger\">Order Receipt</h3>\n          <button\n            onClick={onClose}\n            className=\"text-gray-500 hover:text-gray-700 text-2xl font-bold\"\n            aria-label=\"Close modal\"\n          >\n            √ó\n          </button>\n        </div>\n        \n        <div className=\"p-4\">\n          {/* Receipt Content */}\n          <div id=\"receipt-content\" className=\"space-y-4\">\n            <div className=\"text-center\">\n              <h4 className=\"font-bold text-lg\">Shawarma Boss</h4>\n              <p className=\"text-sm text-muted\">Order Receipt</p>\n            </div>\n            \n            <div className=\"space-y-2\">\n              <div className=\"flex justify-between\">\n                <span>Order ID:</span>\n                <span className=\"font-mono\">#{order.id.slice(-8)}</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span>Staff:</span>\n                <span>{order.staff}</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span>Date:</span>\n                <span>{new Date(order.timestamp).toLocaleString()}</span>\n              </div>\n            </div>\n            \n            <div className=\"border-t pt-4\">\n              <h5 className=\"font-bold mb-2\">Items:</h5>\n              <div className=\"space-y-2\">\n                {order.items.map((item, index) => (\n                  <div key={index} className=\"flex justify-between\">\n                    <span>\n                      {item.name} √ó {item.quantity}\n                    </span>\n                    <span>GHS {(parseFloat(item.price || 0) * item.quantity).toFixed(2)}</span>\n                  </div>\n                ))}\n              </div>\n            </div>\n            \n            <div className=\"border-t pt-4\">\n              <div className=\"flex justify-between font-bold text-lg\">\n                <span>Total:</span>\n                <span>GHS {parseFloat(order.total || 0).toFixed(2)}</span>\n              </div>\n            </div>\n            \n            <div className=\"text-center text-sm text-muted mt-4\">\n              Thank you for your business!\n            </div>\n          </div>\n        </div>\n        \n        <div className=\"flex gap-2 p-4 border-t sticky bottom-0 bg-white\">\n          <button\n            onClick={handlePrint}\n            className=\"btn btn-danger flex-1\"\n          >\n            <i className=\"fas fa-print me-2\"></i>\n            Print Receipt\n          </button>\n          <button\n            onClick={handleDownloadPDF}\n            className=\"btn btn-outline-danger flex-1\"\n          >\n            <i className=\"fas fa-download me-2\"></i>\n            Download PDF\n          </button>\n          <button\n            onClick={onClose}\n            className=\"btn btn-outline-secondary\"\n          >\n            <i className=\"fas fa-times me-2\"></i>\n            Close\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default OrderModal;","size_bytes":7846},"src/components/POS.js":{"content":"import React, { useState, useEffect } from 'react';\nimport { useAuth } from '../services/AuthContext';\nimport { useCart } from '../services/CartContext';\nimport { getMenu, createOrder, updateMenuStock } from '../services/api';\nimport MenuGrid from './MenuGrid';\nimport Cart from './Cart';\nimport OrderModal from './OrderModal';\nimport OrderDetailsModal from './OrderDetailsModal';\n\nconst POS = () => {\n  const { user } = useAuth();\n  const { cartItems, clearCart, getCartTotal } = useCart();\n  const [menu, setMenu] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState('');\n  const [showOrderModal, setShowOrderModal] = useState(false);\n  const [currentOrder, setCurrentOrder] = useState(null);\n  const [showOrderDetailsModal, setShowOrderDetailsModal] = useState(false);\n  const [selectedOrder, setSelectedOrder] = useState(null);\n  const [recentOrders, setRecentOrders] = useState([]);\n  const [activeSection, setActiveSection] = useState('pos');\n\n  useEffect(() => {\n    loadMenu();\n    loadRecentOrders();\n  }, []);\n\n  const loadMenu = async () => {\n    try {\n      setIsLoading(true);\n      const menuData = await getMenu();\n      setMenu(menuData);\n      setError('');\n    } catch (error) {\n      console.error('Error loading menu:', error);\n      setError('Failed to load menu. Please refresh the page.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const loadRecentOrders = () => {\n    const stored = localStorage.getItem('shawarma_boss_recent_orders');\n    if (stored) {\n      try {\n        setRecentOrders(JSON.parse(stored));\n      } catch (error) {\n        console.error('Error loading recent orders:', error);\n      }\n    }\n  };\n\n  const handleViewOrderDetails = (order) => {\n    setSelectedOrder(order);\n    setShowOrderDetailsModal(true);\n  };\n\n  const handleConfirmOrder = async () => {\n    if (cartItems.length === 0) {\n      alert('Cart is empty!');\n      return;\n    }\n\n    const order = {\n      id: 'order-' + Date.now() + '-' + Math.floor(Math.random() * 1000),\n      user: user.username,\n      staff: user.username,\n      timestamp: new Date().toISOString(),\n      items: cartItems,\n      total: getCartTotal(),\n      status: 'completed'\n    };\n\n    try {\n      console.log('Creating order with data:', order);\n      \n      // Save order to backend\n      const result = await createOrder(order);\n      console.log('Order creation result:', result);\n\n      // Update stock for each item\n      for (const item of cartItems) {\n        const menuItem = menu.find(m => m.id === item.id);\n        if (menuItem && menuItem.stock >= item.quantity) {\n          await updateMenuStock(item.id, menuItem.stock - item.quantity);\n        }\n      }\n\n      // Update local menu state\n      setMenu(prevMenu =>\n        prevMenu.map(menuItem => {\n          const cartItem = cartItems.find(item => item.id === menuItem.id);\n          if (cartItem) {\n            return {\n              ...menuItem,\n              stock: Math.max(0, menuItem.stock - cartItem.quantity)\n            };\n          }\n          return menuItem;\n        })\n      );\n\n      // Save to recent orders\n      const newRecentOrders = [order, ...recentOrders.slice(0, 4)];\n      setRecentOrders(newRecentOrders);\n      localStorage.setItem('shawarma_boss_recent_orders', JSON.stringify(newRecentOrders));\n\n      // Set current order and show modal\n      setCurrentOrder(order);\n      setShowOrderModal(true);\n\n      // Clear cart\n      clearCart();\n    } catch (error) {\n      console.error('Error creating order:', error);\n      console.error('Error details:', {\n        message: error.message,\n        response: error.response,\n        data: error.data,\n        status: error.status,\n        statusText: error.statusText,\n        fullError: error\n      });\n      \n      // Try to extract a meaningful error message\n      let errorMessage = 'Unknown error';\n      if (error.response?.data?.error) {\n        errorMessage = error.response.data.error;\n      } else if (error.data?.error) {\n        errorMessage = error.data.error;\n      } else if (error.message) {\n        errorMessage = error.message;\n      } else if (error.status) {\n        errorMessage = `HTTP ${error.status}: ${error.statusText || 'Request failed'}`;\n      }\n      \n      // Add specific error message mapping for common issues\n      if (errorMessage.includes('User not found')) {\n        errorMessage = 'User not found. Please log in again.';\n      } else if (errorMessage.includes('Database not initialized')) {\n        errorMessage = 'Database not initialized. Please contact administrator.';\n      } else if (errorMessage.includes('Database connection failed')) {\n        errorMessage = 'Database connection failed. Please try again.';\n      } else if (errorMessage.includes('foreign key constraint')) {\n        errorMessage = 'User not found. Please log in again.';\n      } else if (errorMessage.includes('relation \"orders\" does not exist')) {\n        errorMessage = 'Database not initialized. Please contact administrator.';\n      }\n      \n      alert(`Failed to create order: ${errorMessage}. Please try again.`);\n    }\n  };\n\n  // Sidebar navigation items for staff dashboard\n  const sidebarItems = [\n    { id: 'pos', icon: 'fas fa-cash-register', label: 'Point of Sale' },\n    { id: 'orders', icon: 'fas fa-receipt', label: 'Recent Orders' },\n    { id: 'menu', icon: 'fas fa-utensils', label: 'Menu Items' },\n    { id: 'stats', icon: 'fas fa-chart-line', label: 'Quick Stats' }\n  ];\n\n  // Calculate quick stats for staff dashboard\n  const calculateStats = () => {\n    const todayOrders = recentOrders.filter(order => {\n      const orderDate = new Date(order.timestamp).toDateString();\n      const today = new Date().toDateString();\n      return orderDate === today;\n    });\n\n    const todayRevenue = todayOrders.reduce((sum, order) => sum + parseFloat(order.total || 0), 0);\n    const totalItems = recentOrders.reduce((sum, order) => sum + (order.items?.length || 0), 0);\n\n    return {\n      totalOrders: recentOrders.length,\n      todayOrders: todayOrders.length,\n      todayRevenue,\n      totalItems\n    };\n  };\n\n  const stats = calculateStats();\n\n  // Render different sections based on active selection\n  const renderPOSSection = () => (\n    <div className=\"pwa-pos-grid\">\n      {/* Menu Section */}\n      <div className=\"pwa-menu-section\">\n        <div className=\"pwa-section-header\">\n          <div className=\"pwa-header-content\">\n            <div className=\"pwa-header-icon\">\n              <i className=\"fas fa-utensils\"></i>\n            </div>\n            <div className=\"pwa-header-text\">\n              <h5 className=\"pwa-section-title\">Menu Items</h5>\n              <span className=\"pwa-section-subtitle\">{menu.length} items available</span>\n            </div>\n          </div>\n          <div className=\"pwa-header-actions\">\n            <button\n              onClick={loadMenu}\n              className=\"pwa-refresh-btn\"\n              title=\"Refresh menu\"\n            >\n              <i className=\"fas fa-sync\"></i>\n            </button>\n          </div>\n        </div>\n        <div className=\"pwa-menu-container\">\n          <MenuGrid menu={menu} />\n        </div>\n      </div>\n\n      {/* Cart Section */}\n      <div className=\"pwa-cart-section\">\n        <div className=\"pwa-section-header\">\n          <div className=\"pwa-header-content\">\n            <div className=\"pwa-header-icon pwa-cart-icon\">\n              <i className=\"fas fa-shopping-cart\"></i>\n            </div>\n            <div className=\"pwa-header-text\">\n              <h5 className=\"pwa-section-title\">Current Order</h5>\n              <span className=\"pwa-section-subtitle\">\n                {cartItems.length} {cartItems.length === 1 ? 'item' : 'items'} in cart\n              </span>\n            </div>\n          </div>\n          <div className=\"pwa-cart-total\">\n            <span className=\"pwa-total-label\">Total</span>\n            <span className=\"pwa-total-amount\">GHS {getCartTotal().toFixed(2)}</span>\n          </div>\n        </div>\n        <div className=\"pwa-cart-container\">\n          <Cart onConfirmOrder={handleConfirmOrder} />\n        </div>\n      </div>\n    </div>\n  );\n\n  const renderRecentOrdersSection = () => (\n    <div className=\"card\">\n      <div className=\"card-header bg-success text-white\">\n        <h5 className=\"mb-0\">\n          <i className=\"fas fa-clock me-2\"></i>\n          Recent Orders\n        </h5>\n      </div>\n      <div className=\"card-body\">\n        {recentOrders.length === 0 ? (\n          <div className=\"text-center text-muted py-5\">\n            <i className=\"fas fa-receipt fa-3x text-muted mb-3\"></i>\n            <h6>No recent orders</h6>\n            <p className=\"mb-0\">Orders will appear here as they are created</p>\n          </div>\n        ) : (\n          <div className=\"row g-3\">\n            {recentOrders.map((order) => (\n              <div key={order.id} className=\"col-md-6 col-lg-4\">\n                <div \n                  className=\"card border hover-card cursor-pointer\"\n                  onClick={() => handleViewOrderDetails(order)}\n                  style={{\n                    cursor: 'pointer',\n                    transition: 'all 0.3s ease',\n                    border: '1px solid #e2e8f0'\n                  }}\n                  onMouseEnter={(e) => {\n                    e.currentTarget.style.transform = 'translateY(-4px)';\n                    e.currentTarget.style.boxShadow = '0 8px 25px rgba(0, 0, 0, 0.15)';\n                    e.currentTarget.style.borderColor = '#dc3545';\n                  }}\n                  onMouseLeave={(e) => {\n                    e.currentTarget.style.transform = 'translateY(0)';\n                    e.currentTarget.style.boxShadow = '0 2px 8px rgba(0, 0, 0, 0.1)';\n                    e.currentTarget.style.borderColor = '#e2e8f0';\n                  }}\n                >\n                  <div className=\"card-body\">\n                    <div className=\"d-flex justify-content-between align-items-start mb-2\">\n                      <h6 className=\"card-title mb-0\">#{order.id.slice(-6)}</h6>\n                      <span className=\"badge bg-success\">Completed</span>\n                    </div>\n                    <p className=\"text-muted small mb-2\">\n                      {new Date(order.timestamp).toLocaleString()}\n                    </p>\n                    <div className=\"d-flex justify-content-between\">\n                      <span className=\"text-muted\">{order.items?.length || 0} items</span>\n                      <span className=\"fw-bold text-success\">GHS {parseFloat(order.total || 0).toFixed(2)}</span>\n                    </div>\n                    <div className=\"mt-3 text-center\">\n                      <small className=\"text-primary\">\n                        <i className=\"fas fa-eye me-1\"></i>\n                        Click to view details\n                      </small>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n\n  const renderMenuSection = () => (\n    <div className=\"card\">\n      <div className=\"card-header bg-warning text-white\">\n        <h5 className=\"mb-0\">\n          <i className=\"fas fa-utensils me-2\"></i>\n          Menu Items Overview\n        </h5>\n      </div>\n      <div className=\"card-body\">\n        <div className=\"row g-3\">\n          {menu.map((item) => (\n            <div key={item.id} className=\"col-md-6 col-lg-4\">\n              <div className=\"card border\">\n                <div className=\"card-body\">\n                  <h6 className=\"card-title\">{item.name}</h6>\n                  <div className=\"d-flex justify-content-between align-items-center\">\n                    <span className=\"text-success fw-bold\">GHS {parseFloat(item.price || 0).toFixed(2)}</span>\n                    <span className={`badge ${item.stock <= 0 ? 'bg-danger' : item.stock <= 5 ? 'bg-warning' : 'bg-success'}`}>\n                      Stock: {item.stock}\n                    </span>\n                  </div>\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n\n  const renderStatsSection = () => (\n    <div className=\"space-y-6\">\n      <div className=\"row g-4 mb-4\">\n        <div className=\"col-md-3\">\n          <div className=\"bg-primary bg-opacity-10 border border-primary border-opacity-20 rounded-lg p-4 text-center\">\n            <div className=\"text-3xl font-bold text-primary mb-1\">{stats.totalOrders}</div>\n            <div className=\"text-sm text-muted\">Total Orders</div>\n          </div>\n        </div>\n        <div className=\"col-md-3\">\n          <div className=\"bg-success bg-opacity-10 border border-success border-opacity-20 rounded-lg p-4 text-center\">\n            <div className=\"text-3xl font-bold text-success mb-1\">{stats.todayOrders}</div>\n            <div className=\"text-sm text-muted\">Today's Orders</div>\n          </div>\n        </div>\n        <div className=\"col-md-3\">\n          <div className=\"bg-warning bg-opacity-10 border border-warning border-opacity-20 rounded-lg p-4 text-center\">\n            <div className=\"text-3xl font-bold text-warning mb-1\">GHS {stats.todayRevenue.toFixed(2)}</div>\n            <div className=\"text-sm text-muted\">Today's Revenue</div>\n          </div>\n        </div>\n        <div className=\"col-md-3\">\n          <div className=\"bg-danger bg-opacity-10 border border-danger border-opacity-20 rounded-lg p-4 text-center\">\n            <div className=\"text-3xl font-bold text-danger mb-1\">{stats.totalItems}</div>\n            <div className=\"text-sm text-muted\">Items Sold</div>\n          </div>\n        </div>\n      </div>\n      \n      <div className=\"card\">\n        <div className=\"card-header\">\n          <h5 className=\"mb-0\">Performance Overview</h5>\n        </div>\n        <div className=\"card-body\">\n          <div className=\"text-center py-4\">\n            <i className=\"fas fa-user-check fa-3x text-success mb-3\"></i>\n            <h6>Logged in as: {user.username}</h6>\n            <p className=\"text-muted mb-0\">Keep up the great work!</p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n\n  const renderContent = () => {\n    switch (activeSection) {\n      case 'orders':\n        return renderRecentOrdersSection();\n      case 'menu':\n        return renderMenuSection();\n      case 'stats':\n        return renderStatsSection();\n      case 'pos':\n      default:\n        return renderPOSSection();\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center py-8\">\n        <div className=\"spinner\"></div>\n        <span className=\"ml-2\">Loading menu...</span>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"card\">\n        <div className=\"card-body text-center\">\n          <div className=\"text-danger mb-4\">{error}</div>\n          <button \n            onClick={loadMenu}\n            className=\"btn btn-danger\"\n          >\n            Retry\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"pwa-staff-layout fade-in\">\n      {/* PWA Navigation Tabs - Mobile First */}\n      <div className=\"pwa-nav-tabs\">\n        <div className=\"pwa-nav-container\">\n          {sidebarItems.map((item) => (\n            <button\n              key={item.id}\n              className={`pwa-nav-tab ${activeSection === item.id ? 'active' : ''}`}\n              onClick={() => setActiveSection(item.id)}\n            >\n              <div className=\"pwa-tab-icon\">\n                <i className={item.icon}></i>\n              </div>\n              <span className=\"pwa-tab-label\">{item.label}</span>\n            </button>\n          ))}\n        </div>\n      </div>\n\n      {/* PWA Main Content */}\n      <div className=\"pwa-main-content\">\n        {/* PWA Header */}\n        <div className=\"pwa-main-header\">\n          <div className=\"pwa-header-info\">\n            <h2 className=\"pwa-main-title\">\n              <i className={`${sidebarItems.find(item => item.id === activeSection)?.icon || 'fas fa-dashboard'}`}></i>\n              {sidebarItems.find(item => item.id === activeSection)?.label || 'Dashboard'}\n            </h2>\n            <p className=\"pwa-main-subtitle\">\n              {activeSection === 'pos' && 'Create orders and manage transactions'}\n              {activeSection === 'orders' && 'View all recent order history'}\n              {activeSection === 'menu' && 'Browse available menu items'}\n              {activeSection === 'stats' && 'View performance statistics'}\n            </p>\n          </div>\n          <div className=\"pwa-header-user\">\n            <div className=\"pwa-user-avatar\">\n              <i className=\"fas fa-user\"></i>\n            </div>\n            <div className=\"pwa-user-info\">\n              <span className=\"pwa-user-name\">{user.username}</span>\n              <span className=\"pwa-user-role\">Staff Member</span>\n            </div>\n          </div>\n        </div>\n\n        {/* Dynamic Content Area */}\n        <div className=\"pwa-content-area\">\n          {renderContent()}\n        </div>\n      </div>\n\n      {/* Order Success Modal */}\n      {showOrderModal && currentOrder && (\n        <OrderModal\n          order={currentOrder}\n          onClose={() => {\n            setShowOrderModal(false);\n            setCurrentOrder(null);\n          }}\n        />\n      )}\n\n      {/* Order Details Modal */}\n      {showOrderDetailsModal && selectedOrder && (\n        <OrderDetailsModal\n          order={selectedOrder}\n          onClose={() => {\n            setShowOrderDetailsModal(false);\n            setSelectedOrder(null);\n          }}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default POS;","size_bytes":17664},"src/components/StaffDetailsModal.js":{"content":"import React, { useState } from 'react';\nimport { updateStaff, deleteStaff, resetStaffPassword } from '../services/api';\n\nconst StaffDetailsModal = ({ staff, onClose, onUpdate, onDelete }) => {\n  const [isEditing, setIsEditing] = useState(false);\n  const [isResettingPassword, setIsResettingPassword] = useState(false);\n  const [isDeleting, setIsDeleting] = useState(false);\n  const [editData, setEditData] = useState({\n    role: staff.role,\n    is_active: staff.is_active\n  });\n  const [newPassword, setNewPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [error, setError] = useState('');\n  const [success, setSuccess] = useState('');\n\n  const handleEdit = () => {\n    setIsEditing(true);\n    setEditData({\n      role: staff.role,\n      is_active: staff.is_active\n    });\n  };\n\n  const handleSave = async () => {\n    try {\n      setError('');\n      await updateStaff(staff.username, editData);\n      setSuccess('Staff member updated successfully!');\n      onUpdate();\n      setTimeout(() => {\n        setIsEditing(false);\n        setSuccess('');\n      }, 2000);\n    } catch (error) {\n      setError(error.error || 'Failed to update staff member');\n    }\n  };\n\n  const handleCancel = () => {\n    setIsEditing(false);\n    setEditData({\n      role: staff.role,\n      is_active: staff.is_active\n    });\n    setError('');\n  };\n\n  const handleResetPassword = async () => {\n    if (!newPassword || !confirmPassword) {\n      setError('Please fill in both password fields');\n      return;\n    }\n    if (newPassword !== confirmPassword) {\n      setError('Passwords do not match');\n      return;\n    }\n    if (newPassword.length < 6) {\n      setError('Password must be at least 6 characters long');\n      return;\n    }\n\n    try {\n      setError('');\n      setIsResettingPassword(true);\n      await resetStaffPassword(staff.username, newPassword);\n      setSuccess('Password reset successfully!');\n      setNewPassword('');\n      setConfirmPassword('');\n      setTimeout(() => {\n        setIsResettingPassword(false);\n        setSuccess('');\n      }, 2000);\n    } catch (error) {\n      setError(error.error || 'Failed to reset password');\n      setIsResettingPassword(false);\n    }\n  };\n\n  const handleDelete = async () => {\n    if (!window.confirm(`Are you sure you want to delete ${staff.username}? This action cannot be undone.`)) {\n      return;\n    }\n\n    try {\n      setError('');\n      setIsDeleting(true);\n      await deleteStaff(staff.username);\n      setSuccess('Staff member deleted successfully!');\n      setTimeout(() => {\n        onDelete();\n        onClose();\n      }, 1500);\n    } catch (error) {\n      setError(error.error || 'Failed to delete staff member');\n      setIsDeleting(false);\n    }\n  };\n\n  if (!staff) return null;\n\n  return (\n    <div \n      className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\"\n      style={{ \n        position: 'fixed',\n        top: 0,\n        left: 0,\n        right: 0,\n        bottom: 0,\n        zIndex: 9999,\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center'\n      }}\n    >\n      <div \n        className=\"bg-white rounded-lg shadow-xl max-w-2xl w-full mx-4 max-h-[90vh] overflow-y-auto\"\n        style={{\n          position: 'relative',\n          zIndex: 10000,\n          backgroundColor: 'white',\n          borderRadius: '0.5rem',\n          boxShadow: '0 25px 50px -12px rgba(0, 0, 0, 0.25)',\n          maxWidth: '42rem',\n          width: '100%',\n          margin: '0 1rem',\n          maxHeight: '90vh',\n          overflowY: 'auto'\n        }}\n      >\n        <div className=\"flex justify-between items-center p-4 border-b sticky top-0 bg-white\">\n          <h3 className=\"text-xl font-bold text-danger\">Staff Details</h3>\n          <button\n            onClick={onClose}\n            className=\"text-gray-500 hover:text-gray-700 text-2xl font-bold\"\n            aria-label=\"Close modal\"\n          >\n            √ó\n          </button>\n        </div>\n        \n        <div className=\"p-6\">\n          {/* Success/Error Messages */}\n          {success && (\n            <div className=\"alert alert-success alert-dismissible fade show mb-4\" role=\"alert\">\n              <i className=\"fas fa-check-circle me-2\"></i>\n              {success}\n            </div>\n          )}\n          \n          {error && (\n            <div className=\"alert alert-danger alert-dismissible fade show mb-4\" role=\"alert\">\n              <i className=\"fas fa-exclamation-circle me-2\"></i>\n              {error}\n            </div>\n          )}\n\n          {/* Staff Header */}\n          <div className=\"text-center mb-6\">\n            <div className=\"w-20 h-20 bg-danger rounded-full flex items-center justify-center mx-auto mb-4\">\n              <i className=\"fas fa-user text-white text-2xl\"></i>\n            </div>\n            <h4 className=\"font-bold text-2xl text-danger\">{staff.username}</h4>\n            <p className=\"text-sm text-muted\">Staff Member</p>\n          </div>\n          \n          {/* Staff Information */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-6\">\n            <div className=\"bg-gray-50 p-4 rounded-lg\">\n              <h6 className=\"font-semibold text-gray-700 mb-2\">Basic Information</h6>\n              <div className=\"space-y-2\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-600\">Username:</span>\n                  <span className=\"font-semibold\">{staff.username}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-600\">Role:</span>\n                  <span className={`badge ${staff.role === 'admin' ? 'bg-danger' : 'bg-primary'} px-2 py-1 rounded text-xs`}>\n                    {staff.role}\n                  </span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-600\">Status:</span>\n                  <span className={`badge ${staff.is_active ? 'bg-success' : 'bg-secondary'} px-2 py-1 rounded text-xs`}>\n                    {staff.is_active ? 'Active' : 'Inactive'}\n                  </span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-600\">Created:</span>\n                  <span className=\"font-semibold\">\n                    {staff.created_at ? new Date(staff.created_at).toLocaleDateString() : 'Unknown'}\n                  </span>\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"bg-gray-50 p-4 rounded-lg\">\n              <h6 className=\"font-semibold text-gray-700 mb-2\">Quick Actions</h6>\n              <div className=\"space-y-2\">\n                <button\n                  onClick={handleEdit}\n                  className=\"btn btn-outline-primary w-100\"\n                  disabled={isEditing}\n                >\n                  <i className=\"fas fa-edit me-2\"></i>\n                  {isEditing ? 'Editing...' : 'Edit Details'}\n                </button>\n                <button\n                  onClick={() => setIsResettingPassword(!isResettingPassword)}\n                  className=\"btn btn-outline-warning w-100\"\n                >\n                  <i className=\"fas fa-key me-2\"></i>\n                  Reset Password\n                </button>\n                <button\n                  onClick={handleDelete}\n                  className=\"btn btn-outline-danger w-100\"\n                  disabled={isDeleting}\n                >\n                  <i className=\"fas fa-trash me-2\"></i>\n                  {isDeleting ? 'Deleting...' : 'Delete Staff'}\n                </button>\n              </div>\n            </div>\n          </div>\n\n          {/* Edit Form */}\n          {isEditing && (\n            <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4 mb-6\">\n              <h6 className=\"font-semibold text-blue-800 mb-3\">Edit Staff Details</h6>\n              <div className=\"row\">\n                <div className=\"col-md-6 mb-3\">\n                  <label className=\"form-label\">Role</label>\n                  <select\n                    value={editData.role}\n                    onChange={(e) => setEditData({...editData, role: e.target.value})}\n                    className=\"form-control\"\n                  >\n                    <option value=\"staff\">Staff</option>\n                    <option value=\"admin\">Admin</option>\n                  </select>\n                </div>\n                <div className=\"col-md-6 mb-3\">\n                  <label className=\"form-label\">Status</label>\n                  <select\n                    value={editData.is_active ? 'active' : 'inactive'}\n                    onChange={(e) => setEditData({...editData, is_active: e.target.value === 'active'})}\n                    className=\"form-control\"\n                  >\n                    <option value=\"active\">Active</option>\n                    <option value=\"inactive\">Inactive</option>\n                  </select>\n                </div>\n              </div>\n              <div className=\"d-flex gap-2\">\n                <button onClick={handleSave} className=\"btn btn-primary\">\n                  <i className=\"fas fa-save me-2\"></i>\n                  Save Changes\n                </button>\n                <button onClick={handleCancel} className=\"btn btn-outline-secondary\">\n                  <i className=\"fas fa-times me-2\"></i>\n                  Cancel\n                </button>\n              </div>\n            </div>\n          )}\n\n          {/* Reset Password Form */}\n          {isResettingPassword && (\n            <div className=\"bg-yellow-50 border border-yellow-200 rounded-lg p-4 mb-6\">\n              <h6 className=\"font-semibold text-yellow-800 mb-3\">Reset Password</h6>\n              <div className=\"row\">\n                <div className=\"col-md-6 mb-3\">\n                  <label className=\"form-label\">New Password</label>\n                  <input\n                    type=\"password\"\n                    value={newPassword}\n                    onChange={(e) => setNewPassword(e.target.value)}\n                    className=\"form-control\"\n                    placeholder=\"Enter new password\"\n                  />\n                </div>\n                <div className=\"col-md-6 mb-3\">\n                  <label className=\"form-label\">Confirm Password</label>\n                  <input\n                    type=\"password\"\n                    value={confirmPassword}\n                    onChange={(e) => setConfirmPassword(e.target.value)}\n                    className=\"form-control\"\n                    placeholder=\"Confirm new password\"\n                  />\n                </div>\n              </div>\n              <div className=\"d-flex gap-2\">\n                <button \n                  onClick={handleResetPassword} \n                  className=\"btn btn-warning\"\n                  disabled={isResettingPassword}\n                >\n                  <i className=\"fas fa-key me-2\"></i>\n                  {isResettingPassword ? 'Resetting...' : 'Reset Password'}\n                </button>\n                <button \n                  onClick={() => {\n                    setIsResettingPassword(false);\n                    setNewPassword('');\n                    setConfirmPassword('');\n                    setError('');\n                  }} \n                  className=\"btn btn-outline-secondary\"\n                >\n                  <i className=\"fas fa-times me-2\"></i>\n                  Cancel\n                </button>\n              </div>\n            </div>\n          )}\n        </div>\n        \n        <div className=\"flex gap-2 p-4 border-t sticky bottom-0 bg-white\">\n          <button\n            onClick={onClose}\n            className=\"btn btn-outline-secondary flex-1\"\n          >\n            <i className=\"fas fa-times me-2\"></i>\n            Close\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default StaffDetailsModal;\n","size_bytes":12000},"src/services/AuthContext.js":{"content":"import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { login as apiLogin } from './api';\n\nconst AuthContext = createContext();\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    // Check for stored user on app load\n    const storedUser = localStorage.getItem('shawarma_boss_current_user');\n    if (storedUser) {\n      try {\n        setUser(JSON.parse(storedUser));\n      } catch (error) {\n        console.error('Error parsing stored user:', error);\n        localStorage.removeItem('shawarma_boss_current_user');\n      }\n    }\n    setIsLoading(false);\n  }, []);\n\n  const login = async (username, password) => {\n    try {\n      const response = await apiLogin(username, password);\n      if (response.ok) {\n        const userData = { username: response.username, role: response.role };\n        setUser(userData);\n        localStorage.setItem('shawarma_boss_current_user', JSON.stringify(userData));\n        return { success: true };\n      } else {\n        return { success: false, error: response.error || 'Login failed' };\n      }\n    } catch (error) {\n      console.error('Login error:', error);\n      return { success: false, error: 'Network error. Please try again.' };\n    }\n  };\n\n  const logout = () => {\n    setUser(null);\n    localStorage.removeItem('shawarma_boss_current_user');\n  };\n\n  const value = {\n    user,\n    login,\n    logout,\n    isLoading\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};","size_bytes":1803},"src/services/CartContext.js":{"content":"import React, { createContext, useContext, useState } from 'react';\n\nconst CartContext = createContext();\n\nexport const useCart = () => {\n  const context = useContext(CartContext);\n  if (!context) {\n    throw new Error('useCart must be used within a CartProvider');\n  }\n  return context;\n};\n\nexport const CartProvider = ({ children }) => {\n  const [cartItems, setCartItems] = useState([]);\n\n  const addToCart = (menuItem, quantity = 1) => {\n    setCartItems(prevItems => {\n      const existingItem = prevItems.find(item => item.id === menuItem.id);\n      \n      if (existingItem) {\n        return prevItems.map(item =>\n          item.id === menuItem.id\n            ? { ...item, quantity: item.quantity + quantity }\n            : item\n        );\n      } else {\n        return [...prevItems, { ...menuItem, quantity }];\n      }\n    });\n  };\n\n  const removeFromCart = (itemId) => {\n    setCartItems(prevItems => prevItems.filter(item => item.id !== itemId));\n  };\n\n  const updateQuantity = (itemId, newQuantity) => {\n    if (newQuantity <= 0) {\n      removeFromCart(itemId);\n      return;\n    }\n\n    setCartItems(prevItems =>\n      prevItems.map(item =>\n        item.id === itemId\n          ? { ...item, quantity: newQuantity }\n          : item\n      )\n    );\n  };\n\n  const clearCart = () => {\n    setCartItems([]);\n  };\n\n  const getCartTotal = () => {\n    return cartItems.reduce((total, item) => total + (parseFloat(item.price || 0) * item.quantity), 0);\n  };\n\n  const getCartCount = () => {\n    return cartItems.reduce((count, item) => count + item.quantity, 0);\n  };\n\n  const value = {\n    cartItems,\n    addToCart,\n    removeFromCart,\n    updateQuantity,\n    clearCart,\n    getCartTotal,\n    getCartCount\n  };\n\n  return (\n    <CartContext.Provider value={value}>\n      {children}\n    </CartContext.Provider>\n  );\n};","size_bytes":1817},"src/services/api.js":{"content":"import axios from 'axios';\n\n// Create axios instance with base configuration\nconst api = axios.create({\n  baseURL: '/api',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Auth API\nexport const login = async (username, password) => {\n  try {\n    const response = await api.post('/login', { username, password });\n    return response.data;\n  } catch (error) {\n    throw error.response?.data || { error: 'Network error' };\n  }\n};\n\n// Menu API\nexport const getMenu = async () => {\n  try {\n    const response = await api.get('/menu');\n    return response.data;\n  } catch (error) {\n    throw error.response?.data || { error: 'Failed to fetch menu' };\n  }\n};\n\nexport const addMenuItem = async (menuItem) => {\n  try {\n    const response = await api.post('/menu', menuItem);\n    return response.data;\n  } catch (error) {\n    throw error.response?.data || { error: 'Failed to add menu item' };\n  }\n};\n\nexport const updateMenuStock = async (itemId, stock) => {\n  try {\n    const response = await api.put(`/menu/${itemId}/stock`, { stock });\n    return response.data;\n  } catch (error) {\n    throw error.response?.data || { error: 'Failed to update stock' };\n  }\n};\n\nexport const updateMenuItem = async (itemId, itemData) => {\n  try {\n    const response = await api.patch('/menu', { id: itemId, ...itemData });\n    return response.data;\n  } catch (error) {\n    throw error.response?.data || { error: 'Failed to update menu item' };\n  }\n};\n\nexport const deleteMenuItem = async (itemId) => {\n  try {\n    const response = await api.delete('/menu', { data: { id: itemId } });\n    return response.data;\n  } catch (error) {\n    throw error.response?.data || { error: 'Failed to delete menu item' };\n  }\n};\n\nexport const duplicateMenuItem = async (itemId) => {\n  try {\n    const response = await api.post('/menu', { duplicateFrom: itemId });\n    return response.data;\n  } catch (error) {\n    throw error.response?.data || { error: 'Failed to duplicate menu item' };\n  }\n};\n\nexport const toggleMenuItemAvailability = async (itemId, isAvailable) => {\n  try {\n    const response = await api.patch('/menu', { id: itemId, is_available: isAvailable });\n    return response.data;\n  } catch (error) {\n    throw error.response?.data || { error: 'Failed to toggle availability' };\n  }\n};\n\n// Staff API\nexport const getStaff = async () => {\n  try {\n    const response = await api.get('/staff');\n    return response.data;\n  } catch (error) {\n    throw error.response?.data || { error: 'Failed to fetch staff' };\n  }\n};\n\nexport const addStaff = async (staffData) => {\n  try {\n    const response = await api.post('/staff', staffData);\n    return response.data;\n  } catch (error) {\n    throw error.response?.data || { error: 'Failed to add staff member' };\n  }\n};\n\nexport const updateStaff = async (username, staffData) => {\n  try {\n    const response = await api.put('/staff', { username, ...staffData });\n    return response.data;\n  } catch (error) {\n    throw error.response?.data || { error: 'Failed to update staff member' };\n  }\n};\n\nexport const deleteStaff = async (username) => {\n  try {\n    const response = await api.delete('/staff', { data: { username } });\n    return response.data;\n  } catch (error) {\n    throw error.response?.data || { error: 'Failed to delete staff member' };\n  }\n};\n\nexport const resetStaffPassword = async (username, newPassword) => {\n  try {\n    const response = await api.patch('/staff', { username, newPassword });\n    return response.data;\n  } catch (error) {\n    throw error.response?.data || { error: 'Failed to reset password' };\n  }\n};\n\n// Orders API\nexport const getOrders = async () => {\n  try {\n    const response = await api.get('/orders');\n    return response.data;\n  } catch (error) {\n    throw error.response?.data || { error: 'Failed to fetch orders' };\n  }\n};\n\nexport const createOrder = async (orderData) => {\n  try {\n    console.log('API: Sending order data:', orderData);\n    const response = await api.post('/orders', orderData);\n    console.log('API: Order creation response:', response.data);\n    return response.data;\n  } catch (error) {\n    console.error('API: Order creation error:', error);\n    console.error('API: Error response:', error.response);\n    console.error('API: Error data:', error.response?.data);\n    \n    // Preserve the original error structure\n    if (error.response?.data) {\n      throw error.response.data;\n    } else if (error.message) {\n      throw { error: error.message };\n    } else {\n      throw { error: 'Failed to create order' };\n    }\n  }\n};\n\n// Health check\nexport const healthCheck = async () => {\n  try {\n    const response = await api.get('/health');\n    return response.data;\n  } catch (error) {\n    throw error.response?.data || { error: 'Health check failed' };\n  }\n};\n\nexport default api;","size_bytes":4771},"api/menu/[id]/stock.js":{"content":"// Menu stock update endpoint for Vercel serverless with Neon database\nconst { queryDBOnce, setCorsHeaders, handleOptions } = require('../../_utils');\n\nmodule.exports = async (req, res) => {\n  // Handle CORS preflight\n  if (req.method === 'OPTIONS') {\n    return handleOptions(res);\n  }\n\n  setCorsHeaders(res);\n\n  try {\n    if (req.method === 'PUT') {\n      // Update menu item stock\n      const { id } = req.query;\n      const { stock } = req.body;\n      \n      if (!id) {\n        return res.status(400).json({ error: 'Menu item ID required' });\n      }\n      \n      if (stock === undefined || stock === null) {\n        return res.status(400).json({ error: 'Stock value required' });\n      }\n      \n      await queryDBOnce('UPDATE menu SET stock = $1, updated_at = NOW() WHERE id = $2', [parseInt(stock), id]);\n      res.json({ ok: true, id, stock: parseInt(stock) });\n    } else {\n      res.status(405).json({ error: 'Method not allowed' });\n    }\n  } catch (e) {\n    console.error('Menu stock update error:', e);\n    res.status(500).json({ error: e.message });\n  }\n};\n","size_bytes":1071},"src/components/MenuDetailsModal.js":{"content":"import React, { useState, useEffect } from 'react';\n\nconst MenuDetailsModal = ({ menuItem, onClose, onUpdate, onDelete }) => {\n  const [isEditing, setIsEditing] = useState(false);\n  const [formData, setFormData] = useState({\n    name: '',\n    price: '',\n    category: '',\n    is_available: true\n  });\n\n  useEffect(() => {\n    if (menuItem) {\n      setFormData({\n        name: menuItem.name || '',\n        price: menuItem.price || '',\n        category: menuItem.category || 'General',\n        is_available: menuItem.is_available !== false\n      });\n    }\n  }, [menuItem]);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    try {\n      await onUpdate(menuItem.id, formData);\n      setIsEditing(false);\n    } catch (error) {\n      console.error('Error updating menu item:', error);\n      alert('Failed to update menu item');\n    }\n  };\n\n  const handleDelete = async () => {\n    if (window.confirm(`Are you sure you want to delete \"${menuItem.name}\"?`)) {\n      try {\n        await onDelete(menuItem.id);\n        onClose();\n      } catch (error) {\n        console.error('Error deleting menu item:', error);\n        alert('Failed to delete menu item');\n      }\n    }\n  };\n\n  if (!menuItem) return null;\n\n  return (\n    <div className=\"modal-overlay\" onClick={onClose}>\n      <div className=\"modal-content\" onClick={(e) => e.stopPropagation()}>\n        <div className=\"modal-header\">\n          <h3 className=\"modal-title\">\n            <i className=\"fas fa-utensils me-2\"></i>\n            {isEditing ? 'Edit Menu Item' : 'Menu Item Details'}\n          </h3>\n          <button className=\"btn-close\" onClick={onClose}>\n            <i className=\"fas fa-times\"></i>\n          </button>\n        </div>\n\n        <div className=\"modal-body\">\n          {!isEditing ? (\n            <div className=\"menu-details\">\n              <div className=\"detail-row\">\n                <label className=\"detail-label\">Item Name:</label>\n                <div className=\"detail-value\">{menuItem.name}</div>\n              </div>\n              <div className=\"detail-row\">\n                <label className=\"detail-label\">Price:</label>\n                <div className=\"detail-value\">GHS {parseFloat(menuItem.price || 0).toFixed(2)}</div>\n              </div>\n              <div className=\"detail-row\">\n                <label className=\"detail-label\">Current Stock:</label>\n                <div className=\"detail-value\">\n                  <span className={`badge ${menuItem.stock <= 0 ? 'bg-danger' : menuItem.stock <= 5 ? 'bg-warning' : 'bg-success'}`}>\n                    {menuItem.stock} units\n                  </span>\n                </div>\n              </div>\n              <div className=\"detail-row\">\n                <label className=\"detail-label\">Category:</label>\n                <div className=\"detail-value\">{menuItem.category || 'General'}</div>\n              </div>\n              <div className=\"detail-row\">\n                <label className=\"detail-label\">Availability:</label>\n                <div className=\"detail-value\">\n                  <span className={`badge ${menuItem.is_available ? 'bg-success' : 'bg-secondary'}`}>\n                    {menuItem.is_available ? 'Available' : 'Unavailable'}\n                  </span>\n                </div>\n              </div>\n              <div className=\"detail-row\">\n                <label className=\"detail-label\">Item ID:</label>\n                <div className=\"detail-value text-muted\">{menuItem.id}</div>\n              </div>\n            </div>\n          ) : (\n            <form onSubmit={handleSubmit} className=\"menu-edit-form\">\n              <div className=\"form-group\">\n                <label className=\"form-label\">Item Name</label>\n                <input\n                  type=\"text\"\n                  className=\"form-control\"\n                  value={formData.name}\n                  onChange={(e) => setFormData({...formData, name: e.target.value})}\n                  required\n                />\n              </div>\n              <div className=\"form-group\">\n                <label className=\"form-label\">Price (GHS)</label>\n                <input\n                  type=\"number\"\n                  step=\"0.01\"\n                  className=\"form-control\"\n                  value={formData.price}\n                  onChange={(e) => setFormData({...formData, price: e.target.value})}\n                  required\n                />\n              </div>\n              <div className=\"form-group\">\n                <label className=\"form-label\">Category</label>\n                <select\n                  className=\"form-control\"\n                  value={formData.category}\n                  onChange={(e) => setFormData({...formData, category: e.target.value})}\n                >\n                  <option value=\"General\">General</option>\n                  <option value=\"Shawarma\">Shawarma</option>\n                  <option value=\"Wraps\">Wraps</option>\n                  <option value=\"Sides\">Sides</option>\n                  <option value=\"Drinks\">Drinks</option>\n                  <option value=\"Desserts\">Desserts</option>\n                </select>\n              </div>\n              <div className=\"form-group\">\n                <label className=\"form-label d-flex align-items-center\">\n                  <input\n                    type=\"checkbox\"\n                    className=\"form-check-input me-2\"\n                    checked={formData.is_available}\n                    onChange={(e) => setFormData({...formData, is_available: e.target.checked})}\n                  />\n                  Item Available for Sale\n                </label>\n              </div>\n            </form>\n          )}\n        </div>\n\n        <div className=\"modal-footer\">\n          {!isEditing ? (\n            <>\n              <button className=\"btn btn-primary\" onClick={() => setIsEditing(true)}>\n                <i className=\"fas fa-edit me-2\"></i>\n                Edit Item\n              </button>\n              <button className=\"btn btn-danger\" onClick={handleDelete}>\n                <i className=\"fas fa-trash me-2\"></i>\n                Delete Item\n              </button>\n              <button className=\"btn btn-secondary\" onClick={onClose}>\n                Close\n              </button>\n            </>\n          ) : (\n            <>\n              <button className=\"btn btn-success\" onClick={handleSubmit}>\n                <i className=\"fas fa-save me-2\"></i>\n                Save Changes\n              </button>\n              <button className=\"btn btn-secondary\" onClick={() => setIsEditing(false)}>\n                Cancel\n              </button>\n            </>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default MenuDetailsModal;\n","size_bytes":6702}},"version":1}